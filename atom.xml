<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kirago杂谈</title>
  
  
  <link href="http://kiragoo.github.com/atom.xml" rel="self"/>
  
  <link href="http://kiragoo.github.com/"/>
  <updated>2021-04-12T08:38:12.370Z</updated>
  <id>http://kiragoo.github.com/</id>
  
  <author>
    <name>kirago</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernetes源码分析系列之kube-scheduler-1</title>
    <link href="http://kiragoo.github.com/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/"/>
    <id>http://kiragoo.github.com/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/</id>
    <published>2021-04-12T06:12:00.000Z</published>
    <updated>2021-04-12T08:38:12.370Z</updated>
    
    <content type="html"><![CDATA[<p><code>kube-scheduler</code> 源码分析系列重点作为代码流程梳理，对于 <code>kube-scheduler</code> 的文档还请详见<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/kube-scheduler/">kube-scheduler</a>介绍。</p><p><em>如下代码分析对于细节的处理会跳过，只看主干</em></p><h1 id="代码入口分析"><a href="#代码入口分析" class="headerlink" title="代码入口分析"></a>代码入口分析</h1><p><code>kubernetes/cmd/kube-scheduler/app/scheduler.go</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @1</span><br><span class="line">command :&#x3D; app.NewSchedulerCommand()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; TODO: once we switch everything over to Cobra commands, we can go back to calling</span><br><span class="line">&#x2F;&#x2F; utilflag.InitFlags() (by removing its pflag.Parse() call). For now, we have to set the</span><br><span class="line">&#x2F;&#x2F; normalize func and add the go flag set by hand.</span><br><span class="line">pflag.CommandLine.SetNormalizeFunc(cliflag.WordSepNormalizeFunc)</span><br><span class="line">&#x2F;&#x2F; utilflag.InitFlags()</span><br><span class="line">logs.InitLogs()</span><br><span class="line">defer logs.FlushLogs()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;@2</span><br><span class="line">if err :&#x3D; command.Execute(); err !&#x3D; nil &#123;</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@1 <code>app.NewSchedulerCommand(）</code> 主要为命令行注册对应的 options， 借助<code>cobra </code> 库进行 <code>Command</code> 的对应 parse 和初始化工作。:</li><li>@2 <code>command.Execute()</code> 实际上是服务启动入口，继续 <code>step in</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ExecuteContext is the same as Execute(), but sets the ctx on the command.</span><br><span class="line">&#x2F;&#x2F; Retrieve ctx by calling cmd.Context() inside your *Run lifecycle functions.</span><br><span class="line">func (c *Command) ExecuteContext(ctx context.Context) error &#123;</span><br><span class="line">c.ctx &#x3D; ctx</span><br><span class="line">return c.Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Execute uses the args (os.Args[1:] by default)</span><br><span class="line">&#x2F;&#x2F; and run through the command tree finding appropriate matches</span><br><span class="line">&#x2F;&#x2F; for commands and then corresponding flags.</span><br><span class="line">func (c *Command) Execute() error &#123;</span><br><span class="line">_, err :&#x3D; c.ExecuteC()</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c *Command) ExecuteC() (cmd *Command, err error) &#123;</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F; initialize help as the last point possible to allow for user</span><br><span class="line">&#x2F;&#x2F; overriding</span><br><span class="line">c.InitDefaultHelpCmd()</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F; initialize the hidden command to be used for bash completion</span><br><span class="line">c.initCompleteCmd(args)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @3</span><br><span class="line">err &#x3D; cmd.execute(flags)</span><br><span class="line">    .....</span><br><span class="line">return cmd, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此时我们通过函数名发现 @3 部分是真正执行的部分，继续深入看看:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">func (c *Command) execute(a []string) (err error) &#123;</span><br><span class="line">.....</span><br><span class="line">    &#x2F;&#x2F; initialize help and version flag at the last point possible to allow for user</span><br><span class="line">&#x2F;&#x2F; overriding</span><br><span class="line">c.InitDefaultHelpFlag()</span><br><span class="line">c.InitDefaultVersionFlag()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">c.preRun()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">    if c.PreRunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.PreRunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if c.PreRun !&#x3D; nil &#123;</span><br><span class="line">c.PreRun(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if err :&#x3D; c.validateRequiredFlags(); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">if c.RunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.RunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">c.Run(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line">if c.PostRunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.PostRunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if c.PostRun !&#x3D; nil &#123;</span><br><span class="line">c.PostRun(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在此段库函数代码中我们会发现一堆与<code>Run</code>相关的函数，此部分库函数我也未做详细学习，但是根据名称我们可以理解实际上是做真正运行的一些前置工作，由于与 <code>kube-scheduler</code> 核心机制没有太大的干系，可以先大概了解下，不能忘了此次分析的主要矛盾。</li></ul><p>既然我们知道了最终是 <code>Command</code> 调用了，结合 <code>kube-scheduler</code> 我们是怎么和 上下文关联起来的呢？这里我们回头再继续看下 <code>app.NewSchedulerCommand()</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func NewSchedulerCommand(registryOptions ...Option) *cobra.Command &#123;</span><br><span class="line">    .....</span><br><span class="line">    Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line"></span><br><span class="line">if err :&#x3D; runCommand(cmd, opts, registryOptions...); err !&#x3D; nil &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, &quot;%v\n&quot;, err)</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; runCommand runs the scheduler.</span><br><span class="line">func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error &#123;</span><br><span class="line">    .....</span><br><span class="line">    return Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处才是kube-scheduler真正意义上执行的具体逻辑</span><br><span class="line">&#x2F;&#x2F; Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入口启动流程梳理"><a href="#入口启动流程梳理" class="headerlink" title="入口启动流程梳理"></a>入口启动流程梳理</h2><p><img src="http://tvax2.sinaimg.cn/wap800/7a56748fly1gpgzjgtrpuj214m0ri0wr.jpg" alt="流程梳理"><br>以上为主要的启动流程分析，主要还是围绕着 <code>Command</code> 运行的入口流程进行分析。下面我们重点关注<code>kube-scheduler</code> 初始化及真正运行具体做了哪些事情。</p><h1 id="kube-scheduler-创建及运行"><a href="#kube-scheduler-创建及运行" class="headerlink" title="kube-scheduler 创建及运行"></a><code>kube-scheduler</code> 创建及运行</h1><ul><li>入口<br>在 <code>runCommand</code> 这个函数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; runCommand runs the scheduler.</span><br><span class="line">func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error &#123;</span><br><span class="line">    .....</span><br><span class="line">cc, sched, err :&#x3D; Setup(ctx, opts, registryOptions...)</span><br><span class="line">    .....</span><br><span class="line">    return Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Setup</code> 创建工作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Setup creates a completed config and a scheduler based on the command args and options</span><br><span class="line">func Setup(ctx context.Context, opts *options.Options, outOfTreeRegistryOptions ...Option) (*schedulerserverconfig.CompletedConfig, *scheduler.Scheduler, error) &#123;</span><br><span class="line">if errs :&#x3D; opts.Validate(); len(errs) &gt; 0 &#123;</span><br><span class="line">return nil, nil, utilerrors.NewAggregate(errs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err :&#x3D; opts.Config()</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取 config 对象</span><br><span class="line">&#x2F;&#x2F; Get the completed config</span><br><span class="line">cc :&#x3D; c.Complete()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化 outOfTreeRegistry, 后续基于 Scheduler Framwork 自定义的 插件注册关联的地方，后续再介绍 Scheduler Framework</span><br><span class="line">outOfTreeRegistry :&#x3D; make(runtime.Registry)</span><br><span class="line">for _, option :&#x3D; range outOfTreeRegistryOptions &#123;</span><br><span class="line">if err :&#x3D; option(outOfTreeRegistry); err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F; 创建事件记录器</span><br><span class="line">recorderFactory :&#x3D; getRecorderFactory(&amp;cc)</span><br><span class="line">    &#x2F;&#x2F; 初始化 scheduler</span><br><span class="line">&#x2F;&#x2F; Create the scheduler.</span><br><span class="line">sched, err :&#x3D; scheduler.New(cc.Client,</span><br><span class="line">cc.InformerFactory,</span><br><span class="line">cc.PodInformer,</span><br><span class="line">recorderFactory,</span><br><span class="line">ctx.Done(),</span><br><span class="line">scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;cc, sched, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>scheduler</code> 初始化完成，初始化结束。</p><ul><li><code>Run</code> 服务运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据提供的名称创建Configz</span><br><span class="line">&#x2F;&#x2F; Configz registration.</span><br><span class="line">if cz, err :&#x3D; configz.New(&quot;componentconfig&quot;); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">cz.Set(cc.ComponentConfig)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return fmt.Errorf(&quot;unable to register configz: %s&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 事件广播准备</span><br><span class="line">&#x2F;&#x2F; Prepare the event broadcaster.</span><br><span class="line">cc.EventBroadcaster.StartRecordingToSink(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建健康检查数组</span><br><span class="line">&#x2F;&#x2F; Setup healthz checks.</span><br><span class="line">var checks []healthz.HealthChecker</span><br><span class="line">    &#x2F;&#x2F; 判断是否需要进行leader选举</span><br><span class="line">if cc.ComponentConfig.LeaderElection.LeaderElect &#123;</span><br><span class="line">checks &#x3D; append(checks, cc.LeaderElection.WatchDog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 进行健康检查</span><br><span class="line">&#x2F;&#x2F; Start up the healthz server.</span><br><span class="line">if cc.InsecureServing !&#x3D; nil &#123;</span><br><span class="line">separateMetrics :&#x3D; cc.InsecureMetricsServing !&#x3D; nil</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, separateMetrics, checks...), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start healthz server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.InsecureMetricsServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newMetricsHandler(&amp;cc.ComponentConfig), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureMetricsServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start metrics server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.SecureServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, false, checks...), cc.Authentication.Authenticator, cc.Authorization.Authorizer)</span><br><span class="line">&#x2F;&#x2F; TODO: handle stoppedCh returned by c.SecureServing.Serve</span><br><span class="line">if _, err :&#x3D; cc.SecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">&#x2F;&#x2F; fail early for secure handlers, removing the old error loop from above</span><br><span class="line">return fmt.Errorf(&quot;failed to start secure server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 运行所有informer</span><br><span class="line">&#x2F;&#x2F; Start all informers.</span><br><span class="line">go cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">cc.InformerFactory.Start(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在调度前等待缓存同步</span><br><span class="line">&#x2F;&#x2F; Wait for all caches to sync before scheduling.</span><br><span class="line">cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据是否开启选举开关进行选举逻辑</span><br><span class="line">&#x2F;&#x2F; If leader election is enabled, runCommand via LeaderElector until done and exit.</span><br><span class="line">if cc.LeaderElection !&#x3D; nil &#123;</span><br><span class="line">cc.LeaderElection.Callbacks &#x3D; leaderelection.LeaderCallbacks&#123;</span><br><span class="line">OnStartedLeading: sched.Run,</span><br><span class="line">OnStoppedLeading: func() &#123;</span><br><span class="line">klog.Fatalf(&quot;leaderelection lost&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">leaderElector, err :&#x3D; leaderelection.NewLeaderElector(*cc.LeaderElection)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;couldn&#39;t create leader elector: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leaderElector.Run(ctx)</span><br><span class="line"></span><br><span class="line">return fmt.Errorf(&quot;lost lease&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 运行服务</span><br><span class="line">&#x2F;&#x2F; Leader election is disabled, so runCommand inline until done.</span><br><span class="line">sched.Run(ctx)</span><br><span class="line">return fmt.Errorf(&quot;finished without leader elect&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>kube-scheduler</code> 算是真正意义上的运行了。</p><h2 id="scheduler-初始化及运行流程梳理"><a href="#scheduler-初始化及运行流程梳理" class="headerlink" title="scheduler 初始化及运行流程梳理"></a><code>scheduler</code> 初始化及运行流程梳理</h2><p><img src="http://tva2.sinaimg.cn/wap800/7a56748fly1gph1m7uzsgj21hy11279t.jpg" alt="初始化及运行流程"></p><p><strong>至此<code>kube-scheduler</code>入口启动过程算是结束了，个人理解，如若有不对对方还望多多指教。</strong></p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之kube-scheduler 启动入口分析</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/kube-scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/tags/kube-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>7天用go从零实现系列之web框架Day1</title>
    <link href="http://kiragoo.github.com/2021/04/11/7%E5%A4%A9%E7%94%A8go%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E7%B3%BB%E5%88%97%E4%B9%8Bweb%E6%A1%86%E6%9E%B6Day1/"/>
    <id>http://kiragoo.github.com/2021/04/11/7%E5%A4%A9%E7%94%A8go%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E7%B3%BB%E5%88%97%E4%B9%8Bweb%E6%A1%86%E6%9E%B6Day1/</id>
    <published>2021-04-11T14:27:26.000Z</published>
    <updated>2021-04-11T15:17:30.657Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一些不错的博客系列文章，包括为<a href="http://geektutu.com/">@极客兔兔</a>原创的7天从零系列的文章，此系列文章为个人阅读及个人描述记录。</p><p>其中序言部分主要描述的是一个web框架大概需要实现的内容，此处借鉴了<a href="https://gin-gonic.com/">Gin</a>的设计思想。</p><h1 id="启动Web服务"><a href="#启动Web服务" class="headerlink" title="启动Web服务"></a>启动Web服务</h1><p>使用 <code>net/http</code> 库，封装了http的网络编程的基础的接口。<br><code>d1-http-v1/main.go</code></p><h2 id="v1版本"><a href="#v1版本" class="headerlink" title="v1版本"></a>v1版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 映射路由</span><br><span class="line">http.HandleFunc(&quot;&#x2F;&quot;, indexHandler) </span><br><span class="line">http.HandleFunc(&quot;&#x2F;hello&quot;, helloHandler)</span><br><span class="line">    &#x2F;&#x2F; 启动 web 服务</span><br><span class="line">log.Fatal(http.ListenAndServe(&quot;:9999&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handler echoes r.URL.Path</span><br><span class="line">func indexHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handler echoes r.URL.Header</span><br><span class="line">func helloHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v :&#x3D; range req.Header &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;Header[%q] &#x3D; %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接通过 <code>http.HandleFunc</code> 函数将具体处理函数与路由做好映射关系。</p><p><strong>关键函数分析</strong></p><ul><li><code>http.ListenAndServe</code>:<br>通过传入 <code>addr</code>，<code>handler</code>, <code>addr</code> 为 <code>string</code> 类型，重点再看下 <code>Handler</code> 的定义 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ListenAndServe listens on the TCP network address addr and then calls</span><br><span class="line">&#x2F;&#x2F; Serve with handler to handle requests on incoming connections.</span><br><span class="line">&#x2F;&#x2F; Accepted connections are configured to enable TCP keep-alives.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ListenAndServe always returns a non-nil error.</span><br><span class="line">func ListenAndServe(addr string, handler Handler) error &#123;</span><br><span class="line">server :&#x3D; &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line">return server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Handler</code>:<br>即通过实现 <code>Handler</code> 接口中定义的 <code>    ServeHTTP(ResponseWriter, *Request)</code> 即实现了对 <code>http</code> 请求的处理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; A Handler responds to an HTTP request.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ServeHTTP should write reply headers and data to the ResponseWriter</span><br><span class="line">&#x2F;&#x2F; and then return. Returning signals that the request is finished; it</span><br><span class="line">&#x2F;&#x2F; is not valid to use the ResponseWriter or read from the</span><br><span class="line">&#x2F;&#x2F; Request.Body after or concurrently with the completion of the</span><br><span class="line">&#x2F;&#x2F; ServeHTTP call.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Depending on the HTTP client software, HTTP protocol version, and</span><br><span class="line">&#x2F;&#x2F; any intermediaries between the client and the Go server, it may not</span><br><span class="line">&#x2F;&#x2F; be possible to read from the Request.Body after writing to the</span><br><span class="line">&#x2F;&#x2F; ResponseWriter. Cautious handlers should read the Request.Body</span><br><span class="line">&#x2F;&#x2F; first, and then reply.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Except for reading the body, handlers should not modify the</span><br><span class="line">&#x2F;&#x2F; provided Request.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span><br><span class="line">&#x2F;&#x2F; that the effect of the panic was isolated to the active request.</span><br><span class="line">&#x2F;&#x2F; It recovers the panic, logs a stack trace to the server error log,</span><br><span class="line">&#x2F;&#x2F; and either closes the network connection or sends an HTTP&#x2F;2</span><br><span class="line">&#x2F;&#x2F; RST_STREAM, depending on the HTTP protocol. To abort a handler so</span><br><span class="line">&#x2F;&#x2F; the client sees an interrupted response but the server doesn&#39;t log</span><br><span class="line">&#x2F;&#x2F; an error, panic with the value ErrAbortHandler.</span><br><span class="line">type Handler interface &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以此引申 <code>v2</code> 版本</li></ul><h2 id="v2-版本"><a href="#v2-版本" class="headerlink" title="v2 版本"></a>v2 版本</h2><p>项目结构如下：<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fgy1gpg74zeh17j20qw0bqjs9.jpg" alt="项目结构"></p><p>在项目中引用了本地包的依赖，这里需要对项目中内部模块进行依赖配置:<br>在根目录中的 <code>go.mod</code> 文件进行如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module kgeedemo</span><br><span class="line"></span><br><span class="line">go 1.15</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">kgee v0.0.0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace (</span><br><span class="line">kgee &#x3D;&gt; .&#x2F;kgee</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p><code>main.go</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;kgee&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化-&gt; 路由映射缓存 -&gt; 启动服务</span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化 kgee，类似于门面模式，将需要处理的工作在函数内部处理了。</span><br><span class="line">r :&#x3D; kgee.New()</span><br><span class="line">    &#x2F;&#x2F; args[1] 参数为 函数</span><br><span class="line">r.GET(&quot;&#x2F;&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">_, _ &#x3D; fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(&quot;&#x2F;hello&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v :&#x3D; range req.Header &#123;</span><br><span class="line">_, _ &#x3D; fmt.Fprintf(w, &quot;Header[%q] &#x3D; %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#x2F;&#x2F; 服务器运行</span><br><span class="line">_ &#x3D; r.Run(&quot;:9999&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>kgee.go</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package kgee</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;HandlerFunc defines the reques handler used by kgee</span><br><span class="line">type HandlerFunc func(w http.ResponseWriter, req *http.Request)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Engin implement the interface of ServeHTTP</span><br><span class="line">type Engine struct &#123;</span><br><span class="line">router map[string]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;New is the constructor of kgee.Engine</span><br><span class="line">func New() *Engine &#123;</span><br><span class="line">return &amp;Engine&#123;router: make(map[string]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) &#123;</span><br><span class="line">key :&#x3D; method + &quot;-&quot; + pattern</span><br><span class="line">engine.router[key] &#x3D; handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engin *Engine) GET(pattern string, handler HandlerFunc) &#123;</span><br><span class="line">engin.addRoute(&quot;GET&quot;, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) POST(pattern string, hander HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(&quot;POST&quot;, pattern, hander)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 完成 ServeHttp 函数</span><br><span class="line">func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key :&#x3D; req.Method + &quot;-&quot; + req.URL.Path</span><br><span class="line">if handler, ok :&#x3D; engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(w, &quot;404 NOT FOUND:%s\n&quot;, req.URL)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) Run(addr string) (err error) &#123;</span><br><span class="line">return http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个简单示例即完成，如下我们可以验证下。</p></li></ul><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>这里我 <code>Goland</code> 中集成了 <code>RestConsole</code> 插件，直接用这个插件进行测试。测试结果如下：</p><ul><li>请求 <code>/</code> 对应的路由结果如下:<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpg7imm6xbj20nm0gewgk.jpg" alt="r1"></li><li>请求 <code>/hello</code> 对应的路由结果如下:<br><img src="http://tvax4.sinaimg.cn/wap800/7a56748fgy1gpg7jvm0fvj20o40igjtw.jpg" alt="r2"></li></ul><p><em>参考链接</em>:</p><p><a href="https://geektutu.com/post/gee-day1.html">https://geektutu.com/post/gee-day1.html</a></p><p><em>本文代码</em>:</p><p><a href="https://github.com/kiragoo/kgee/tree/day1">https://github.com/kiragoo/kgee/tree/day1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看到一些不错的博客系列文章，包括为&lt;a href=&quot;http://geektutu.com/&quot;&gt;@极客兔兔&lt;/a&gt;原创的7天从零系列的文章，此系列文章为个人阅读及个人描述记录。&lt;/p&gt;
&lt;p&gt;其中序言部分主要描述的是一个web框架大概需要实现的内容，此处借鉴了&lt;a hr</summary>
      
    
    
    
    <category term="golang" scheme="http://kiragoo.github.com/categories/golang/"/>
    
    
    <category term="golang" scheme="http://kiragoo.github.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Mac之搭建本地k8s开发环境</title>
    <link href="http://kiragoo.github.com/2021/04/11/Mac%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0k8s%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://kiragoo.github.com/2021/04/11/Mac%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0k8s%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2021-04-11T01:50:53.000Z</published>
    <updated>2021-04-11T02:07:47.521Z</updated>
    
    <content type="html"><![CDATA[<p>Mac搭建本地k8s环境目前网上有N多的博客文章，无非就是minikube、docker-desktop、kubeadm去部署，对于我个人需求，由于后期需要对原生的 scheduler 进行自定义的扩展开发，我需要能够有机会改动静态POD的manifests文件进行改动与配置。</p><p>前期通过 minikube 及 docker-desktop 进行过本地k8s集群的部署，但是发现此种沙盒环境无法对静态POD进行配置改动，只能围着k8s做周边的应用测试，没法满足我的需求，最后决定通过kubeadm进行k8s本地环境部署。</p><p>所以最终选择： Virtualbox + Centos7 镜像进行单节点k8s部署【此环境只做组件部署及逻辑验证】</p><h1 id="VirutalBox安装及Centos-虚拟机安装"><a href="#VirutalBox安装及Centos-虚拟机安装" class="headerlink" title="VirutalBox安装及Centos 虚拟机安装"></a>VirutalBox安装及Centos 虚拟机安装</h1><p>具体的介绍就不多介绍了，我选用的为 6.1.4 没有选用最新的版本，主要是担心出了问题可能没有最新及时的资料可以参考。</p><p>如何创建虚机就不多介绍了，但是以下注意点需要注意：</p><ul><li>虚机CPU至少分配2核</li><li>虚机网络连接选择为bridge，之前选择的Nat模式无法获取本地ip，虽然能通外网。 此现象比较诡异</li></ul><h1 id="Kubeadm-安装及K8s集群初始化"><a href="#Kubeadm-安装及K8s集群初始化" class="headerlink" title="Kubeadm 安装及K8s集群初始化"></a>Kubeadm 安装及K8s集群初始化</h1><p>由于此次的工作只是作为本地开发测试环境，不作为生产环境的部署方案，所以在这里我只是通过yum 安装，不过对于无网的生产环境部署，实际上也可以通过制作本地yum源来部署，这里就不做扩展讨论了。</p><h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><p><code>yum upgrade -y</code></p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h2 id="更改Selinux配置"><a href="#更改Selinux配置" class="headerlink" title="更改Selinux配置"></a>更改Selinux配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 &#x2F;&#x2F;临时改动</span><br><span class="line">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config &#x2F;&#x2F;写入配置永久改动</span><br></pre></td></tr></table></figure><h2 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sysctl -w vm.swappiness&#x3D;0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 到 &#x2F;etc&#x2F;fstab 中将 涉及到 swap 的配置进行注释</span><br></pre></td></tr></table></figure><h2 id="网桥参数配置"><a href="#网桥参数配置" class="headerlink" title="网桥参数配置"></a>网桥参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h2 id="安装-socat"><a href="#安装-socat" class="headerlink" title="安装 socat"></a>安装 socat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install socat -y</span><br></pre></td></tr></table></figure><h2 id="安装-docker-并启动-docker-daemon-服务"><a href="#安装-docker-并启动-docker-daemon-服务" class="headerlink" title="安装 docker 并启动 docker daemon 服务"></a>安装 docker 并启动 docker daemon 服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="配置-kubernetes-的国内yum源"><a href="#配置-kubernetes-的国内yum源" class="headerlink" title="配置 kubernetes 的国内yum源"></a>配置 kubernetes 的国内yum源</h2><p>这里配置的是阿里 yum 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vcat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装-kubelet、kubectl、kubeadm"><a href="#安装-kubelet、kubectl、kubeadm" class="headerlink" title="安装 kubelet、kubectl、kubeadm"></a>安装 kubelet、kubectl、kubeadm</h2><p>由于后续工作是对k8s版本有指定要求的，所以在部署的时候我需要安装指定的k8s 版本组件，可以通过如下命令进行yum list 查看可安装版本<br>yum list kubelet kubeadm kubectl –showduplicates|sort -r<br>安装组件指定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet-1.19.8-0 kubeadm-1.19.8-0 kubectl-1.19.8-0</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p>这个时候我们查看 kubelet 的服务没有正常启动，这个是正常的，因为它会关联 kubeadm.conf 这个配置文件，此时我们还没有用kubeadm进行集群的初始化。所以这个反应是正常的。</p><h2 id="通过kubeadm初始化k8s集群"><a href="#通过kubeadm初始化k8s集群" class="headerlink" title="通过kubeadm初始化k8s集群"></a>通过kubeadm初始化k8s集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version&#x3D;1.19.8 --image-repository&#x3D;registry.aliyuncs.com&#x2F;google_containers --pod-network-cidr&#x3D;192.168.0.0&#x2F;16</span><br></pre></td></tr></table></figure><h2 id="根据OutPut生成对应的配置文件"><a href="#根据OutPut生成对应的配置文件" class="headerlink" title="根据OutPut生成对应的配置文件"></a>根据OutPut生成对应的配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h2 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h2><p>由于到了这边我们没有安装网络插件，此时集群的节点状态是NotReady，为了方便后续的维护，我是将 calico.yaml 下载下来放到指定目录方便后续维护的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSLO https:&#x2F;&#x2F;ms-source.oss-cn-shanghai.aliyuncs.com&#x2F;calico&#x2F;yaml&#x2F;calico-v3.17.0.yaml</span><br></pre></td></tr></table></figure><h2 id="部署Calico组件"><a href="#部署Calico组件" class="headerlink" title="部署Calico组件"></a>部署Calico组件</h2><p><code>kubectl create -f calico-v3.17.0.yaml</code><br>此步骤结束之后算是k8s集群部署工作算是完成了，但是由于我这边只是一个master节点，kubeadm默认是做了 Taint的污点策略，此时的节点是不可调度的，通过产看pod状态，会出现如下现象：<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpfktg2dmoj20p105f0u6.jpg" alt="pod-pending状态"></p><p>具体原因可以通过如下操作进行查明:<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpfkue7d78j20y50ldtdd.jpg" alt="reason"></p><p>解决使用的命令如下：<br><code>kubectl taint nodes --all node-role.kubernetes.io/master-</code><br>此时再继续查看pod的状态，可以发现是正常的了。<br><img src="http://tva1.sinaimg.cn/wap800/7a56748fgy1gpfkvfgpygj20tj05fmyn.jpg" alt="pods"></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>将在期望状态的虚机导一份镜像出来，方便后续使用</li><li>virtualbox 中的虚机个人喜欢无界面启动，此操作可以通过 控制台或者命令行形式进行操作。</li></ul>]]></content>
    
    
    <summary type="html">mac 搭建本地 k8s 开发环境</summary>
    
    
    
    <category term="k8s" scheme="http://kiragoo.github.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://kiragoo.github.com/tags/k8s/"/>
    
    <category term="kubeadm" scheme="http://kiragoo.github.com/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之丑数</title>
    <link href="http://kiragoo.github.com/2021/04/10/leetcode%E4%B9%8B%E4%B8%91%E6%95%B0/"/>
    <id>http://kiragoo.github.com/2021/04/10/leetcode%E4%B9%8B%E4%B8%91%E6%95%B0/</id>
    <published>2021-04-10T14:51:46.000Z</published>
    <updated>2021-04-11T01:44:39.241Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：<br>给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回 false 。</p><p>丑数 就是只包含质因数 2、3 和/或 5 的正整数。<br><img src="http://tvax3.sinaimg.cn/large/7a56748fgy1gpf33mppc3j210q124q6n.jpg" alt="描述"></p><p><a href="https://leetcode-cn.com/problems/ugly-number">链接</a></p><h1 id="leetcode每日一题之丑数"><a href="#leetcode每日一题之丑数" class="headerlink" title="leetcode每日一题之丑数"></a>leetcode每日一题之丑数</h1><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isUgly(int num) &#123;</span><br><span class="line">        if(num &#x3D;&#x3D; 0) return false;</span><br><span class="line">        while(num !&#x3D; 1)&#123;</span><br><span class="line">            if(num%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;2;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(num%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;3;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(num%5&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;5;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Go</span><br><span class="line">func isUgly(num int) bool&#123;</span><br><span class="line">if num &#x3D;&#x3D; 0 &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">for&#123;</span><br><span class="line">if num &#x3D;&#x3D; 1 &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">if num % 2 &#x3D;&#x3D; 0 &#123;</span><br><span class="line">num&#x2F;&#x3D;2</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if num % 3 &#x3D;&#x3D; 0&#123;</span><br><span class="line">num&#x2F;&#x3D;3</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if num % 5 &#x3D;&#x3D; 0 &#123;</span><br><span class="line">num&#x2F;&#x3D;5</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">leetcode 每日一题</summary>
    
    
    
    <category term="编程" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
    <category term="算法" scheme="http://kiragoo.github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/tags/leetcode/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kiragoo.github.com/2021/04/10/hello-world/"/>
    <id>http://kiragoo.github.com/2021/04/10/hello-world/</id>
    <published>2021-04-10T13:23:43.398Z</published>
    <updated>2021-04-10T13:23:43.398Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
