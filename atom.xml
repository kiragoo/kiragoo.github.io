<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kirago杂谈</title>
  
  
  <link href="http://kiragoo.github.com/atom.xml" rel="self"/>
  
  <link href="http://kiragoo.github.com/"/>
  <updated>2021-05-03T09:47:36.013Z</updated>
  <id>http://kiragoo.github.com/</id>
  
  <author>
    <name>kirago</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud 系列之负载均衡（四）</title>
    <link href="http://kiragoo.github.com/archives/c41b2749.html"/>
    <id>http://kiragoo.github.com/archives/c41b2749.html</id>
    <published>2021-05-03T09:36:58.000Z</published>
    <updated>2021-05-03T09:47:36.013Z</updated>
    
    <content type="html"><![CDATA[<p>通过前几篇章节，初步认识了通过 <code>RestTemplate</code> 调用微服务拆分的服务的 <code>rest</code> 请求，进一步引入了通过 <code>Eureka</code> 来实现服务注册于发现（此部分的拓展内容其实还有很多，牵扯到自定义元数据及 <code>Eureka</code> 的自我保护等）。</p><p>那么问题来了，在实际的场景中我们会遇到很多服务端其实是存在多个副本以实现高可用，那么客户端的请求是如何做分发控制的呢？当然，朋友你肯定第一个想到的是老毛子搞的 <code>nginx</code>。Nice！！nginx 确实很强大，基于 nginx 我们能做很多事情【后续我也会对 nginx 做进一步的分享：）】。在 <code>Spring Cloud</code> 生态圈，其实大佬们早已准备好了开箱即用的组件，就是今天的主角：**<code>Riboon</code>**。</p><hr><h1 id="Eureka-与-Ribbon-配合的架构图"><a href="#Eureka-与-Ribbon-配合的架构图" class="headerlink" title="Eureka 与 Ribbon 配合的架构图"></a><code>Eureka</code> 与 <code>Ribbon</code> 配合的架构图</h1><p><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc4-1.jpeg" alt="sc4-1"></p><h1 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h1><h2 id="microservice-consumer-movie-ribbon"><a href="#microservice-consumer-movie-ribbon" class="headerlink" title="microservice-consumer-movie-ribbon"></a><code>microservice-consumer-movie-ribbon</code></h2><p>将之前的 <code>microservice-consumedr-movie</code> 整合 <code>Ribbon</code> 改造下。</p><ul><li><code>pom</code> 文件<br>由于此微服务还是 <code>Eureka</code> 的 <code>Client</code> 端，所以依赖中还是会存在 <code>eureka client</code> 的依赖，同时加入新的依赖 <code>netflix-ribbon</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.kirago.sc&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;microserver-consumer-movie-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;microserver-consumer-movie-ribbon&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;microserver-consumer-movie-ribbon project for Spring cloud&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR1&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li>为 <code>RestTemplate</code> 添加 <code>@LoadBalanced</code> 的注解进行声明。<br>此部分我是通过 <code>@Configuration</code> 注解 后加入 <code>@Bean</code> 注解，来告知应用生成这个 <code>Bean</code>。<br>此处有个知识点，可以拓展下 <code>@Configuration</code> 的具体作用：</li></ul><ol><li>在实际的项目开发中，我引用的类可能不在当前包中那么如何处理？</li><li>还有我们很多时候会发现一个类被 @Configuration 注解了实际上类的内部为空，那么这个 @Configuration 存在的意思是啥，为啥需要它？<br>以上都是需要掌握的。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microserverconsumermovieribbon.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class RestTemplateCompoment &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate restTemplate()&#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务生产者"><a href="#服务生产者" class="headerlink" title="服务生产者"></a>服务生产者</h1><h2 id="microservice-priovider-user-ribbon"><a href="#microservice-priovider-user-ribbon" class="headerlink" title="microservice-priovider-user-ribbon"></a>microservice-priovider-user-ribbon</h2><p>在完善此 <code>demo</code> 的时候由于是单机本地环境，所以我们需要通过对同一个应用启动应用多个端口来来实现生成多个实例来模拟多节点多副本的场景，我是通过 <code>IDEA</code> 中采用配置去实现的。<br>具体的实现方式参考 <a href="https://blog.csdn.net/dyr_1203/article/details/84876380">csdn 上的一篇文章</a>，亲测有效。<br><em>此篇 服务消费者没啥改动，所以我就不贴示例代码了。</em></p><h1 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h1><h2 id="microservice-discovery-eureka"><a href="#microservice-discovery-eureka" class="headerlink" title="microservice-discovery-eureka"></a><code>microservice-discovery-eureka</code></h2><p><em>此服务也未作任何变动，所以此部分就不重复了。：）</em></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>启动 <code>microservice-discovery-eureka</code>、<code>microservice-consumer-movie-ribbon</code>、<code>microservice-discovery-eureka</code>（我设置的副本数为2），成功运行的情况下去浏览 <code>Eureka</code> 服务的监控页面，会看到如下内容：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc4-2.png" alt="sc4-2"><br>我们会发现服务生产者副本数为2，说明多副本服务创建成功了。</p><blockquote><p>各位老铁应该注意到我特意标注了 A 点，这里就卖个关子，作为自己拓展思考，此处为啥会有红色字体的 Warnninng，以及这种展示是否是可控的，如果是可控的要做什么配置修改？：）<br>下面我们可以发送请求进一步验证下</p></blockquote><ul><li>对服务生产者直接请求：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc4-3.png" alt="sc4-3"><br>此处我故意请求的是我创建的服务生产者多副本实例2，验证下服务确实可用。</li><li>对服务消费者发送请求：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc4-4.png" alt="sc4-4"><br>由此验证最终结果是保持一致的。</li><li>通过后台日志我们其实可以发现最终的请求最终落在那个服务生产者示例上：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc4-5.png" alt="sc4-5"><br>此次通过服务消费者消费的服务是落在服务生产者多副本的实例1上。</li></ul><blockquote><p>多啰嗦几句<br>此偏章节为 Eureka 结合 Ribbon 实现负载均衡，在实际的生产项目中，我们的服务器会处理性能不一致，遵循“能者多劳”的原则，我们可能要适当的对负载分发有一定的可控机制，或者由于目前容器技术 docker 的新起，一台服务器我们会尽量的压榨资源，那么在部署架构上我们已经有了规划，那么对负载分发也要有一定的可控机制去实现，这些在实际的生产过程中我认为都是需要考虑的。<br><a href="https://github.com/Tonyzhangl/spring-cloud-demo/tree/master/chapter3">示例代码链接</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过前几篇章节，初步认识了通过 &lt;code&gt;RestTemplate&lt;/code&gt; 调用微服务拆分的服务的 &lt;code&gt;rest&lt;/code&gt; 请求，进一步引入了通过 &lt;code&gt;Eureka&lt;/code&gt; 来实现服务注册于发现（此部分的拓展内容其实还有很多，牵扯到自定义元</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/categories/spring-cloud/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/categories/spring-cloud/java/"/>
    
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 系列之服务注册与发现（三）</title>
    <link href="http://kiragoo.github.com/archives/a1a3f20a.html"/>
    <id>http://kiragoo.github.com/archives/a1a3f20a.html</id>
    <published>2021-05-03T09:32:01.000Z</published>
    <updated>2021-05-03T09:36:22.853Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于上篇内容提出的思考拓展部分，此部门其实就是做了 application.yaml 的配置文件的更改。此篇的 Demo 通过单节点多端口来模拟多节点分布的 Eureka Server HA 集群。由于篇幅比较简单，我就直接将 microservice-discovery-eureka 做了 yaml 配置文件更改最终输出为 microservice-discovery-eureka-ha 的模块，就暂且不实现生产者服务和消费者服务了。</p><hr><h1 id="Eureka-Server-HA"><a href="#Eureka-Server-HA" class="headerlink" title="Eureka Server HA"></a><code>Eureka Server HA</code></h1><h2 id="microservice-discovery-eureka-ha"><a href="#microservice-discovery-eureka-ha" class="headerlink" title="microservice-discovery-eureka-ha"></a><code>microservice-discovery-eureka-ha</code></h2><ul><li><p><code>application.yaml</code> 文件如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microserver-discovery-eureka-ha</span><br><span class="line">#eureka:</span><br><span class="line">#  client:</span><br><span class="line">#    service-url:</span><br><span class="line">#      defaultZone: http:&#x2F;&#x2F;peer1:8001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;peer2:8002&#x2F;eureka&#x2F;</span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer1</span><br><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer1</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;peer2:8002&#x2F;eureka&#x2F;</span><br><span class="line">#    fetch-registry: true</span><br><span class="line">#    register-with-eureka: true</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">spring:</span><br><span class="line">  profiles: peer2</span><br><span class="line">server:</span><br><span class="line">  port: 8002</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: peer2</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;peer1:8001&#x2F;eureka&#x2F;</span><br><span class="line">#    fetch-registry: true</span><br><span class="line">#    register-with-eureka: true</span><br></pre></td></tr></table></figure></li><li><p>配置本地 <code>hosts</code> 文件：</p></li><li><p><em>由于是本地单节点模拟，为了能够解析到 domain 需要加如下配置</em>*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 peer1</span><br><span class="line"></span><br><span class="line">127.0.0.1 peer2</span><br></pre></td></tr></table></figure></li><li><p> 通过 <code>package</code> 打成 <code>jar</code> 包运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar microservice-discovery-eureka-ha&#x2F;target&#x2F;microservice-discovery-eureka-ha-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;peer1</span><br><span class="line">java -jar microservice-discovery-eureka-ha&#x2F;target&#x2F;microservice-discovery-eureka-ha-0.0.1-SNAPSHOT.jar --spring.profiles.active&#x3D;peer2</span><br></pre></td></tr></table></figure></li><li><p>验证<br>成功运行后会嗨皮发现最终页面如下：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc3-1.png" alt="sc3-1"><br>当然这是我在浏览器输入 <a href="http://peer1:8001/">http://peer1:8001</a> 得到的输出,然后我们可以通过启动上篇的生产者服务和消费者服务，然后将其中的一个 Eureka Server 宕掉，发现服务还是可用的，即完成了验证。</p></li></ul><blockquote><p><a href="https://github.com/Tonyzhangl/spring-cloud-demo/tree/master/chapter2-2">示例代码链接</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鉴于上篇内容提出的思考拓展部分，此部门其实就是做了 application.yaml 的配置文件的更改。此篇的 Demo 通过单节点多端口来模拟多节点分布的 Eureka Server HA 集群。由于篇幅比较简单，我就直接将 microservice-discovery-</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/categories/spring-cloud/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/categories/spring-cloud/java/"/>
    
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud系列之服务注册与发现（二）</title>
    <link href="http://kiragoo.github.com/archives/68bcbff6.html"/>
    <id>http://kiragoo.github.com/archives/68bcbff6.html</id>
    <published>2021-05-03T09:18:26.000Z</published>
    <updated>2021-05-03T09:30:06.522Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于<a href="https://kiragoo.github.io/archives/1985234d.html">上篇初识（一）</a>引入如下思考：<br>如果每个组件的服务分布在不同的节点，那么通过每次的硬编码去实现域名（服务识别）解析是多么痛苦的一件事，况且还没有涉及到服务的主动发现。这个时候我们急需引用一种方案来解决此问题，那么此阶段我将引入 EureKa 的应用。而在 Dubbo 体系中是通过 Zookeeper 集群来实现服务注册与发现的，后续有机会将会对 Dubbo 做学习与分析。</p><h1 id="Eureka-架构"><a href="#Eureka-架构" class="headerlink" title="Eureka 架构"></a>Eureka 架构</h1><p><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc2-1.png" alt="sc2-1"><br>通过架构图我们会发现实际上 Eureka 包含两个组件：Eureka Server 和 Eureka Client，它们的作用如下：</p><ul><li>Eureka Server 提供服务发现的能力（这种能力个人理解是被动的），即各个微服务启动的时候会主动向 Server 注册自己的信息（例如IP、端口、微服务名称等）</li><li>Eureka Client 则是一个客户端，与 Eureka Server 进行交互</li><li>微服务启动后会周期性的（默认为30s）向 Server 端发送心跳，以证明自己是存活状态，以此“续约”租期</li><li>如果 Server 端在一定时间内未接收到某个微服务发送的心跳，则 Server 会注销该实例（默认为90s）。【拓展：没有收到心跳可能有多种原因引起的，在业务上可能由于网络抖动或者瞬时高峰引起的问题，面对这种现象实际上在架构时就应该考虑，后面我会做进一步的学习分享。】</li><li>默认情况下，Eureka Server 同时也是 Eureka Client，当时这是配置可控的。多个 Eureka Server 实例之间会通过复制来实现服务注册表中的数据同步。</li><li>Eureka Client 会缓存服务注册表中的信息。这样有利于减轻对 Server 端的压力，而且即使短暂的 Server 端宕掉或者出现问题，Client 也可以通过缓存数据完成调用。</li></ul><p>以下我会根据系列（一）的文章进行拓展，在原来的基础上进行拓展，整体工程组织如下图：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc2-2.png" alt="sc2-2"><br>比系列文章(一)多了 Server 服务。</p><h1 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h1><h2 id="microservice-discover-eureka"><a href="#microservice-discover-eureka" class="headerlink" title="microservice-discover-eureka"></a>microservice-discover-eureka</h2><ul><li><code>pom</code>文件如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.kirago.sc&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;microservice-discovery-eureka&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;microservice-discovery-eureka&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;microservice-discovery-eureka project for Spring cloud&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR1&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;scope&gt;test&lt;&#x2F;scope&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li>启动类通过注解 @EnableEurekaServer 声明为此应用为 Eureka Server<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microservicediscoveryeureka;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class MicroserviceDiscoveryEurekaApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MicroserviceDiscoveryEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>application.yaml 配置文件如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false    #标识是否将自己注册到 Eureka Server 中，默认为 true。</span><br><span class="line">    fetch-registry: false    #表示是否从 Eureka Server 获取注册信息，默认为 true，由于此 demo 为单点 Server，不需要同步其他的 Server，故配置为 false</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8000&#x2F;eureka&#x2F;    #设置与 Eureka Server 交互的地址，默认端口为 8761，这里先卖个关子，就是某些配置问题或者再导入已有项目的时候尤其是如 IDEA 这种工具如果配置没做好的话就会引用默认端口，而没法示例化自己配置的端口，反正我是遇到。</span><br></pre></td></tr></table></figure>这样 Eureka Server 就算是配置好了，如果运行没有问题，我们会嗨皮的发现如下的页面：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc2-3.png" alt="sc2-3"><br>这个时候我们下一步需要做的就是将 Eureka Client 注册到 Eureka Client 中了，话不多说，直接撸起来。</li></ul><h1 id="服务提供者微服务"><a href="#服务提供者微服务" class="headerlink" title="服务提供者微服务"></a>服务提供者微服务</h1><h2 id="microservice-provider-user"><a href="#microservice-provider-user" class="headerlink" title="microservice-provider-user"></a>microservice-provider-user</h2><ul><li><code>pom</code>文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.kirago.sc&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;microservice-provider-user&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;microservice-provider-user&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;microservice-provider-user project for Spring cloud&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">        &lt;spring-cloud.version&gt;Greenwich.SR1&lt;&#x2F;spring-cloud.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure></li><li><code>application.yaml</code> 文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: microservice-provider-user    #用于指定注册到 Eureka Server 上的应用名称</span><br><span class="line"></span><br><span class="line">  jpa:</span><br><span class="line">    generate-ddl: false</span><br><span class="line">    show-sql: true</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line"></span><br><span class="line">  datasource:</span><br><span class="line">    platform: h2</span><br><span class="line">    schema: classpath:sql&#x2F;schema.sql</span><br><span class="line">    data: classpath:sql&#x2F;data.sql</span><br><span class="line">    url: jdbc:h2:mem:dbtest</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: org.h2.Driver</span><br><span class="line">  h2:</span><br><span class="line">    console:</span><br><span class="line">      settings:</span><br><span class="line">        web-allow-others: true</span><br><span class="line">      path: &#x2F;h2</span><br><span class="line">      enabled: true</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    root: INFO</span><br><span class="line">    org.hibernate: INFO</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:&#x2F;&#x2F;localhost:8000&#x2F;eureka&#x2F;</span><br><span class="line">  instance:</span><br><span class="line">    perfer-ip-address: true    #表示将自己的 IP 注册到 Eureka Server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8001</span><br></pre></td></tr></table></figure></li><li>编写启动类：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microserviceprovideruser;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class MicroserviceProviderUserApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(MicroserviceProviderUserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务消费者微服务"><a href="#服务消费者微服务" class="headerlink" title="服务消费者微服务"></a>服务消费者微服务</h1><h2 id="microservice-consumer-movie"><a href="#microservice-consumer-movie" class="headerlink" title="microservice-consumer-movie"></a>microservice-consumer-movie</h2>同理我们也需将服务消费者注册到 Eureka Server 中。具体实现就不写了，后面我会在文章的末尾处附上本人 github 上的代码链接。由于是 demo ，在其中 controller 层中，我就直接做了硬编码处理。<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc2-4.png" alt="sc2-4"></li><li>单独测试 <code>microservice-provider-user</code> 微服务接口如下：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc2-5.png" alt="sc2-5"></li><li>通过 <code>microservice-consumer-movie</code> 微服务接口如下：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc2-6.png" alt="sc2-6"></li></ul><hr><p>在这里留个思考题，就是上面有解释到 Eureka Server 其实是可以做多副本高可用的，那么可以拓展了解下如何去做配置，还有一般来说 Eureka 在实际的场景中也是需要通过用户认证访问，这些其实在前期都是需要考虑的，有兴趣的可以拓展了解下</p><blockquote><p><a href="https://github.com/Tonyzhangl/spring-cloud-demo/tree/master/chapter2">示例代码链接</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;鉴于&lt;a href=&quot;https://kiragoo.github.io/archives/1985234d.html&quot;&gt;上篇初识（一）&lt;/a&gt;引入如下思考：&lt;br&gt;如果每个组件的服务分布在不同的节点，那么通过每次的硬编码去实现域名（服务识别）解析是多么痛苦的一件事，况且还</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/categories/spring-cloud/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/categories/spring-cloud/java/"/>
    
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud系列之初识(一)</title>
    <link href="http://kiragoo.github.com/archives/1985234d.html"/>
    <id>http://kiragoo.github.com/archives/1985234d.html</id>
    <published>2021-05-03T03:16:28.000Z</published>
    <updated>2021-05-03T03:26:15.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>由于是开篇，先撇开springcloud的各种核心组件，来个demo 简单的认知下。话不多说直接开撸。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>简单场景如下图</p><p><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc1-1.png" alt="sc1-1"></p><h1 id="编写服务提供者"><a href="#编写服务提供者" class="headerlink" title="编写服务提供者"></a>编写服务提供者</h1><h2 id="microservice-simple-provider-user"><a href="#microservice-simple-provider-user" class="headerlink" title="microservice-simple-provider-user"></a>microservice-simple-provider-user</h2><ul><li>引入pom依赖文件如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.kirago.sc&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;microservice-simple-provider-user&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;name&gt;microservice-simple-provider-user&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;microservice-simple-provider-user project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;scope&gt;runtime&lt;&#x2F;scope&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.h2database&#x2F;h2 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.4.197&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>数据库访问采用内嵌数据库H2来做 demo 的持久化结合JPA来搞。</li><li>服务提供者的yaml文件配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">spring:</span><br><span class="line">  jpa:</span><br><span class="line">    generate-ddl: false</span><br><span class="line">    show-sql: true</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br><span class="line"></span><br><span class="line">  datasource:</span><br><span class="line">    platform: h2</span><br><span class="line">    schema: classpath:sql&#x2F;schema.sql #数据scchema sql</span><br><span class="line">    data: classpath:sql&#x2F;data.sql #数据初始化sql</span><br><span class="line">    url: jdbc:h2:mem:dbtest</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: org.h2.Driver</span><br><span class="line">  h2:</span><br><span class="line">    console:</span><br><span class="line">      settings:</span><br><span class="line">        web-allow-others: true #开启web页面端</span><br><span class="line">      path: &#x2F;h2 #uri路径</span><br><span class="line">      enabled: true #开启远端访问</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    root: INFO</span><br><span class="line">    org.hibernate: INFO</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicBinder: TRACE</span><br><span class="line">    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE </span><br></pre></td></tr></table></figure></li><li>schema sql 如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drop table user if exists;</span><br><span class="line">create table user (</span><br><span class="line">    id bigint generated by default as identity,</span><br><span class="line">    username varchar(48),</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int(3),</span><br><span class="line">    balance decimal(10,2),</span><br><span class="line">    primary key (id));</span><br></pre></td></tr></table></figure></li><li>data.sql如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into user (id, username, name, age, balance) values (1, &#39;account1&#39;, &#39;张三&#39;, 20, 100.00);</span><br><span class="line">insert into user (id, username, name, age, balance) values (2, &#39;account2&#39;, &#39;李四&#39;, 21, 101.00);</span><br><span class="line">insert into user (id, username, name, age, balance) values (3, &#39;account3&#39;, &#39;王五&#39;, 22, 111.00);</span><br></pre></td></tr></table></figure></li><li>登录H2内存服务器结果显示如下：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc1-2.png" alt="sc1-2"></li><li>controller层如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microservicesimpleprovideruser.controller;</span><br><span class="line"></span><br><span class="line">import com.kirago.sc.microservicesimpleprovideruser.entity.User;</span><br><span class="line">import com.kirago.sc.microservicesimpleprovideruser.repository.UserRepository;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import java.util.Optional;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public User findById(@PathVariable Long id)&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;User&gt; user &#x3D; userRepository.findById(id);</span><br><span class="line">        return user.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实体类如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microservicesimpleprovideruser.entity;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Data</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.AUTO)</span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line">    @Column</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @Column</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @Column</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    @Column</span><br><span class="line">    private BigDecimal balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Dao层：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microservicesimpleprovideruser.repository;</span><br><span class="line"></span><br><span class="line">import com.kirago.sc.microservicesimpleprovideruser.entity.User;</span><br><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过postman 发送请求测试验证如下：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc1-3.png" alt="sc1-3"><h1 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h1><h2 id="microservice-simple-consumer-movie"><a href="#microservice-simple-consumer-movie" class="headerlink" title="microservice-simple-consumer-movie"></a>microservice-simple-consumer-movie</h2>由于此部分内容比较简单就是构建好消费者需要获取的用户，直接构建了一个POJO，然后通过RestTemplate去请求服务提供者。</li></ul><p>重点注意的就是 controller 层中的用法而已，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.kirago.sc.microservicesimpleconsumermovie.controller;</span><br><span class="line"></span><br><span class="line">import com.kirago.sc.microservicesimpleconsumermovie.entity.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class MovieController &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;user.userServiceUrl&#125;&quot;)</span><br><span class="line">    private String userServiceUrl;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;user&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public User findById(@PathVariable Long id)&#123;</span><br><span class="line">        return restTemplate.getForObject(userServiceUrl + id, User.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此 demo 为了避免 userServiceUrl 的硬编码，通过 @Value 注解获取 yaml 配置文件的环境变量实现。</p><ul><li>消费者 yaml 配置如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user:</span><br><span class="line">  userServiceUrl: http:&#x2F;&#x2F;localhost:8000&#x2F;</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8001</span><br></pre></td></tr></table></figure></li><li> 通过 postman 发送请求验证如下：<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/sc1-4.png" alt="sc1-4"><br><a href="https://github.com/Tonyzhangl/spring-cloud-demo/tree/master/chapter1">示例代码链接</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识&quot;&gt;&lt;a href=&quot;#初识&quot; class=&quot;headerlink&quot; title=&quot;初识&quot;&gt;&lt;/a&gt;初识&lt;/h1&gt;&lt;p&gt;由于是开篇，先撇开springcloud的各种核心组件，来个demo 简单的认知下。话不多说直接开撸。&lt;/p&gt;
&lt;h1 id=&quot;场景&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/categories/spring-cloud/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/categories/spring-cloud/java/"/>
    
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
    <category term="spring cloud" scheme="http://kiragoo.github.com/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes跨namespace资源借用及资源归还控制</title>
    <link href="http://kiragoo.github.com/archives/f656d80b.html"/>
    <id>http://kiragoo.github.com/archives/f656d80b.html</id>
    <published>2021-04-30T06:54:16.000Z</published>
    <updated>2021-04-30T10:25:32.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h1><p> 在多租户的场景下，提供一种跨<code>namespace</code>的资源“借用”途径，在资源池建设之后进一步提升资源的利用率。在还资源过程中，期望能够控制对原来跨<code>ns</code>借用资源的应用进行“延迟”释放，控制驱逐<code>Pod</code>的顺序，保障原来优先级较高的应用不会被优先处理。</p><h2 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h2><p>应用类别分为 训练任务和在线任务。<br>训练任务一般采用分布式训练，但是其<code>Pod</code>副本数是可以适当弹性浮动的，即比如副本数为<code>3~6</code>之间都可以接受。在线服务可以理解为服务可能在用户开通之后就一直存在，客观情况下除非用户主动删除在线服务，否则在资源满足的情况下不会主动释放其占用的服务。简单描述即当资源可能不够的情况下，在需要自动释放资源的时候，在线服务是 <strong>“延迟”</strong> 释放资源，优先对那些训练任务“动手”。</p><ul><li>用户A配置了 {<code>resources</code>:{<code>min</code>:6, <code>max</code>:10}} 的资源限额，用户B的资源限额配置为 {<code>resources</code>: {<code>min</code>:12,<code>max</code>:14}}</li><li>用户A <code>Job</code> 应用资源配置为{<code>resources</code>:{<code>requests</code>:2,<code>limits</code>:2}} rs为2，<code>NoteBook</code> 应用资源配额为{<code>resources</code>:{<code>requests</code>:2,<code>limits</code>:2}} rs 为2</li><li>用户B <code>Job-1</code> 应用资源配置为{<code>resources</code>:{<code>requests</code>:3,<code>limits</code>:3}} rs为1，<br><code>Job-2</code> 应用资源配置为{<code>resources</code>:{<code>resources</code>:5,<code>limits</code>:5}} rs为1。</li></ul><p>背景如上，模拟过程步骤及期望如下：</p><ol><li>在<code>ns-A</code>中运行<code>Job</code>,在<code>ns-B</code>中运行<code>Job-1</code>，由于此时<code>requests</code>都没有达到<code>min</code>值，此时在各自的<code>ns</code>中都能正常运行。</li><li>在<code>ns-A</code>中运行<code>NoteBokk</code>服务，这个时候 <code>2*2+2*2&gt;6</code>那么需要向<code>ns-B</code>借用部分资源进行运行</li><li>在<code>ns-B</code>中运行<code>Job-2</code>服务，这个时候<code>ns-B</code>通知<code>ns-A</code>:”大兄嘚，临时借用的资源该还我了，”，此时在<code>ns-A</code>中，由于<code>NoteBook</code>服务是在线服务，需要保障其在 <strong>“不得已”</strong> 情况下才释放资源以备还回借用的资源，此时应该是优先释放<code>Job</code> 资源来还债。</li></ol><h1 id="需求解析"><a href="#需求解析" class="headerlink" title="需求解析"></a>需求解析</h1><ul><li>跨<code>namespace</code>资源借用</li><li>控制<code>pod</code>释放资源的先后顺序。<blockquote><p>以下情况举例以<code>CPU</code>资源为例，<code>Memory</code>,<code>GPU</code>一样适用</p></blockquote></li></ul><h2 id="跨namespace资源调用"><a href="#跨namespace资源调用" class="headerlink" title="跨namespace资源调用"></a>跨<code>namespace</code>资源调用</h2><p>解决方案： 基于<code>scheduler framework</code> 定义 <code>capacityScheduling</code> 调度策略。<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/scheduling-framework/"><code>scheduler framework</code></a>。<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/scheduling-framework-extensions.png" alt="scheduler-framework-extension"><br>通过在调度框架中完成对应的<code>Points</code>逻辑，<em>详细的代码分析后续分析<code>scheduler framework</code>进行介绍</em>。</p><h2 id="控制资源释放的先后顺序"><a href="#控制资源释放的先后顺序" class="headerlink" title="控制资源释放的先后顺序"></a>控制资源释放的先后顺序</h2><p>解决方案: 基于<code>PriorityClass</code>的优先级与抢占式，<a href="https://kiragoo.github.io/archives/1bff6d5.html"><code>PriorityClass优先级与抢占</code></a>。</p><p>优先级的概念我们都可以理解，即优先级越高则优先抢占资源，固引入对<code>NoteBook</code>关联的<code>PriorityClass</code>的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: scheduling.k8s.io&#x2F;v1</span><br><span class="line">kind: PriorityClass</span><br><span class="line">metadata:</span><br><span class="line">  name: priority-class-for-notebook</span><br><span class="line">value: 1000000</span><br><span class="line">globalDefault: false</span><br><span class="line">description: &quot;This priority class should be used for notebook service pods only.</span><br></pre></td></tr></table></figure><p>注意，这是一个全局性质的定义，不会因为<code>namespace</code>而控制。</p><p>那怎么知道还资源释放是和优先级相关的呢？<br>根据函数名 <code>selectVictimsOnNode</code>，我们可以知道这边是选择那些“倒霉蛋”来释放他们借用的资源，具体关键逻辑性的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  &#x2F;&#x2F; 此处自定义了排序逻辑</span><br><span class="line">sort.Slice(nodeInfo.Pods, func(i, j int) bool &#123; return !util.MoreImportantPod(nodeInfo.Pods[i].Pod, nodeInfo.Pods[j].Pod) &#125;)</span><br><span class="line">var potentialVictims []*v1.Pod</span><br><span class="line">if preemptorWithElasticQuota &#123;</span><br><span class="line">for _, p :&#x3D; range nodeInfo.Pods &#123;</span><br><span class="line">pElasticQuotaInfo, pWithElasticQuota :&#x3D; elasticQuotaInfos[p.Pod.Namespace]</span><br><span class="line">if !pWithElasticQuota &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if moreThanMinWithPreemptor &#123;</span><br><span class="line">&#x2F;&#x2F; If Preemptor.Request + Quota.Used &gt; Quota.Min:</span><br><span class="line">&#x2F;&#x2F; It means that its guaranteed isn&#39;t borrowed by other</span><br><span class="line">&#x2F;&#x2F; quotas. So that we will select the pods which subject to the</span><br><span class="line">&#x2F;&#x2F; same quota(namespace) with the lower priority than the</span><br><span class="line">&#x2F;&#x2F; preemptor&#39;s priority as potential victims in a node.</span><br><span class="line">if p.Pod.Namespace &#x3D;&#x3D; pod.Namespace &amp;&amp; podutil.GetPodPriority(p.Pod) &lt; podPriority &#123;</span><br><span class="line">potentialVictims &#x3D; append(potentialVictims, p.Pod)</span><br><span class="line">if err :&#x3D; removePod(p.Pod); err !&#x3D; nil &#123;</span><br><span class="line">return nil, 0, false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; If Preemptor.Request + Quota.allocated &lt;&#x3D; Quota.min: It</span><br><span class="line">&#x2F;&#x2F; means that its min(guaranteed) resource is used or</span><br><span class="line">&#x2F;&#x2F; &#96;borrowed&#96; by other Quota. Potential victims in a node</span><br><span class="line">&#x2F;&#x2F; will be chosen from Quotas that allocates more resources</span><br><span class="line">&#x2F;&#x2F; than its min, i.e., borrowing resources from other</span><br><span class="line">&#x2F;&#x2F; Quotas.</span><br><span class="line">if p.Pod.Namespace !&#x3D; pod.Namespace &amp;&amp; moreThanMin(*pElasticQuotaInfo.Used, *pElasticQuotaInfo.Min) &#123;</span><br><span class="line">          &#x2F;&#x2F; 将选择好的 POD 添加到Victims数组中</span><br><span class="line">potentialVictims &#x3D; append(potentialVictims, p.Pod)</span><br><span class="line">if err :&#x3D; removePod(p.Pod); err !&#x3D; nil &#123;</span><br><span class="line">return nil, 0, false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for _, p :&#x3D; range nodeInfo.Pods &#123;</span><br><span class="line">_, pWithElasticQuota :&#x3D; elasticQuotaInfos[p.Pod.Namespace]</span><br><span class="line">if pWithElasticQuota &#123;</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if podutil.GetPodPriority(p.Pod) &lt; podPriority &#123;</span><br><span class="line">potentialVictims &#x3D; append(potentialVictims, p.Pod)</span><br><span class="line">if err :&#x3D; removePod(p.Pod); err !&#x3D; nil &#123;</span><br><span class="line">return nil, 0, false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看看 <code>util.MoreImportantPod</code> 这个排序的具体逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func MoreImportantPod(pod1, pod2 *v1.Pod) bool &#123;</span><br><span class="line">p1 :&#x3D; podutil.GetPodPriority(pod1)</span><br><span class="line">p2 :&#x3D; podutil.GetPodPriority(pod2)</span><br><span class="line">if p1 !&#x3D; p2 &#123;</span><br><span class="line">return p1 &gt; p2</span><br><span class="line">&#125;</span><br><span class="line">return GetPodStartTime(pod1).Before(GetPodStartTime(pod2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这边就一切了然了，实际上优先根据优先级排序，如果优先级相同的话则根据<code>StartTime</code>进行排序。</p><p><em>至此算完成了</em>，但是果真如此么？这里我们引入了<code>PriorityClass</code>来控制释放资源的顺序，那么会不会引入其他问题呢？</p><p><strong>谨惕</strong><br>引入高优先级，那么默认情况下会导致资源抢占，那么低优先级的应用在高优先级应用不主动释放资源的情况下永远获取不到资源，最恶劣的结果就是低优先级的<code>Pod</code>一直处于“资源饥饿”状态，始终没法部署运行。那么我们有没有机会在利用优先级的同时，弱化抢占的行为能力呢？答案是肯定的，官方文档中有关于<a href="https://kubernetes.io/zh/docs/concepts/configuration/pod-priority-preemption/#non-preempting-priority-class">非抢占式的 PriorityClass</a>的明细描述，通过以上的组合，可以达到目前我们的需求预期，下面让我们来验证测试。</p><h1 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h1><p>测试环境为<br>1 master unscheable 8核<br>2 slave  scheable  8*2 核<br><code>kube-scheduler</code> 编译完成之后需要对<code>kube-scheduler</code>配置对应的调度策略:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># kube-scheduler.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    component: kube-scheduler</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: kube-scheduler-with-plugins</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">    - kube-scheduler</span><br><span class="line">    - --authentication-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;scheduler.conf</span><br><span class="line">    - --authorization-kubeconfig&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;scheduler.conf</span><br><span class="line">    - --bind-address&#x3D;127.0.0.1</span><br><span class="line">    &#x2F;&#x2F; modify</span><br><span class="line">    - --config&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;scheduler-plugins&#x2F;sched-multi.yaml</span><br><span class="line">    - --port&#x3D;0</span><br><span class="line">    image: kirago&#x2F;kube-scheduler:v0.19.8</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    livenessProbe:</span><br><span class="line">      failureThreshold: 8</span><br><span class="line">      httpGet:</span><br><span class="line">        host: 127.0.0.1</span><br><span class="line">        path: &#x2F;healthz</span><br><span class="line">        port: 10259</span><br><span class="line">        scheme: HTTPS</span><br><span class="line">      initialDelaySeconds: 10</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">      timeoutSeconds: 15</span><br><span class="line">    name: kube-scheduler-with-plugins</span><br><span class="line">    resources:</span><br><span class="line">      requests:</span><br><span class="line">        cpu: 100m</span><br><span class="line">    startupProbe:</span><br><span class="line">      failureThreshold: 24</span><br><span class="line">      httpGet:</span><br><span class="line">        host: 127.0.0.1</span><br><span class="line">        path: &#x2F;healthz</span><br><span class="line">        port: 10259</span><br><span class="line">        scheme: HTTPS</span><br><span class="line">      initialDelaySeconds: 10</span><br><span class="line">      periodSeconds: 10</span><br><span class="line">      timeoutSeconds: 15</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: &#x2F;etc&#x2F;kubernetes&#x2F;scheduler.conf</span><br><span class="line">      name: kubeconfig</span><br><span class="line">      readOnly: true</span><br><span class="line">    &#x2F;&#x2F; modify</span><br><span class="line">    - mountPath: &#x2F;etc&#x2F;kubernetes&#x2F;scheduler-plugins&#x2F;sched-multi.yaml</span><br><span class="line">      name: sched-multi</span><br><span class="line">      readOnly: true</span><br><span class="line">  hostNetwork: true</span><br><span class="line">  priorityClassName: system-node-critical</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: &#x2F;etc&#x2F;kubernetes&#x2F;scheduler.conf</span><br><span class="line">      type: FileOrCreate</span><br><span class="line">    name: kubeconfig</span><br><span class="line">  &#x2F;&#x2F; modify</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: &#x2F;etc&#x2F;kubernetes&#x2F;scheduler-plugins&#x2F;sched-multi.yaml</span><br><span class="line">      type: FileOrCreate</span><br><span class="line">    name: sched-multi</span><br><span class="line">status: &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># sched-multi.yaml</span><br><span class="line">apiVersion: kubescheduler.config.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">leaderElection:</span><br><span class="line">  leaderElect: false</span><br><span class="line">clientConnection:</span><br><span class="line">  kubeconfig: &#x2F;etc&#x2F;kubernetes&#x2F;scheduler.conf</span><br><span class="line">profiles:</span><br><span class="line">- schedulerName: default-scheduler</span><br><span class="line">  plugins:</span><br><span class="line">    preFilter:</span><br><span class="line">      enabled:</span><br><span class="line">      - name: CapacityScheduling</span><br><span class="line">    postFilter:</span><br><span class="line">      enabled:</span><br><span class="line">      - name: CapacityScheduling</span><br><span class="line">      disabled:</span><br><span class="line">      - name: &quot;*&quot;</span><br><span class="line">    reserve:</span><br><span class="line">      enabled:</span><br><span class="line">      - name: CapacityScheduling</span><br><span class="line">    postBind:</span><br><span class="line">      enabled:</span><br><span class="line">  # pluginConfig is needed for coscheduling plugin to manipulate PodGroup CR objects.</span><br><span class="line">  pluginConfig:</span><br><span class="line">  - name: CapacityScheduling</span><br><span class="line">    args:</span><br><span class="line">      kubeConfigPath: &#x2F;etc&#x2F;kubernetes&#x2F;scheduler.conf</span><br></pre></td></tr></table></figure><p>*由于 <code>scheduler plugins</code>*是<code>sig-scheduling</code>维护，目前这块的文档还是比较少的，这边的插件目前属于<code>out-of-tree</code>，这边的<code>Option</code>是<code>merge</code>到<code>in-tree</code>中的，所以每个<code>Point</code>该怎么配，最直观的就是看下源码，这是最靠谱的，之前在陪<code>coScheduling</code>的时候就遇到一丢丢问题，个人也提交了个<code>ISSUE</code>确认了下，详见<a href="https://github.com/kubernetes-sigs/scheduler-plugins/issues/168"><code>The Pod of kube-scheduler : &quot;found unknown field: unreserve&quot;</code></a>。</p><h2 id="权限准备工作"><a href="#权限准备工作" class="headerlink" title="权限准备工作"></a>权限准备工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; all-in-one.yaml</span><br><span class="line"># First part</span><br><span class="line"># Apply extra privileges to system:kube-scheduler.</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kube-scheduler:plugins</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [&quot;scheduling.sigs.k8s.io&quot;]</span><br><span class="line">  resources: [&quot;elasticquotas&quot;]</span><br><span class="line">  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">metadata:</span><br><span class="line">  name: system:kube-scheduler:plugins</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: system:kube-scheduler:plugins</span><br><span class="line">subjects:</span><br><span class="line">- apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: User</span><br><span class="line">  name: system:kube-scheduler</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="创建对应的namespace"><a href="#创建对应的namespace" class="headerlink" title="创建对应的namespace"></a>创建对应的<code>namespace</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; eq-ns.yaml</span><br><span class="line">&#x2F;&#x2F; ns-A</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: eq1</span><br><span class="line">---</span><br><span class="line">&#x2F;&#x2F; ns-B</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: eq2</span><br></pre></td></tr></table></figure><h2 id="创建CRD文件"><a href="#创建CRD文件" class="headerlink" title="创建CRD文件"></a>创建<code>CRD</code>文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; capacityscheduler-crd.yaml</span><br><span class="line">apiVersion: apiextensions.k8s.io&#x2F;v1</span><br><span class="line">kind: CustomResourceDefinition</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticquotas.scheduling.sigs.k8s.io</span><br><span class="line">  annotations:</span><br><span class="line">    &quot;api-approved.kubernetes.io&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&#x2F;scheduler-plugins&#x2F;pull&#x2F;52&quot;</span><br><span class="line">spec:</span><br><span class="line">  group: scheduling.sigs.k8s.io</span><br><span class="line">  names:</span><br><span class="line">    plural: elasticquotas</span><br><span class="line">    singular: elasticquota</span><br><span class="line">    kind: ElasticQuota</span><br><span class="line">    shortNames:</span><br><span class="line">    - eq</span><br><span class="line">    - eqs</span><br><span class="line">  scope: Namespaced</span><br><span class="line">  versions:</span><br><span class="line">    - name: v1alpha1</span><br><span class="line">      served: true</span><br><span class="line">      storage: true</span><br><span class="line">      schema:</span><br><span class="line">        openAPIV3Schema:</span><br><span class="line">          type: object</span><br><span class="line">          properties:</span><br><span class="line">            spec:</span><br><span class="line">              type: object</span><br><span class="line">              properties:</span><br><span class="line">                min:</span><br><span class="line">                  type: object</span><br><span class="line">                  additionalProperties:</span><br><span class="line">                    anyOf:</span><br><span class="line">                      - type: integer</span><br><span class="line">                      - type: string</span><br><span class="line">                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br><span class="line">                    x-kubernetes-int-or-string: true</span><br><span class="line">                max:</span><br><span class="line">                  type: object</span><br><span class="line">                  additionalProperties:</span><br><span class="line">                    anyOf:</span><br><span class="line">                      - type: integer</span><br><span class="line">                      - type: string</span><br><span class="line">                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br><span class="line">                    x-kubernetes-int-or-string: true</span><br><span class="line">            status:</span><br><span class="line">              type: object</span><br><span class="line">              properties:</span><br><span class="line">                used:</span><br><span class="line">                  type: object</span><br><span class="line">                  additionalProperties:</span><br><span class="line">                    anyOf:</span><br><span class="line">                      - type: integer</span><br><span class="line">                      - type: string</span><br><span class="line">                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$</span><br><span class="line">                    x-kubernetes-int-or-string: true</span><br></pre></td></tr></table></figure><h2 id="创建NoteBook关联的PriorityClass"><a href="#创建NoteBook关联的PriorityClass" class="headerlink" title="创建NoteBook关联的PriorityClass"></a>创建<code>NoteBook</code>关联的<code>PriorityClass</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: scheduling.k8s.io&#x2F;v1</span><br><span class="line">kind: PriorityClass</span><br><span class="line">metadata:</span><br><span class="line">  name: priority-class-for-notebook</span><br><span class="line">value: 1000000</span><br><span class="line">preemptionPolicy: Never</span><br><span class="line">globalDefault: false</span><br><span class="line">description: &quot;This priority class should be used for notebook service pods only.&quot;</span><br></pre></td></tr></table></figure><h2 id="模拟场景所需的Deployment"><a href="#模拟场景所需的Deployment" class="headerlink" title="模拟场景所需的Deployment"></a>模拟场景所需的<code>Deployment</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Job</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx1-1</span><br><span class="line">  namespace: eq1</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx1-1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx1-1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx1-1</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx1-1</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        command: [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;cat &#x2F;dev&#x2F;urandom | gzip -9 | gzip -d | gzip -9 | gzip -d &gt; &#x2F;dev&#x2F;null&quot;]</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 2</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; NoteBooK</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx2-1</span><br><span class="line">  namespace: eq1</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx2-1</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx2-1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx2-1</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx2-1</span><br><span class="line">      annotations:</span><br><span class="line">        job: notebook</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        command: [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;cat &#x2F;dev&#x2F;urandom | gzip -9 | gzip -d | gzip -9 | gzip -d &gt; &#x2F;dev&#x2F;null&quot;]</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 2</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 2</span><br><span class="line">      priorityClassName: priority-class-for-notebook</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Job 1</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx1-2</span><br><span class="line">  namespace: eq2</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx1-2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx1-2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx1-2</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx1-2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        command: [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;cat &#x2F;dev&#x2F;urandom | gzip -9 | gzip -d | gzip -9 | gzip -d &gt; &#x2F;dev&#x2F;null&quot;]</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 3</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Job-2</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx2-2</span><br><span class="line">  namespace: eq2</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx2-2</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx2-2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: nginx2-2</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx2-2</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        command: [&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;cat &#x2F;dev&#x2F;urandom | gzip -9 | gzip -d | gzip -9 | gzip -d &gt; &#x2F;dev&#x2F;null&quot;]</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 5</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 5</span><br></pre></td></tr></table></figure><ol><li>部署 <code>Job</code><br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/ng1-eq1.png" alt="ng1-eq1"></li><li>部署 <code>Job-1</code><br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/ng1-eq2.png" alt="ng1-eq2"></li><li>部署 <code>NoteBook</code>，此时模拟<code>ns-A</code>按照我们的预期 <code>2*2+2*2&gt;6</code>，且 <code>ns-B</code> 空间用户的资源还有剩余满足借用的前提，即使 8&gt;6 但是也是能够将<code>ns-A</code>中所有的应用部署起来的。<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/ng2-eq1.png" alt="ng2-eq1"></li><li>部署模拟 <code>ns-B</code> 中的<code>Job-2</code>,此时这个时候<code>ns-B</code>肯定会优先保障自家兄弟的温饱，此时<code>ns-A</code>中借用的资源应该还回来了，但是应该还谁的资源呢？根据上文的分析实际上再<code>ns-A</code>中也分三六九等，需要优先保障<code>NoteBook</code>服务，那么就是对<code>Job</code>进行下手。<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/ng2-eq2.png" alt="ng2-eq2"></li></ol><p>可以看到，一切按照我们的预期在执行，至此，各位大佬可以发现，<em>此处的<code>pod nginx1-1-59457d7fbf-4pkxt</code>是一个<code>pending</code>状态，为啥不是直接被干掉呢？</em> </p><p><strong>后续更新源码分析</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需求背景&quot;&gt;&lt;a href=&quot;#需求背景&quot; class=&quot;headerlink&quot; title=&quot;需求背景&quot;&gt;&lt;/a&gt;需求背景&lt;/h1&gt;&lt;p&gt; 在多租户的场景下，提供一种跨&lt;code&gt;namespace&lt;/code&gt;的资源“借用”途径，在资源池建设之后进一步提升资源</summary>
      
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="notebook" scheme="http://kiragoo.github.com/tags/notebook/"/>
    
    <category term="scheduler" scheme="http://kiragoo.github.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 之Pod 优先级与抢占</title>
    <link href="http://kiragoo.github.com/archives/1bff6d5.html"/>
    <id>http://kiragoo.github.com/archives/1bff6d5.html</id>
    <published>2021-04-27T06:38:31.000Z</published>
    <updated>2021-04-30T06:50:44.855Z</updated>
    
    <content type="html"><![CDATA[<p><code>Pods</code> 可以有优先级（<code>Priority</code>）。 优先级体现的是当前 <code>Pod</code> 与其他 <code>Pod</code> 相比的重要程度。如果 <code>Pod</code> 无法被调度，则 调度器会尝试抢占（逐出）低优先级的 <code>Pod</code>，从而使得悬决的 <code>Pod</code> 可被调度。</p><blockquote><p>警告：<br>在一个并非所有用户都可信任的集群中，一个有恶意的用户可能创建优先级最高的 Pod，从而导致其他 Pod 被逐出或者无法调度。 管理员可以使用 ResourceQuota 来避免用户创建高优先级的 Pod。</p></blockquote><h1 id="如何使用优先级与抢占"><a href="#如何使用优先级与抢占" class="headerlink" title="如何使用优先级与抢占"></a>如何使用优先级与抢占</h1><p>要使用优先级与抢占特性：</p><ol><li>添加一个或多个<code>PriorityClass</code>对象</li><li>创建<code>Pod</code>或者<code>Deployment</code>对象的时候加上其关联的<code>PriorityClass</code>对象，在模板中添加<code>priorityClassName</code>描述。<blockquote><p>说明： Kubernetes 发行时已经带有两个 PriorityClasses：system-cluster-critical 和 system-node-critical。 这些优先级类是公共的，用来 确保关键组件总是能够先被调度.<br>抢占能力是通过 <code>kube-scheduler</code> 的标志 <code>disablePreemption</code> 来控制的，该标志默认为 <code>false</code>。 如果你在了解上述提示的前提下仍希望禁用抢占，可以将 <code>disablePreemption</code> 设置为<code>true</code>。<br>这一选项只能通过组件配置来设置，无法通过命令行选项这种较老的形式设置。 下面是禁用抢占的组件配置示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: kubescheduler.config.k8s.io&#x2F;v1alpha1</span><br><span class="line">kind: KubeSchedulerConfiguration</span><br><span class="line">algorithmSource:</span><br><span class="line">  provider: DefaultProvider</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">disablePreemption: true</span><br></pre></td></tr></table></figure><h1 id="PriorityClass"><a href="#PriorityClass" class="headerlink" title="PriorityClass"></a>PriorityClass</h1><code>PriorityClass</code> 是一种<strong>不属于任何名字空间的对象</strong>，定义的是从优先级类名向优先级整数值的映射。优先级类名称用 <code>PriorityClass</code> 对象的元数据的 name 字段指定。 优先级整数值在必须提供的 <code>value</code> 字段中指定。 <strong>优先级值越大，优先级越高</strong>。 PriorityClass 对象的名称必须是合法的 DNS 子域名 且不可包含 system- 前缀。</li></ol><p><code>PriorityClass</code> 对象可以设置数值小于等于 <strong>10</strong> 亿的 32 位整数。 更大的数值保留给那些通常不可被抢占或逐出的系统 <code>Pod</code>。 集群管理员应该为每个优先级值映射创建一个 <code>PriorityClass</code> 对象。</p><p><code>PriorityClass</code> 对象还有两个可选字段：<code>globalDefault</code> 和 <code>description</code>。 前者用来表明此 <code>PriorityClass</code> 的数值应该用于未设置 <code>priorityClassName</code> 的 <code>Pod</code>。 系统中<strong>只能存在一个</strong> <code>globalDefault</code> 设为真的 <code>PriorityClass</code> 对象。 如果没有 <code>PriorityClass</code> 对象的 <code>globalDefault</code> 被设置，则未设置 <code>priorityClassName</code> 的 <code>Pod</code> 的优先级为 0。</p><p><code>description</code> 字段可以设置任意字符串值。其目的是告诉用户何时该使用该 <code>PriorityClass</code>。</p><h2 id="关于-Pod-优先级与现有集群的说明"><a href="#关于-Pod-优先级与现有集群的说明" class="headerlink" title="关于 Pod 优先级与现有集群的说明"></a>关于 Pod 优先级与现有集群的说明</h2><ul><li><p>如果你要升级一个不支持 <code>Pod</code> 优先级的集群，现有 <code>Pod</code> 的有效优先级都被视为 0。</p></li><li><p>向集群中添加 <code>globalDefault</code> 设置为 <code>true</code> 的 <code>PriorityClass</code> <strong>不会改变现有</strong> <code>Pod</code> 的优先级。新添加的 <code>PriorityClass</code> 值仅适用于 <code>PriorityClass</code> 被添加之后 新建的 <code>Pod</code>。</p></li><li><p>如果你要删除 <code>PriorityClass</code>，则使用所删除的 <code>PriorityClass</code> 名称的现有 <code>Pod</code> 都 不会受影响，但是你不可以再创建使用该 <code>PriorityClass</code> 名称的新 <code>Pod</code>。</p></li></ul><h2 id="PriorityClass-示例"><a href="#PriorityClass-示例" class="headerlink" title="PriorityClass 示例"></a><code>PriorityClass</code> 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: scheduling.k8s.io&#x2F;v1</span><br><span class="line">kind: PriorityClass</span><br><span class="line">metadata:</span><br><span class="line">  name: high-priority</span><br><span class="line">value: 1000000</span><br><span class="line">globalDefault: false</span><br><span class="line">description: &quot;This priority class should be used for XYZ service pods only.&quot;</span><br></pre></td></tr></table></figure><h1 id="非抢占式的-PriorityClass"><a href="#非抢占式的-PriorityClass" class="headerlink" title="非抢占式的 PriorityClass"></a>非抢占式的 PriorityClass</h1><p>配置 <code>preemptionPolicy</code>: <code>Never</code> 的 <code>Pod</code> 在调度队列中会被放在低优先级的 <code>Pod</code> 的前面，但是它们不可以抢占其他 <code>Pod</code>。 非抢占 <code>Pod</code> 会在调度队列中等待调度，直到有足够空闲资源时才被调度。 非抢占 <code>Pod</code> 与其他 <code>Pod</code> 一样，也受调度器回退（Back-off）机制影响。 换言之，如果调度器尝试调度这些 <code>Pod</code> 时发现它们无法调度，它们会被再次尝试，并且 <strong>重试的频率会被降低</strong>，这样可以使得其他优先级较低的 <code>Pod</code> 有机会在它们之前被调度。</p><p>非抢占 <code>Pod</code> 仍有可能被其他高优先级的 <code>Pod</code> 抢占。</p><p><code>preemptionPolicy</code> 默认取值为 <code>PreemptLowerPriority</code>，这会使得该 <code>PriorityClass</code> 的 <code>Pod</code> 能够抢占低优先级的 <code>Pod</code>（这也是当前的默认行为）。 如果 <code>preemptionPolicy</code> 被设置为 <code>Never</code>，则该 <code>PriorityClass</code> 下的 <code>Pod</code> 都是非抢占的。</p><p>使用 <code>preemptionPolicy</code> 字段要求启用 <code>NonPreemptingPriority</code> 特性门控。</p><blockquote><p>一种示例应用场景是数据科学负载。 用户可能希望所提交的 Job 比其他负载的优先级都高，但又不希望因为抢占运行中的 Pod 而丢弃现有工作。 只要集群中”自然地”释放出足够的资源，配置了 preemptionPolicy: Never 的高优先级 Job 可以在队列中其他 Pod 之前获得调度机会。<br><strong>这正是之前调研需要的设计，尤其对那种在线服务来说，当我配置了 <code>capacityScheduling</code> 的调度插件之后，我要保障跨<code>namespace</code> 还回借出的资源，同时还能够实现类似于<code>延时</code>驱逐的概念，此处的逻辑是对<code>pods</code>进行基于<code>PriorityClass</code>以及<code>time</code>的排序，但是在每个<code>namespace</code>内部又不能因为高优先级的<code>pod</code>导致资源饥饿，使得其他业务<code>pod</code>一直获取不到资源</strong></p></blockquote><h2 id="非抢占-PriorityClass-示例"><a href="#非抢占-PriorityClass-示例" class="headerlink" title="非抢占 PriorityClass 示例"></a>非抢占 PriorityClass 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: scheduling.k8s.io&#x2F;v1</span><br><span class="line">kind: PriorityClass</span><br><span class="line">metadata:</span><br><span class="line">  name: high-priority-nonpreempting</span><br><span class="line">value: 1000000</span><br><span class="line">preemptionPolicy: Never</span><br><span class="line">globalDefault: false</span><br><span class="line">description: &quot;This priority class will not cause other pods to be preempted.&quot;</span><br></pre></td></tr></table></figure><h1 id="Pod-优先级"><a href="#Pod-优先级" class="headerlink" title="Pod 优先级"></a>Pod 优先级</h1><p>在已经创建了一个或多个 <code>PriorityClass</code> 对象之后，你就可以创建 <code>Pod</code> 并在其规约中 指定这些 <code>PriorityClass</code> 的名字之一。优先级准入控制器使用 <code>priorityClassName</code> 字段来填充优先级整数值。如果所指定优先级类不存在，则 <code>Pod</code> 被拒绝。</p><p>下面的 <code>YAML</code> 是一个 <code>Pod</code> 配置，使用了前面例子中创建的 <code>PriorityClass</code>。 优先级准入控制器检查 <code>Pod</code> 的规约并将 <code>Pod</code> 优先级解析为 1000000。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    env: test</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  priorityClassName: high-priority</span><br></pre></td></tr></table></figure><h2 id="优先级对-Pod-调度顺序的影响"><a href="#优先级对-Pod-调度顺序的影响" class="headerlink" title="优先级对 Pod 调度顺序的影响"></a>优先级对 Pod 调度顺序的影响</h2><p>当集群启用了 Pod 优先级时，调度器会基于 Pod 的优先级来排序悬决的 Pod。 新 Pod 会被放在调度队列中较低优先级的其他悬决 Pod 前面。 因此，优先级较高的 Pod 在其调度需求被满足的前提下会比优先级低的 Pod 先被调度。 如果优先级较高的 Pod 无法被调度，调度器会继续尝试调度其他较低优先级的 Pod。</p><h1 id="抢占"><a href="#抢占" class="headerlink" title="抢占"></a>抢占</h1><p><code>Pod</code> 被创建时会被放入一个队列中等待调度。调度器从队列中选择 <code>Pod</code>，尝试将其调度到某 <code>Node</code> 上。 如果找不到能够满足 <code>Pod</code> 所设置需求的 <code>Node</code>，就会触发悬决 <code>Pod</code> 的抢占逻辑。 假定 <code>P</code> 是悬决的 <code>Pod</code>，抢占逻辑会尝试找到一个这样的节点，在该节点上移除一个或者多个 优先级比 <code>P</code> 低的 <code>Pod</code> 后，<code>P</code> 就可以被调度到该节点。如果调度器能够找到这样的节点， 该节点上的一个或者多个优先级较低的 <code>Pod</code> 就会被逐出。当被逐出的 <code>Pod</code> 从该节点上 消失时，<code>P</code> 就可以调度到此节点。</p><h2 id="暴露给用户的信息"><a href="#暴露给用户的信息" class="headerlink" title="暴露给用户的信息"></a>暴露给用户的信息</h2><p>当 <code>Pod P</code> 在节点 <code>N</code>上抢占了一个或多个 <code>Pod</code> 时，<code>Pod P</code> 的状态中的<code>nominatedNodeName</code> 字段 会被设置为节点 <code>N</code> 的名字。此字段有助于调度器跟踪为 <code>P</code> 所预留的资源，同时也给用户提供了其集群中发生的抢占的信息。</p><p>请注意，<code>Pod P</code> 不一定会被调度到其 “nominated node（提名节点）”。 当选定的 <code>Pod</code> 被抢占时，它们都会有其体面终止时限（Graceful Termination Period）。 如果在调度器等待选定的（被牺牲的）<code>Pod</code> 终止期间有新的节点可用，调度器会使用其他 节点来调度 <code>Pod P</code>。因此，<code>Pod</code> 中的 <code>nominatedNodeName</code> 和 <code>nodeName</code> 并不总是相同。 此外，如果调度器抢占了节点 <code>N</code> 上的 <code>Pod</code>，但接下来出现优先级比 <code>P</code> 还高的 <code>Pod</code> 要被 调度，则调度器会把节点 <code>N</code> 让给新的优先级更高的 <code>Pod</code>。如果发生了这种情况，调度器 会清除 <code>Pod P</code> 的 <code>nominatedNodeName</code>。通过清除操作，调度器使得 <code>Pod P</code> 可以尝试 抢占别的节点上的 <code>Pod</code>。</p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 优先级与抢占式调度</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="优先级" scheme="http://kiragoo.github.com/categories/kubernetes/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
    <category term="抢占式调度" scheme="http://kiragoo.github.com/categories/kubernetes/%E4%BC%98%E5%85%88%E7%BA%A7/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="优先级与抢占" scheme="http://kiragoo.github.com/tags/%E4%BC%98%E5%85%88%E7%BA%A7%E4%B8%8E%E6%8A%A2%E5%8D%A0/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes之kube-scheduler的设计</title>
    <link href="http://kiragoo.github.com/archives/d3e3f315.html"/>
    <id>http://kiragoo.github.com/archives/d3e3f315.html</id>
    <published>2021-04-26T02:18:52.000Z</published>
    <updated>2021-04-26T03:24:03.159Z</updated>
    
    <content type="html"><![CDATA[<p><code>Kubernetes</code> 是 <code>k8s</code> 核心组件之一，主要目的即为<code>pod</code>选取合适的<code>node</code>进行绑定。整体流程氛围三部分：</p><ul><li>获取未调度的<code>podList</code></li><li>通过执行一系列的调度算法进行选取合适的<code>node</code></li><li>提交数据到<code>apiServer</code>然后进行<code>bind</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">For given pod:</span><br><span class="line">    +---------------------------------------------+</span><br><span class="line">    |               Schedulable nodes:            |</span><br><span class="line">    |                                             |</span><br><span class="line">    | +--------+    +--------+      +--------+    |</span><br><span class="line">    | | node 1 |    | node 2 |      | node 3 |    |</span><br><span class="line">    | +--------+    +--------+      +--------+    |</span><br><span class="line">    |                                             |</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">                        |</span><br><span class="line">                        |</span><br><span class="line">                        v</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">    Pred. filters: node 3 doesn&#39;t have enough resource</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">                        |</span><br><span class="line">                        |</span><br><span class="line">                        v</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">    |             remaining nodes:                |</span><br><span class="line">    |   +--------+                 +--------+     |</span><br><span class="line">    |   | node 1 |                 | node 2 |     |</span><br><span class="line">    |   +--------+                 +--------+     |</span><br><span class="line">    |                                             |</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">                        |</span><br><span class="line">                        |</span><br><span class="line">                        v</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">    Priority function:    node 1: p&#x3D;2</span><br><span class="line">                          node 2: p&#x3D;5</span><br><span class="line">    +-------------------+-------------------------+</span><br><span class="line">                        |</span><br><span class="line">                        |</span><br><span class="line">                        v</span><br><span class="line">            select max&#123;node priority&#125; &#x3D; node 2</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="主要流程分析"><a href="#主要流程分析" class="headerlink" title="主要流程分析"></a>主要流程分析</h1><blockquote><p><code>cmd/kube-scheduler/app/server.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line">    if err :&#x3D; runCommand(cmd, opts, registryOptions...); err !&#x3D; nil &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, &quot;%v\n&quot;, err)</span><br><span class="line">        os.Exit(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令行参数解析-及创建-scheduler"><a href="#命令行参数解析-及创建-scheduler" class="headerlink" title="命令行参数解析 及创建  scheduler"></a>命令行参数解析 及创建  <code>scheduler</code></h2><blockquote><p><code>cmd/kube-scheduler/app/server.go#runCommand</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc, sched, err :&#x3D; Setup(ctx, opts, registryOptions...)</span><br></pre></td></tr></table></figure><blockquote><p><code>cmd/kube-scheduler/app/server.go#Setup</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 命令行及 options 参数解析</span><br><span class="line">func Setup(ctx context.Context, opts *options.Options, outOfTreeRegistryOptions ...Option) (*schedulerserverconfig.CompletedConfig, *scheduler.Scheduler, error) &#123;</span><br><span class="line">    &#x2F;&#x2F; 校验</span><br><span class="line">if errs :&#x3D; opts.Validate(); len(errs) &gt; 0 &#123;</span><br><span class="line">return nil, nil, utilerrors.NewAggregate(errs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 返回 config 对象</span><br><span class="line">c, err :&#x3D; opts.Config()</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 返回 Config 对象</span><br><span class="line">cc :&#x3D; c.Complete()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 基于 scheduler framework 开发的  out-of-tree 的调度插件</span><br><span class="line">outOfTreeRegistry :&#x3D; make(runtime.Registry)</span><br><span class="line">for _, option :&#x3D; range outOfTreeRegistryOptions &#123;</span><br><span class="line">if err :&#x3D; option(outOfTreeRegistry); err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recorderFactory :&#x3D; getRecorderFactory(&amp;cc)</span><br><span class="line">&#x2F;&#x2F; 创建 scheduler，调度算法也是在New 方法中确定下来的。</span><br><span class="line">sched, err :&#x3D; scheduler.New(cc.Client,</span><br><span class="line">cc.InformerFactory,</span><br><span class="line">cc.PodInformer,</span><br><span class="line">recorderFactory,</span><br><span class="line">ctx.Done(),</span><br><span class="line">scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;cc, sched, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置调度算法注册"><a href="#内置调度算法注册" class="headerlink" title="内置调度算法注册"></a>内置调度算法注册</h2><blockquote><p><code>pkg/scheduler/scheduler.go#New()</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">case source.Provider !&#x3D; nil:</span><br><span class="line">&#x2F;&#x2F; Create the config from a named algorithm provider.</span><br><span class="line">sc, err :&#x3D; configurator.createFromProvider(*source.Provider)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;couldn&#39;t create scheduler using provider %q: %v&quot;, *source.Provider, err)</span><br><span class="line">&#125;</span><br><span class="line">sched &#x3D; sc</span><br></pre></td></tr></table></figure><blockquote><p><code>pkg/scheduler/factory.go#createFromProvider()</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func (c *Configurator) createFromProvider(providerName string) (*Scheduler, error) &#123;</span><br><span class="line">klog.V(2).Infof(&quot;Creating scheduler from algorithm provider &#39;%v&#39;&quot;, providerName)</span><br><span class="line">    &#x2F;&#x2F; NewRegistry() 会调用getDefaultConfig 获取默认调度算法并将其注册</span><br><span class="line">r :&#x3D; algorithmprovider.NewRegistry()</span><br><span class="line">defaultPlugins, exist :&#x3D; r[providerName]</span><br><span class="line">if !exist &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;algorithm provider %q is not registered&quot;, providerName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i :&#x3D; range c.profiles &#123;</span><br><span class="line">prof :&#x3D; &amp;c.profiles[i]</span><br><span class="line">plugins :&#x3D; &amp;schedulerapi.Plugins&#123;&#125;</span><br><span class="line">plugins.Append(defaultPlugins)</span><br><span class="line">plugins.Apply(prof.Plugins)</span><br><span class="line">prof.Plugins &#x3D; plugins</span><br><span class="line">&#125;</span><br><span class="line">return c.create()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>pkg/scheduler/algorithmprovider/registry.go#getDefaultConfig()</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">func getDefaultConfig() *schedulerapi.Plugins &#123;</span><br><span class="line">return &amp;schedulerapi.Plugins&#123;</span><br><span class="line">QueueSort: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: queuesort.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">PreFilter: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: noderesources.FitName&#125;,</span><br><span class="line">&#123;Name: nodeports.Name&#125;,</span><br><span class="line">&#123;Name: podtopologyspread.Name&#125;,</span><br><span class="line">&#123;Name: interpodaffinity.Name&#125;,</span><br><span class="line">&#123;Name: volumebinding.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Filter: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: nodeunschedulable.Name&#125;,</span><br><span class="line">&#123;Name: noderesources.FitName&#125;,</span><br><span class="line">&#123;Name: nodename.Name&#125;,</span><br><span class="line">&#123;Name: nodeports.Name&#125;,</span><br><span class="line">&#123;Name: nodeaffinity.Name&#125;,</span><br><span class="line">&#123;Name: volumerestrictions.Name&#125;,</span><br><span class="line">&#123;Name: tainttoleration.Name&#125;,</span><br><span class="line">&#123;Name: nodevolumelimits.EBSName&#125;,</span><br><span class="line">&#123;Name: nodevolumelimits.GCEPDName&#125;,</span><br><span class="line">&#123;Name: nodevolumelimits.CSIName&#125;,</span><br><span class="line">&#123;Name: nodevolumelimits.AzureDiskName&#125;,</span><br><span class="line">&#123;Name: volumebinding.Name&#125;,</span><br><span class="line">&#123;Name: volumezone.Name&#125;,</span><br><span class="line">&#123;Name: podtopologyspread.Name&#125;,</span><br><span class="line">&#123;Name: interpodaffinity.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">PostFilter: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: defaultpreemption.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">PreScore: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: interpodaffinity.Name&#125;,</span><br><span class="line">&#123;Name: podtopologyspread.Name&#125;,</span><br><span class="line">&#123;Name: tainttoleration.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Score: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: noderesources.BalancedAllocationName, Weight: 1&#125;,</span><br><span class="line">&#123;Name: imagelocality.Name, Weight: 1&#125;,</span><br><span class="line">&#123;Name: interpodaffinity.Name, Weight: 1&#125;,</span><br><span class="line">&#123;Name: noderesources.LeastAllocatedName, Weight: 1&#125;,</span><br><span class="line">&#123;Name: nodeaffinity.Name, Weight: 1&#125;,</span><br><span class="line">&#123;Name: nodepreferavoidpods.Name, Weight: 10000&#125;,</span><br><span class="line">&#x2F;&#x2F; Weight is doubled because:</span><br><span class="line">&#x2F;&#x2F; - This is a score coming from user preference.</span><br><span class="line">&#x2F;&#x2F; - It makes its signal comparable to NodeResourcesLeastAllocated.</span><br><span class="line">&#123;Name: podtopologyspread.Name, Weight: 2&#125;,</span><br><span class="line">&#123;Name: tainttoleration.Name, Weight: 1&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Reserve: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: volumebinding.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">PreBind: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: volumebinding.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">Bind: &amp;schedulerapi.PluginSet&#123;</span><br><span class="line">Enabled: []schedulerapi.Plugin&#123;</span><br><span class="line">&#123;Name: defaultbinder.Name&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Run"><a href="#Run" class="headerlink" title="Run"></a><code>Run</code></h1><p>默认参数定义在<code>k8s.io/kubernetes/pkg/scheduler/apis/config/v1alpha1/defaults.go</code>，通过执行<code>run</code>方法启动主逻辑。<br><code>Run</code>方法主要做了以下工作：</p><ul><li>初始化 scheduler 对象</li><li>启动 kube-scheduler server，kube-scheduler 监听 10251 和 10259 端口，10251 端口不需要认证，可以获取 healthz metrics 等信息，10259 为安全端口，需要认证</li><li>启动所有的 informer</li><li>执行 <code>sched.Run()</code> 方法，执行主调度逻辑<blockquote><p><code>kubernetes/cmd/kube-scheduler/app/server.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Run 主逻辑</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">if cz, err :&#x3D; configz.New(&quot;componentconfig&quot;); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">cz.Set(cc.ComponentConfig)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return fmt.Errorf(&quot;unable to register configz: %s&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 事件广播准备</span><br><span class="line">cc.EventBroadcaster.StartRecordingToSink(ctx.Done())</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 配置健康检查</span><br><span class="line">var checks []healthz.HealthChecker</span><br><span class="line">if cc.ComponentConfig.LeaderElection.LeaderElect &#123;</span><br><span class="line">checks &#x3D; append(checks, cc.LeaderElection.WatchDog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动健康检查服务</span><br><span class="line">if cc.InsecureServing !&#x3D; nil &#123;</span><br><span class="line">separateMetrics :&#x3D; cc.InsecureMetricsServing !&#x3D; nil</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, separateMetrics, checks...), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start healthz server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.InsecureMetricsServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newMetricsHandler(&amp;cc.ComponentConfig), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureMetricsServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start metrics server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.SecureServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, false, checks...), cc.Authentication.Authenticator, cc.Authorization.Authorizer)</span><br><span class="line">&#x2F;&#x2F; TODO: handle stoppedCh returned by c.SecureServing.Serve</span><br><span class="line">if _, err :&#x3D; cc.SecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">&#x2F;&#x2F; fail early for secure handlers, removing the old error loop from above</span><br><span class="line">return fmt.Errorf(&quot;failed to start secure server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 启动所有的Informer</span><br><span class="line">go cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">cc.InformerFactory.Start(ctx.Done())</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调度之前等待缓存同步</span><br><span class="line">cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果开启了 leader 选取开关，进行 leader 选举</span><br><span class="line">if cc.LeaderElection !&#x3D; nil &#123;</span><br><span class="line">cc.LeaderElection.Callbacks &#x3D; leaderelection.LeaderCallbacks&#123;</span><br><span class="line">OnStartedLeading: sched.Run,</span><br><span class="line">OnStoppedLeading: func() &#123;</span><br><span class="line">klog.Fatalf(&quot;leaderelection lost&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">leaderElector, err :&#x3D; leaderelection.NewLeaderElector(*cc.LeaderElection)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;couldn&#39;t create leader elector: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leaderElector.Run(ctx)</span><br><span class="line"></span><br><span class="line">return fmt.Errorf(&quot;lost lease&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 执行 run 方法</span><br><span class="line">sched.Run(ctx)</span><br><span class="line">return fmt.Errorf(&quot;finished without leader elect&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 kube-scheduler 设计</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/kube-scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/tags/kube-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes之Gang scheduling</title>
    <link href="http://kiragoo.github.com/archives/3eaa0b02.html"/>
    <id>http://kiragoo.github.com/archives/3eaa0b02.html</id>
    <published>2021-04-16T06:21:11.000Z</published>
    <updated>2021-04-26T02:17:06.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇为<a href="https://docs.google.com/document/d/1AUwcvTtULNvow5M9e428FnlvINO1uQ7ojRoTGuTp4DA">《Gang scheduling in Kubernetes》</a>文档翻译，<strong>个人翻译</strong>。</p></blockquote><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p><code>Kubernetes</code>目前已经成为主流的容器平台编排方案，在服务与存储层面已经取得成功性的大规模应用了，并且原生<code>k8s</code>支持<code>Spark</code>。同时社区也在致力于将<code>ML</code>机器学习框架运行在<code>k8s</code>之上，比如<a href="https://github.com/kubeflow/tf-operator">kubeflow/tf-operator</a>,在整合<a href="https://github.com/kubernetes-incubator/kube-arbitrator"><code>kube-arbitrator</code></a>期间，我们发现以下需求合并到<code>default-scheduling</code>是更好的措施。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><del><code>Gang Scheduling</code>:任务实例要么全部或全部不执行。如果没有足够的资源来调度所有的<code>pod</code>，那么改任务包含的<code>pod</code>一个都不被调度，即<code>All-or-none</code>模式。如果任务中有任何的<code>pod</code>运行失败或未被调度，那么所有的<code>pod</code>必须能够优雅的终止退出</del></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>以<code>pod group</code>的方式调度<code>pod</code>，<code>all-or-nothing</code>模式(<code>TensorFlow</code>,<code>MPI</code>)<br>最初的需求来自于<code>TesnsorFlow</code>(以及<code>MPI</code>):运行<code>Tensorflow/MPI</code>任务，一个任务重的所有<code>task</code>单元必须保证能够一起启动，否则不启动其中任何一个<code>task</code>。如果资源充足到满足运行所有的<code>task</code>那么一切运行正常，但是在绝大部分情况下，尤其是在不具备任何保障的环境下，这种理想环境是不存在的。最坏的场景是由于”资源死锁”导致所有的任务都处于<code>pending</code>状态：每个任务只启动了部分<code>task</code>，该任务还在等他其他的<code>task</code>启动运行。此种问题在联邦域或者跨域场景下会变的更加糟糕，具体细节可详见<img src="https://link.springer.com/article/10.1007/s00354-007-0024-6" alt="`VJM part`文献"></li><li>以<code>pod group</code>的方式调度<code>pod</code>，最小满足模式(<code>Spark</code>)<br>与<code>Tensorflow/MPI</code>不同的是，<code>Spark</code>不需要所有的<code>task(driver/executors)</code>都启动：<code>driver</code>是必要的，但是对于<code>excutors</code>来说是多多益善的（但是至少得有一个）。在此场景下，必须要求<code>scheduler</code>能够保障“最小可用资源”（<code>gang-scheduling</code>），另外其他<code>task</code>还是能够以默认调度策略进行调度。</li><li>同一个<code>pod group</code>中支持不同<code>pod</code>模板（<code>Tensorflow/Spark/PMI</code>）。对于<code>Tensorflow/Spark</code>任务，<code>tasks</code>的镜像可能会不同。例如<a href="https://github.com/kubeflow/tf-operator/blob/master/tf_job_design_doc.md#tfjob-resource"><code>in tensorflow job</code></a>,<code>master</code>和<code>worker</code>就使用不同的镜像。<code>spark</code>下的场景也类似，<code>driver</code>和<code>executor</code>也可能不尽相同。这种情况下就要求<code>k8s</code>在<code>gang-scheduling</code>调度模式中能够在同一<code>pod group </code>中根据不同的<code>pod</code>模板做出相应调度。</li></ol><p><strong>PS</strong>：目前来说，<em>Spark on Kubernetes</em>首先启动运行<code>driver</code>，然后<code>driver</code>再启动其对应的<code>executors</code>，相关的讨论细节请详见<img src="https://docs.google.com/document/d/1AUwcvTtULNvow5M9e428FnlvINO1uQ7ojRoTGuTp4DA/edit#heading=h.nqxvofdllnx0" alt="Customized Controller"><br>4. <code>pod group</code>支持<code>pod</code>顺序/优先级启动（<code>Spark</code>）<br>由于#2（<code>min availiable != desire</code>），#3（不同的<code>tasks</code>），<code>tasks</code>必须按序启动。拿<code>Spark</code>举例，<code>minAvailable=2</code>，<code>desire=4</code>（其中包括<code>driver</code>）。如果没有足够的资源去运行所有的4个<code>tasks</code>，<code>scheduler</code>能够确保<code>driver</code>以及其对应的一个<code>executor</code>能够启动运行，而不是两个<code>exectors</code>（<code>minAvaiable=2</code>）<br>5. 对其他特性具备可扩展性，<code>e.g. IndexedJob(MPI)</code><br><code>gang-scheduling</code>能够满足不少工作场景，但是对于某些场景来说还不够完善，比如<code>MPI</code><img src="https://github.com/kubernetes/kubernetes/issues/14188" alt="#14188">。这就要求<code>gang-scheduling</code>对于一些特性的场景具备可扩展性。</p><h2 id="开放问-答"><a href="#开放问-答" class="headerlink" title="开放问/答"></a>开放问/答</h2><ol><li><code>gang-scheduling</code>只支持<code>batch</code>工作需求？<br>答案是不，尽管大多数<code>batch</code>工作需求是需要这样的特性，但是对于<code>scheduler</code>来说，<code>gang-scheduling</code>是一种“捆绑式，<code>all-or-nothing</code>模式”，<code>scheduler</code>并不清楚<code>pod</code>中运行的是啥。<code>gang-scheduler</code>必须具备其他特性以支持除<code>batch</code>工作需求的其他场景。</li><li><code>gang-scheduling</code>如何支持其他框架，比如<code>Flink</code>，<code>Storm</code>？<br><code>[k82cn]</code>：我更倾向在资源规划阶段利用好资源可规划的这个阶段来达到<code>scheduler</code>对这些框架的支持，资源规划其实是一个必不可少的共性阶段，在此之后提供给用户可配置能力来自定义使用。<code>e.g.</code><img src="https://github.com/kubeflow/tf-operator" alt="kubeflow/tf-operator"> (一种可自定义的<code>tensorflow</code>控制器)<br><del>1. <code>gang-scheduling</code>：任务中的<code>pods</code>将不会启动，除非有足够的资源满足</del><br><del>2. <code>job group</code>：框架（<code>e.g. TensorFlow,Spark</code>）需要一组<code>jobs</code>共同工作才能保证正常运行，比如<code>Spark</code>中的<code>driver</code>和<code>worker</code>，<code>TensorFlow</code>中的<code>master</code>和<code>workers</code></del><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2></li><li>定义管理或者调度批量工作场景的方式.比如<code>ML</code></li><li>在默认调度器中支持<code>gang-scheduling</code><h2 id="Non-Goal"><a href="#Non-Goal" class="headerlink" title="Non-Goal"></a>Non-Goal</h2></li><li>通过<a href="https://github.com/kubernetes/community/pull/1629"><code>Application API Object</code></a>原生支持<code>job group</code><h1 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h1>默认调度器是在<code>Pod</code>级别进行调度。当声明了新的<code>Kind</code>，为了对<code>scheduler</code>无任何变化，就必须将<code>scheduler</code>从<code>controller-manager</code>解耦出来。对于批量任务处理，支持<code>Pods</code>（比如<code>Job vs Tasks</code>）之间的关系的特性又是必要的，<code>e.g. gang-shceduler</code>。如下的设计就是满足管理具备关联关系的<code>pods</code>，并且<code>gang-schedluing</code>能够工作其上。如下示例规范的定义的新的<code>Kind</code>:<code>QueueJob</code>就保证了能够管理<code>pods</code>之间关系。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">type QueueJob struct &#123;</span><br><span class="line">    metav1.TypeMeta</span><br><span class="line">    metav1.ObjectMeta</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; cron job 的行为定义包括 minAvailable.</span><br><span class="line">    Spec QueueJobSpec</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 当前QueueJob状态</span><br><span class="line">    Status QueueJobStatus</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">&#x2F;&#x2F; QueueJobSpec 描述 job 执行情况以及何时真正运行</span><br><span class="line">type QueueJobSpec struct &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义 QueueJob 的优先级。</span><br><span class="line">    &#x2F;&#x2F;&quot;system-node-critical&quot; 和 &quot;system-cluster-critical&quot;是最高的优先级。</span><br><span class="line">    &#x2F;&#x2F; 其他任何命名则必须创建一个用于此名称的PriorityClass 对象</span><br><span class="line">    &#x2F;&#x2F;如果未定义，那么QueueJob的优先级将是默认值,如果未提供默认值的话将会是0。</span><br><span class="line">    &#x2F;&#x2F; +optional</span><br><span class="line">    PriorityClassName string</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 优先级属性值。许多时候系统组件通过此属性来发现QueueJob的优先级。</span><br><span class="line">    &#x2F;&#x2F; 开启优先级准入接入特性之后，它将阻止用户配置此属性，准入控制器将使用PriorityClassName来配置此属性。</span><br><span class="line">    &#x2F;&#x2F; 参数值越大优先级越高</span><br><span class="line">    &#x2F;&#x2F; +optional</span><br><span class="line">    Priority *int32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 期望副本数</span><br><span class="line">    Replicas int32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 可运行状态最少Pod数， 默认为nil.</span><br><span class="line">    MinAvailable *int32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Pods控制器，如下合法属性值:</span><br><span class="line">    &#x2F;&#x2F;   k8s；</span><br><span class="line">    &#x2F;&#x2F;   customized</span><br><span class="line">    Controller string</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; pod描述模板</span><br><span class="line">    Template PodTemplateSpec</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; QueueJobStatus represents the current state of a QueueJob.</span><br><span class="line">type QueueJobStatus struct &#123;</span><br><span class="line">    &#x2F;&#x2F; The number of actively running pods.</span><br><span class="line">    &#x2F;&#x2F; +optional</span><br><span class="line">    Running int32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The number of pods which reached phase Succeeded.</span><br><span class="line">    &#x2F;&#x2F; +optional</span><br><span class="line">    Succeeded int32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The number of pods which reached phase Failed.</span><br><span class="line">    &#x2F;&#x2F; +optional</span><br><span class="line">    Failed int32</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; The minimal available pods to run for this QueueJob</span><br><span class="line">    &#x2F;&#x2F; +optional</span><br><span class="line">    MinAvailable int32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p><strong>开放讨论</strong>：</p><hr><h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a><code>Scheduler</code></h2><p>默认调度器也会对<code>QueueJob</code>进行监控，根据<code>OwnerReference</code>和<code>selector</code>在调度器的<code>pending</code>缓存中“填入”<code>Pods</code>。由于<code>QueueJob</code>中的<code>pods</code>是被批量调度的，存入<code>pending queue</code>的是<code>QueueJob</code>而不是其中的<code>pods</code>。<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/gang-quque.png" alt="Queue"></p><blockquote><p><strong>开放讨论</strong>：</p><ol><li>一种选择是使用不同的<code>queue</code>去存放不同的<code>QueueJob</code>，<code>scheduler</code>则必须根据资源使用情况进行速率处理</li><li>另一种选择是在 <code>multi-scheduler feature</code>中构建一个单独的库来实现此特性。</li></ol></blockquote><p>在<code>scheduler loop</code>中，<code>getNext</code>将获取下一个对象进行调度。<code>scheduleOne</code>和<code>scheduleBatch</code>分别作为调度<code>Pod</code>和<code>QueueJob</code>的使用依据。</p><h3 id="scheduleOne"><a href="#scheduleOne" class="headerlink" title="scheduleOne"></a><code>scheduleOne</code></h3><p>从<code>FIFO/PriQueue</code>中获取<code>pod</code>之后，<code>scheduler</code>将调用<code>scheduleOne</code>方法调度该<code>pod</code>。当选择主机节点时触发抢占式多任务处理，<code>scheduler</code>将尝试避免给<code>QueueJob</code>中的<code>pod</code>进行优先处理，类似于<code>PDB(PodDisruptionBudget)</code>。若<code>pod</code>被驱逐，<code>QueueJob</code>的控制器将管理器生命周期，比如<code>kill</code>掉整个的<code>QueueJob(for MPI)</code>,或者重新创建那些被<code>kill</code>掉的<code>pods</code>以便再次调度(<code>for Spark</code>)。</p><h3 id="scheduleBatch"><a href="#scheduleBatch" class="headerlink" title="scheduleBatch"></a>scheduleBatch</h3><p>如果一个<code>QueueJob</code>从<code>FIFO/PriQueue</code>中获取，其中的<code>pdos</code>将执行<code>scheduleBatch</code>进行批量处理，辅助方法将对<code>QueueJob</code>进行调度。<code>scheduleBatch</code>也拥有三个主要阶段：<br>选取主机节点，#TODO「assume」,绑定。</p><h4 id="选取主机节点"><a href="#选取主机节点" class="headerlink" title="选取主机节点"></a>选取主机节点</h4><p>在此阶段，<code>scheduler</code>将为批量任务中的<code>pods</code>选择匹配<code>QueueJob</code>中<code>.spec.minAvailable</code>属性要求的节点。<code>Running</code>和<code>Pending</code>状态的<code>pods</code>数量都被统计作为<code>.spec.minAvailable</code>的考量。</p><ul><li><p><code>pods</code>总数 &lt; <code>.spec.minAvailable</code><br>根据<code>ResourceQuota</code>，<code>QueueJobController</code>也许不会创建足够的(<code>.spec.minAvailable</code>)<code>pods</code>。该<code>QueueJob</code>会被记录在<code>backlog</code>中直到足够的<code>pods</code>被创建。</p></li><li><p>运行状态的<code>pods</code> &lt; <code>.spec.minAvailable</code><br>如果<code>QueueJob</code>内没有足够的<code>running</code>状态的<code>pods</code>（包括#TODO「assumed」但没有启动的），<code>scheduler</code>将尝试批量调度<code>.spec.minAvailable-Running pods</code>数量的<code>pods</code>：<br>  a. 调用调度算法来为每个<code>pod</code>获取<code>distHost</code>，如果获取<code>distHost</code>失败，<code>scheduler</code>将会尝试选择一个<code>pod</code>进行抢占式调度，#TODO the pod eviction will be triggered in batch until all pods got distHost or preemption candidate<br>  b. 如果所有的<code>pods</code>都获取到<code>distHost</code>,将继续批量的将这些<code>pods</code>绑定。<br>  c. 否则，遗忘它们。</p></li><li><p><code>Running pods</code> &gt; <code>.spec.minAvailable</code><br>如果<code>QueueJob</code>已经有足够的<code>running pods</code>，那些<code>pending</code>状态的<code>pods</code>将会一个个的被调度。如果支持<code>QueueJob</code>抢占式调度的话则会调用<code>scheduleOne</code>方法。</p></li></ul><p>总之，当调度<code>pod</code>失败，<code>pods</code>的状况将会被更新.<code>QueueJob</code>对应的控制器也将会管理<code>QueueJob</code>的生命周期。</p><h5 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h5><p><code>gang-scheduling</code>支持<code>QueueJob</code>级别的抢占式调度。在选取主机节点的阶段，如果无法将<code>pod</code>调度到主机节点上，那么<code>scheduler</code>将会尝试选取某个<code>pod</code>进行抢占式调度。<code>schedule</code>将不会触发驱逐直到所有的<code>pod</code>获得<code>disHost</code>或者具备优先抢占的“权利”。如果抢占式候选者不为空，则会批量的对<code>pod</code>进行驱逐，同时#TODO「en-queue the QueueJob」。<br>在下个<code>scheduling loop</code>时，<code>QueueJob</code>将会被调度。<br>    * 如果驱逐失败了，当再次调度<code>QueueJob</code>时，<code>scheduler</code>将会再次触发对<code>pod</code>的驱逐。<br>    * <code>scheduler</code>不会绑定<code>QueueJob</code>的<code>pods</code>除非所有的<code>pods</code>已经终止退出了，同时原本那些被<code>pod</code>抢占的资源将会被释放，以供待调度的<code>QueueJob</code>使用。只有优先级较高的<code>pod</code>才能够使用空闲资源，并且触发<code>QueueJob</code>抢占式调度。</p><h5 id="资源“饥饿”vs空闲"><a href="#资源“饥饿”vs空闲" class="headerlink" title="资源“饥饿”vs空闲"></a>资源“饥饿”<code>vs</code>空闲</h5><p>由于<code>QueueJob</code>是批量的关联多个<code>pods</code>，达到<code>QueueJob</code>对资源需求“满意”是常见的场景需求，常见的两种如下：</p><ul><li>保持资源空闲除非搞优先级的<code>QueueJbo</code>获得足够的资源</li><li>“回填”对于以及满足它们资源的那些低优先级/同等优先级的<code>QueueJob</code></li></ul><h3 id="假想"><a href="#假想" class="headerlink" title="假想"></a>假想</h3><p>在选取主机节点阶段，<code>scheduler</code>将假设<code>pod</code>已经获取到<code>distHost</code>或者成为优先候选者。如若发生错误异常，将忽略<code>pods</code>包括那些<code>QueueJob</code>中已经被消费调度的。<code>pods</code>的状态也会得到及时的更新。</p><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>过了“消费”<code>pods</code>阶段，<code>pods</code>已经具备被绑定的前提。<code>pod</code>将会被一个个的被绑定。如果其中任何一个失败了，<code>scheduler</code>会及时更新<code>pod</code>状态,会取消之后涉及到的<code>pod</code>的绑定不包括已经完成绑定了的。剩下的工作就是<code>QueueJob Controller</code>去管理它们的生命周期了，比如 对于<code>MPI</code>任务来说，就是<code>kill</code>掉整个的<code>QueueJob</code>,而对于<code>Spark</code>任务来说仅仅是重新创建那些失败的<code>worker pod</code>。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a><code>Controller</code></h2><h3 id="QueueJobController"><a href="#QueueJobController" class="headerlink" title="QueueJobController"></a><code>QueueJobController</code></h3><p>如若<code>.spec.Controller</code>声明为<code>k8s</code>，那么<code>QueueJobController</code>将会按如下管理<code>QueueJob</code>的生命周期：<br><strong><code>Pod/QueueJob</code>创建</strong><br><code>QueueJobController</code>会创建<code>pods</code>达到<code>.spec.minAvailable</code>的数量，并等待<code>kube-scheduler</code>批量的将这些<code>pods</code>进行调度。</p><p>#TODO<br>#待继续更新</p>]]></content>
    
    
    <summary type="html">kubernetes 之 Gang scheduling</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="调度" scheme="http://kiragoo.github.com/categories/kubernetes/%E8%B0%83%E5%BA%A6/"/>
    
    <category term="Gang scheduling" scheme="http://kiragoo.github.com/categories/kubernetes/%E8%B0%83%E5%BA%A6/Gang-scheduling/"/>
    
    <category term="翻译" scheme="http://kiragoo.github.com/categories/kubernetes/%E8%B0%83%E5%BA%A6/Gang-scheduling/%E7%BF%BB%E8%AF%91/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="调度" scheme="http://kiragoo.github.com/tags/%E8%B0%83%E5%BA%A6/"/>
    
    <category term="Gang scheduling" scheme="http://kiragoo.github.com/tags/Gang-scheduling/"/>
    
  </entry>
  
  <entry>
    <title>git无法添加空的文件夹</title>
    <link href="http://kiragoo.github.com/archives/c6fb67e0.html"/>
    <id>http://kiragoo.github.com/archives/c6fb67e0.html</id>
    <published>2021-04-15T15:55:07.000Z</published>
    <updated>2021-04-16T04:47:07.198Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算用<code>gitee</code>和<code>PigGO</code>结合起来做个私有的图床，因为之前一直用的微博的插件去上传图片到图床然后引用<code>URL</code>，但是始终感觉毕竟不是自己可控的那天说不定没用了，那么我的图片就都没了，本来考虑用<code>github</code>来托管我的图片的，但是考虑到“墙”的问题 ，国内访问会抽风，所以就打算用<code>gitee</code>和<code>PigGO</code>来构建自己私有的图床了，那么也就引发了此次的问题。</p><hr><p><strong>新克隆的<code>git</code>仓库无法添加空文件目录</strong>，这里出现空的文件目录是因为我想在图床仓库中建多个<code>path</code>，这个<code>path</code>中的内容专门给我的博客使用，其他的<code>path</code>后续再看情况使用。</p><h1 id="诡异的问题"><a href="#诡异的问题" class="headerlink" title="诡异的问题"></a>诡异的问题</h1><p><code>git add dir-xx</code> 之后缓存区没有任何内容 ，而且也没有任何异常报错，老实说这是最懵的状态，无从下手，最后还是借助强大的搜索解决.<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/20210416002304.png" alt="描述"><br><a href="https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F">Can I add empty directories?</a></p><p>好吧，那我就在我的新建的文件夹中加个<code>.gitkeep</code>文件吧，至此问题解决。</p>]]></content>
    
    
    <summary type="html">克隆后的仓库中添加空目录无效</summary>
    
    
    
    <category term="工具" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="git" scheme="http://kiragoo.github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>本地配置多个git-ssh公钥</title>
    <link href="http://kiragoo.github.com/archives/f815397.html"/>
    <id>http://kiragoo.github.com/archives/f815397.html</id>
    <published>2021-04-15T15:02:11.000Z</published>
    <updated>2021-04-16T04:47:07.202Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说我们都会存在至少两个代码仓库，为了实现<code>ssh clone</code>的话，我们需要配置多个<code>ssh</code>公钥，但是默认情况下<code>git</code>只会从<code>.ssh/id_rsa</code>读取配置。</p><p>比如我自己，我一般会存在三个代码仓库，<code>gitee</code>，<code>github</code>，以及公司的私有仓库，那么就会触发我现在的这个问题。</p><hr><h1 id="生成多个ssh密钥"><a href="#生成多个ssh密钥" class="headerlink" title="生成多个ssh密钥"></a>生成多个<code>ssh</code>密钥</h1><p>一般情况下，<code>github</code>是我用的最多的，我会将默认的指定到<code>github</code>，默认不需要配置。那么对于<code>gitee</code>以及公司的代码仓库就需要配置了，这里我拿<code>gitee</code>举例。</p><h2 id="生成gitee密钥"><a href="#生成gitee密钥" class="headerlink" title="生成gitee密钥"></a>生成<code>gitee</code>密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 命名最好有辨识度，这里需要指定下文件，不然会以默认文件命名将已经生成的默认的.ssh&#x2F;id_rsa 进行覆盖了</span><br><span class="line">ssh-keygen -t rsa -f ~&#x2F;.ssh&#x2F;gitee_id_rsa -C &quot;xxxxx&quot;</span><br><span class="line"># 后续的操作就是疯狂的摁回车了</span><br></pre></td></tr></table></figure><h2 id="识别新的ssh-key密钥"><a href="#识别新的ssh-key密钥" class="headerlink" title="识别新的ssh key密钥"></a>识别新的<code>ssh key</code>密钥</h2><p>我们需要将新的密钥加入到<code>ssh agent</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~&#x2F;.ssh&#x2F;gitee_id_rsa</span><br></pre></td></tr></table></figure><h2 id="多账号配置config文件"><a href="#多账号配置config文件" class="headerlink" title="多账号配置config文件"></a>多账号配置<code>config</code>文件</h2><p>在<code>~/.ssh/config</code>文件中加入配置指定仓库的认证文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">    Port 22</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;gitee_id_rsa</span><br></pre></td></tr></table></figure><h2 id="仓库配置ssh-key"><a href="#仓库配置ssh-key" class="headerlink" title="仓库配置ssh key"></a>仓库配置<code>ssh key</code></h2><p>将<code>.ssh/gitee_id_rsa.pub</code>中的内容粘贴到仓库对应的<code>ssh key</code>配置中</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我自己测试了下，具体结果如下，测试成功，剩下的就是愉快的通过<code>ssh</code>的方式克隆仓库代码了。<br><img src="http://tva4.sinaimg.cn/wap800/7a56748fgy1gpkuj7yv7rj219o05a0u6.jpg" alt="测试"> </p>]]></content>
    
    
    <summary type="html">本地生成多个ssh公钥并进行配置</summary>
    
    
    
    <category term="工具" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="git" scheme="http://kiragoo.github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码分析系列之Informer机制初探-1</title>
    <link href="http://kiragoo.github.com/archives/3959e77d.html"/>
    <id>http://kiragoo.github.com/archives/3959e77d.html</id>
    <published>2021-04-14T03:41:49.000Z</published>
    <updated>2021-04-16T04:47:07.203Z</updated>
    
    <content type="html"><![CDATA[<p>此篇虽然为<code>Informer</code>机制，实际上还是和上篇<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-2/">kubernetes源码分析系列之kube-scheduler-2</a>有很大关系的，可以说也是<code>kube-scheduler</code>调度的<strong>驱动事件</strong>。</p><p>在整理的时候由于整个调用之间还是有很多细节的，首先还是先放上流程组织关系图，有个大概的认知。<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fly1gpkn4ym0g1j20t30q40vd.jpg" alt="Informer流程图"><br>对应的高清大图已经上传到本人仓库<a href="https://github.com/kiragoo/golang-coding/blob/master/k8s/img/inforer%E6%B5%81%E7%A8%8B%E5%9B%BE.jpeg">图片链接</a><br>类图关系如下：<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fly1gpknyybt09j216a0wcn0u.jpg" alt="Informer类图关系"><br><a href="https://github.com/kiragoo/golang-coding/blob/master/k8s/img/informer%E7%B1%BB%E5%9B%BE.jpeg">仓库地址</a></p><p>发生<code>Pod</code>调度分配资源，必然是存在一个事件触发调度，那么<code>Informer</code>就是充当这样的角色。<br>具体代码入口<code>cmd/kube-scheduler/app/server.go</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &#x2F;&#x2F; 通过 &#96;goroutine&#96; 开始了所有的&#96;informers&#96;</span><br><span class="line">&#x2F;&#x2F; Start all informers.</span><br><span class="line">go cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">cc.InformerFactory.Start(ctx.Done())</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Wait for all caches to sync before scheduling.</span><br><span class="line">cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br></pre></td></tr></table></figure><p>下面进入正文，开始<code>Informer</code>分析之旅.<br><strong>以下分析默认包路径为<code>client-go</code></strong></p><hr><blockquote><p>先贴上官方<code>client-go</code>的架构图,其中黄色部分为<code>controller</code>部分，可以暂时忽略。<br><img src="http://tva1.sinaimg.cn/wap800/7a56748fly1gpjn86m8a0j20te0m2diu.jpg" alt="client-go架构图"></p></blockquote><h1 id="Demo入口"><a href="#Demo入口" class="headerlink" title="Demo入口"></a><code>Demo</code>入口</h1><p>借助<code>client-go</code>完成入口<code>demo</code>的编写<br><img src="http://tvax2.sinaimg.cn/wap800/7a56748fly1gpj69erya4j207l05gt8q.jpg" alt="目录结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">cfg, err :&#x3D; clientcmd.BuildConfigFromFlags(&quot;&quot;, &quot;&#x2F;xxx&#x2F;config&quot;)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F; 构建 &#96;clientset&#96; 对象，因为&#96;Informer&#96;需要通过&#96;ClientSet&#96;与&#96;Kubernertes API Server&#96;进行交互。</span><br><span class="line">clientset, err :&#x3D; kubernetes.NewForConfig(cfg)</span><br><span class="line"></span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F;创建&#96;stopCh&#96;对象用于在程序进程退出之前通知&#96;Informer&#96;提前退出，这是因为&#96;Informer&#96;是一个持久运行的&#96;goroutine&#96;。</span><br><span class="line">stopCh :&#x3D; make(chan struct&#123;&#125;)</span><br><span class="line"></span><br><span class="line">defer close(stopCh)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实例化&#96;SharedInformer&#96;对象@NewSharedInformerFactory</span><br><span class="line">sharedInformers :&#x3D; informers.NewSharedInformerFactory(clientset, time.Minute)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 示例主要针对的是&#96;Pod&#96;资源的&#96;Informer&#96;对象。通过实现回调函数来实现具体的逻辑，这里主要是作为演示使用@Informer</span><br><span class="line">informer :&#x3D; sharedInformers.Core().V1().Pods().Informer()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加informer事件回调函数的逻辑，这里只做演示</span><br><span class="line">informer.AddEventHandler(cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">AddFunc: func(obj interface&#123;&#125;) &#123;</span><br><span class="line">mObj :&#x3D; obj.(v1.Object)</span><br><span class="line">log.Printf(&quot;New Pod Added to Store: %s&quot;, mObj.GetName())</span><br><span class="line">&#125;,</span><br><span class="line">UpdateFunc: func(oldObj, newObj interface&#123;&#125;) &#123;</span><br><span class="line">oObj :&#x3D; oldObj.(v1.Object)</span><br><span class="line">nObj :&#x3D; newObj.(v1.Object)</span><br><span class="line">log.Printf(&quot;%s Pod updated to %s&quot;, oObj.GetName(), nObj.GetName())</span><br><span class="line">&#125;,</span><br><span class="line">DeleteFunc: func(obj interface&#123;&#125;) &#123;</span><br><span class="line">mObj :&#x3D; obj.(v1.Object)</span><br><span class="line">log.Printf(&quot;Pod Deleted from Store; %s&quot;, mObj.GetName())</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; @Run</span><br><span class="line">informer.Run(stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功运行之后我们会看到如下日志输出：<br><img src="http://tvax4.sinaimg.cn/wap800/7a56748fly1gpj6ijmomxj20qa06habj.jpg" alt="日志"></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><hr><h2 id="NewSharedInformerFactory"><a href="#NewSharedInformerFactory" class="headerlink" title="NewSharedInformerFactory"></a><code>NewSharedInformerFactory</code></h2><blockquote><p><code>informers/factory.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 构建 sharedInformerFactory 实例</span><br><span class="line">func NewSharedInformerFactory(client kubernetes.Interface, defaultResync time.Duration) SharedInformerFactory &#123;</span><br><span class="line">return NewSharedInformerFactoryWithOptions(client, defaultResync)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据额外的 options 构造 SharedInformerFactory 实例</span><br><span class="line">func NewSharedInformerFactoryWithOptions(client kubernetes.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory &#123;</span><br><span class="line">&#x2F;&#x2F; 初始化sharedInformerFactory @sharedInformerFactory</span><br><span class="line">factory :&#x3D; &amp;sharedInformerFactory&#123;</span><br><span class="line">client:           client,</span><br><span class="line">namespace:        v1.NamespaceAll,</span><br><span class="line">defaultResync:    defaultResync,</span><br><span class="line">&#x2F;&#x2F;@informers 初始化informers</span><br><span class="line">informers:        make(map[reflect.Type]cache.SharedIndexInformer),</span><br><span class="line">startedInformers: make(map[reflect.Type]bool),</span><br><span class="line">customResync:     make(map[reflect.Type]time.Duration),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Apply all options</span><br><span class="line">for _, opt :&#x3D; range options &#123;</span><br><span class="line">factory &#x3D; opt(factory)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return factory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Informers</code><blockquote><p><code>tools/cache/shared_informers.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在原有的 SharedInder 基础上扩展了 Index 的能力</span><br><span class="line">type SharedIndexInformer interface &#123;</span><br><span class="line">&#x2F;&#x2F;@SharedInformer</span><br><span class="line">SharedInformer</span><br><span class="line">&#x2F;&#x2F; AddIndexers add indexers to the informer before it starts.</span><br><span class="line">AddIndexers(indexers Indexers) error</span><br><span class="line">GetIndexer() Indexer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@SharedInformer</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type SharedInformer interface &#123;</span><br><span class="line">&#x2F;&#x2F; 在 shared informer中添加时间处理器，虽然事件是顺序性的传递给处理器，但是在不同的事件处理中并没有依赖关系 @AddEventHandler</span><br><span class="line">AddEventHandler(handler ResourceEventHandler)</span><br><span class="line">&#x2F;&#x2F; 在 resync 期间添加事件处理器，在 resync为0阶段，意味着该事件处理器并不关心 resyncs。resync操作包含对 informer本地缓存中的每个对象的handler一个更新的通知。即使在非0阶段，一些informer压根不做resync，#TODO</span><br><span class="line">AddEventHandlerWithResyncPeriod(handler ResourceEventHandler, resyncPeriod time.Duration)</span><br><span class="line">&#x2F;&#x2F; GetStore 将 informer 的本地缓存作为存储返回</span><br><span class="line">GetStore() Store</span><br><span class="line">&#x2F;&#x2F; GetController 已经废除，不再使用</span><br><span class="line">GetController() Controller</span><br><span class="line">&#x2F;&#x2F; Run 启动并运行 shared informer</span><br><span class="line">&#x2F;&#x2F; The informer will be stopped when stopCh is closed.</span><br><span class="line">Run(stopCh &lt;-chan struct&#123;&#125;)</span><br><span class="line">&#x2F;&#x2F; 当 shared informer发生至少一次全量的通知之后将返回true</span><br><span class="line">HasSynced() bool</span><br><span class="line">&#x2F;&#x2F; LastSyncResourceVersion 对此操作非线程安全</span><br><span class="line">LastSyncResourceVersion() string</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当 ListAndWatch 发生异常则触发此handler处理</span><br><span class="line">SetWatchErrorHandler(handler WatchErrorHandler) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@sharedInformerFactory</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type sharedInformerFactory struct &#123;</span><br><span class="line">client           kubernetes.Interface</span><br><span class="line">namespace        string</span><br><span class="line">tweakListOptions internalinterfaces.TweakListOptionsFunc</span><br><span class="line">lock             sync.Mutex</span><br><span class="line">defaultResync    time.Duration</span><br><span class="line">customResync     map[reflect.Type]time.Duration</span><br><span class="line">&#x2F;&#x2F; 存放于map中做初始化</span><br><span class="line">informers map[reflect.Type]cache.SharedIndexInformer</span><br><span class="line">&#x2F;&#x2F; startedInformers is used for tracking which informers have been started.</span><br><span class="line">&#x2F;&#x2F; This allows Start() to be called multiple times safely.</span><br><span class="line">startedInformers map[reflect.Type]bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Informer"><a href="#Informer" class="headerlink" title="@Informer"></a><code>@Informer</code></h2><blockquote><p><code>informers/core/v1/pod.go</code></p></blockquote><p>此示例代码为 <code>PodInformer</code><br>每个<code>kubernetes</code>资源上都实现了<code>Informer</code>机制，都实现了<code>Informer()</code>和<code>Lister()</code>方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; PodInformer provides access to a shared informer and lister for</span><br><span class="line">&#x2F;&#x2F; Pods.</span><br><span class="line">type PodInformer interface &#123;</span><br><span class="line">&#x2F;&#x2F; 具体还是为 SharedIndexInformer</span><br><span class="line">Informer() cache.SharedIndexInformer</span><br><span class="line">Lister() v1.PodLister</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看下其他资源实际上都实现了此两种方法：<br><img src="http://tva3.sinaimg.cn/wap800/7a56748fly1gpj8joxk2hj20wn0epgpf.jpg" alt="informer-defition"><br>调用不同的资源<code>informer</code>就如示例中代码一样<code>informer := sharedInformers.Core().V1().Pods().Informer()</code>定义不同资源的<code>Informer</code>允许监控不同资源的资源事件，然后通过实现回调函数执行对应的具体逻辑。</p><p><code>PodInformer.Informer()</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func (f *podInformer) Informer() cache.SharedIndexInformer &#123;</span><br><span class="line">&#x2F;&#x2F;@InformerFor</span><br><span class="line">return f.factory.InformerFor(&amp;corev1.Pod&#123;&#125;, f.defaultInformer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@InformerFor</code><blockquote><p><code>informers/factory.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; InternalInformerFor returns the SharedIndexInformer for obj using an internal</span><br><span class="line">&#x2F;&#x2F; client.</span><br><span class="line">func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer &#123;</span><br><span class="line">f.lock.Lock()</span><br><span class="line">defer f.lock.Unlock()</span><br><span class="line"></span><br><span class="line">informerType :&#x3D; reflect.TypeOf(obj)</span><br><span class="line">informer, exists :&#x3D; f.informers[informerType]</span><br><span class="line">if exists &#123;</span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resyncPeriod, exists :&#x3D; f.customResync[informerType]</span><br><span class="line">if !exists &#123;</span><br><span class="line">resyncPeriod &#x3D; f.defaultResync</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">informer &#x3D; newFunc(f.client, resyncPeriod)</span><br><span class="line">f.informers[informerType] &#x3D; informer</span><br><span class="line"></span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里可以看到最终完成了对于<code>informer</code>的创建，并且注册到了<code>Struct object</code>中，完成了对自己的<code>Informer</code>的注册。</li></ul><hr><h2 id="Run"><a href="#Run" class="headerlink" title="@Run"></a><code>@Run</code></h2><blockquote><p><code>client-go/tools/cache/shared_informer.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">func (s *sharedIndexInformer) Run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">&#x2F;&#x2F;只是捕获 crash 及 记录 error 日志</span><br><span class="line">defer utilruntime.HandleCrash()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;构造 DeltaFIFOOptions,然后它根据得到的 key 拆分函数和Store index 创建一个FIFO队列，这个队列是一个先进先出的队列，主要用来保存对象的各种事件。@NeDletaFIFOWithOptions</span><br><span class="line">fifo :&#x3D; NewDeltaFIFOWithOptions(DeltaFIFOOptions&#123;</span><br><span class="line">KnownObjects:          s.indexer,</span><br><span class="line">EmitDeltaTypeReplaced: true,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 构造Config,下面根据这个 config 来初始化 controller,这个 controller 是 client-go 中的 Cache controller，主要用来控制从APIServer 获得对象的 cache以及更新对象</span><br><span class="line">cfg :&#x3D; &amp;Config&#123;</span><br><span class="line">Queue:            fifo,</span><br><span class="line">ListerWatcher:    s.listerWatcher,</span><br><span class="line">ObjectType:       s.objectType,</span><br><span class="line">FullResyncPeriod: s.resyncCheckPeriod,</span><br><span class="line">RetryOnError:     false,</span><br><span class="line">ShouldResync:     s.processor.shouldResync,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; @HandleDeltas,通过 Process 处理Deltas 记录的事件</span><br><span class="line">Process:           s.HandleDeltas,</span><br><span class="line">WatchErrorHandler: s.watchErrorHandler,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">s.startedLock.Lock()</span><br><span class="line">defer s.startedLock.Unlock()</span><br><span class="line">&#x2F;&#x2F; 通过 cfg 来创建 controller</span><br><span class="line">&#x2F;&#x2F; @controller</span><br><span class="line">s.controller &#x3D; New(cfg)</span><br><span class="line">s.controller.(*controller).clock &#x3D; s.clock</span><br><span class="line">s.started &#x3D; true</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Separate stop channel because Processor should be stopped strictly after controller</span><br><span class="line">processorStopCh :&#x3D; make(chan struct&#123;&#125;)</span><br><span class="line">var wg wait.Group</span><br><span class="line">defer wg.Wait()              &#x2F;&#x2F; Wait for Processor to stop</span><br><span class="line">&#x2F;&#x2F; @s.cacheMutationDetector.Run</span><br><span class="line">defer close(processorStopCh) &#x2F;&#x2F; Tell Processor to stop</span><br><span class="line">wg.StartWithChannel(processorStopCh, s.cacheMutationDetector.Run)</span><br><span class="line">&#x2F;&#x2F;@s.processor.run 这边才是真正的Listering调用</span><br><span class="line">wg.StartWithChannel(processorStopCh, s.processor.run)</span><br><span class="line"></span><br><span class="line">defer func() &#123;</span><br><span class="line">s.startedLock.Lock()</span><br><span class="line">defer s.startedLock.Unlock()</span><br><span class="line">s.stopped &#x3D; true &#x2F;&#x2F; Don&#39;t want any new listeners</span><br><span class="line">&#125;()</span><br><span class="line">&#x2F;&#x2F; controller Run</span><br><span class="line">s.controller.Run(stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><code>@NewDletaFIFOWithOptions</code>实际的调用我们需要重点关注下，因为这边是存储各种资源对象的关键地方，根据得到的 <code>key</code>拆分函数和<code>Store index</code>构建<code>DeltaFIFO</code>，主要用来保存对象的各种事件。<blockquote><p><code>tools/cache/delta_fifo.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 返回一个处理其中元素的队列</span><br><span class="line">func NewDeltaFIFOWithOptions(opts DeltaFIFOOptions) *DeltaFIFO &#123;</span><br><span class="line">if opts.KeyFunction &#x3D;&#x3D; nil &#123;</span><br><span class="line">opts.KeyFunction &#x3D; MetaNamespaceKeyFunc</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@DeltaFIFO</span><br><span class="line">f :&#x3D; &amp;DeltaFIFO&#123;</span><br><span class="line">&#x2F;&#x2F; @Deltas 就是用 map 来存放数据</span><br><span class="line">items:        map[string]Deltas&#123;&#125;,</span><br><span class="line">queue:        []string&#123;&#125;,</span><br><span class="line">keyFunc:      opts.KeyFunction,</span><br><span class="line">knownObjects: opts.KnownObjects,</span><br><span class="line"></span><br><span class="line">emitDeltaTypeReplaced: opts.EmitDeltaTypeReplaced,</span><br><span class="line">&#125;</span><br><span class="line">f.cond.L &#x3D; &amp;f.lock</span><br><span class="line">return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@DeltaFIFO</code><br>对于DeltaFIFO的描述在文档上描述很是详细，关键点翻译如下：<blockquote><p>DeltaFIFO 类似 FIFO，但是在两方面存在不同。第一点是其中的<code>key</code>不是对象而是<code>Deltas</code>，实际上该对象的<code>Delta</code>组成的切片，第二点是<code>DeltaFIFO</code>增加了额外的两个方法：<code>Replaced</code>和<code>Sync</code><br><code>DeltaFIFO</code> 是个生产消费者模式的队列，其中<code>Reflector</code>作为生产者，而消费者是那些调用了<code>Pop()</code>方法的使用者。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type DeltaFIFO struct &#123;</span><br><span class="line">lock sync.RWMutex</span><br><span class="line">cond sync.Cond</span><br><span class="line">items map[string]Deltas</span><br><span class="line">queue []string</span><br><span class="line">populated bool</span><br><span class="line">initialPopulationCount int</span><br><span class="line">keyFunc KeyFunc</span><br><span class="line">knownObjects KeyListerGetter</span><br><span class="line">closed bool</span><br><span class="line">emitDeltaTypeReplaced bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Deltas</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Deltas []Delta</span><br><span class="line"></span><br><span class="line">type Delta struct&#123;</span><br><span class="line">TypeDletaType</span><br><span class="line">Object interface&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type DletaType string</span><br><span class="line"></span><br><span class="line">const &#123;</span><br><span class="line">Added   DeltaType &#x3D; &quot;Added&quot;</span><br><span class="line">Updated DeltaType &#x3D; &quot;Updated&quot;</span><br><span class="line">Deleted DeltaType &#x3D; &quot;Deleted&quot;</span><br><span class="line">Replaced DeltaType &#x3D; &quot;Replaced&quot;</span><br><span class="line">Sync DeltaType &#x3D; &quot;Sync&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><code>@HandleDeltas</code></p><blockquote><p><code>tools/cache/shared_informer.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">func (s *sharedIndexInformer) HandleDeltas(obj interface&#123;&#125;) error &#123;</span><br><span class="line">s.blockDeltas.Lock()</span><br><span class="line">defer s.blockDeltas.Unlock()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 遍历处理</span><br><span class="line">for _, d :&#x3D; range obj.(Deltas) &#123;</span><br><span class="line">&#x2F;&#x2F; 根据事件类型进行相关处理</span><br><span class="line">switch d.Type &#123;</span><br><span class="line">case Sync, Replaced, Added, Updated:</span><br><span class="line">s.cacheMutationDetector.AddObject(d.Object)</span><br><span class="line">if old, exists, err :&#x3D; s.indexer.Get(d.Object); err &#x3D;&#x3D; nil &amp;&amp; exists &#123;</span><br><span class="line">if err :&#x3D; s.indexer.Update(d.Object); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isSync :&#x3D; false</span><br><span class="line">switch &#123;</span><br><span class="line">case d.Type &#x3D;&#x3D; Sync:</span><br><span class="line">&#x2F;&#x2F; Sync events are only propagated to listeners that requested resync</span><br><span class="line">isSync &#x3D; true</span><br><span class="line">case d.Type &#x3D;&#x3D; Replaced:</span><br><span class="line">if accessor, err :&#x3D; meta.Accessor(d.Object); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">if oldAccessor, err :&#x3D; meta.Accessor(old); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">&#x2F;&#x2F; Replaced events that didn&#39;t change resourceVersion are treated as resync events</span><br><span class="line">&#x2F;&#x2F; and only propagated to listeners that requested resync</span><br><span class="line">isSync &#x3D; accessor.GetResourceVersion() &#x3D;&#x3D; oldAccessor.GetResourceVersion()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@distribute</span><br><span class="line">s.processor.distribute(updateNotification&#123;oldObj: old, newObj: d.Object&#125;, isSync)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if err :&#x3D; s.indexer.Add(d.Object); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">s.processor.distribute(addNotification&#123;newObj: d.Object&#125;, false)</span><br><span class="line">&#125;</span><br><span class="line">case Deleted:</span><br><span class="line">if err :&#x3D; s.indexer.Delete(d.Object); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">s.processor.distribute(deleteNotification&#123;oldObj: d.Object&#125;, false)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@distribute</code></p><blockquote><p><code>tools/cache/shared_informers.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func (p *sharedProcessor) distribute(obj interface&#123;&#125;, sync bool) &#123;</span><br><span class="line">p.listenersLock.RLock()</span><br><span class="line">defer p.listenersLock.RUnlock()</span><br><span class="line"></span><br><span class="line">if sync &#123;</span><br><span class="line">for _, listener :&#x3D; range p.syncingListeners &#123;</span><br><span class="line">listener.add(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; 这里我们挑选一个简单的追踪跟进@p.listeners</span><br><span class="line">for _, listener :&#x3D; range p.listeners &#123;</span><br><span class="line">listener.add(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@listeners</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; sharedProcessor 属性包含 processorListener 的集合，另外能够发布消息通知对象到对应的listeners</span><br><span class="line">type sharedProcessor struct &#123;</span><br><span class="line">listenersStarted bool</span><br><span class="line">listenersLock    sync.RWMutex</span><br><span class="line">&#x2F;&#x2F; @processorListener</span><br><span class="line">listeners        []*processorListener</span><br><span class="line">syncingListeners []*processorListener</span><br><span class="line">clock            clock.Clock</span><br><span class="line">wg               wait.Group</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@processorListener</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; processorListener 将 sharedProcessor转发到 ResourceEventHandler。实现方式是使用两个 goroutines，两个不带缓冲的 channel 以及 ring buffer</span><br><span class="line">type processorListener struct &#123;</span><br><span class="line">nextCh chan interface&#123;&#125;</span><br><span class="line">addCh  chan interface&#123;&#125;</span><br><span class="line">handler ResourceEventHandler</span><br><span class="line">pendingNotifications buffer.RingGrowing</span><br><span class="line">requestedResyncPeriod time.Duration</span><br><span class="line">resyncPeriod time.Duration</span><br><span class="line">nextResync time.Time</span><br><span class="line">resyncLock sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@controller</code> 这个 <code>controller</code> 就是 <code>client-go</code> 中的 <code>Cache controller</code>，主要用来控制从<code>APIServer</code> 获取的对象的<code>cache</code>以及更新对象</p><blockquote><p><code>tools/cache/controller.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type Controller interface &#123;</span><br><span class="line">&#x2F;&#x2F; Run 主要处理两件事情，第一个作用主要用来构造并将Config对象中ListerWatcher获取的对象&#x2F;通知传递到Config对象的Queue中，另一个作用则为重复的从Queue中Pop对象让Config中的ProcessFunc处理</span><br><span class="line">Run(stopCh &lt;-chan struct&#123;&#125;)</span><br><span class="line"></span><br><span class="line">HasSynced() bool</span><br><span class="line"></span><br><span class="line">LastSyncResourceVersion() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@s.cacheMutationDetector.Run</code></p></li><li><p>@s.processor.run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func (p *sharedProcessor) run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">func() &#123;</span><br><span class="line">p.listenersLock.RLock()</span><br><span class="line">defer p.listenersLock.RUnlock()</span><br><span class="line">&#x2F;&#x2F; 注意前面@Informer的使用 </span><br><span class="line">for _, listener :&#x3D; range p.listeners &#123;</span><br><span class="line">p.wg.Start(listener.run)</span><br><span class="line">p.wg.Start(listener.pop)</span><br><span class="line">&#125;</span><br><span class="line">p.listenersStarted &#x3D; true</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-stopCh</span><br><span class="line">p.listenersLock.RLock()</span><br><span class="line">defer p.listenersLock.RUnlock()</span><br><span class="line">for _, listener :&#x3D; range p.listeners &#123;</span><br><span class="line">close(listener.addCh) &#x2F;&#x2F; Tell .pop() to stop. .pop() will tell .run() to stop</span><br><span class="line">&#125;</span><br><span class="line">p.wg.Wait() &#x2F;&#x2F; Wait for all .pop() and .run() to stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终是 <code>controller.Run(stopCh)</code>的执行。继续往下看 <code>client-go/tools/cache/controller.go</code> 中 <code>Run</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; controller 就是比较底层的具体实现了</span><br><span class="line">func (c *controller) Run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">defer utilruntime.HandleCrash()</span><br><span class="line">go func() &#123;</span><br><span class="line">&lt;-stopCh</span><br><span class="line">c.config.Queue.Close()</span><br><span class="line">&#125;()</span><br><span class="line">r :&#x3D; NewReflector(</span><br><span class="line">c.config.ListerWatcher,</span><br><span class="line">c.config.ObjectType,</span><br><span class="line">c.config.Queue,</span><br><span class="line">c.config.FullResyncPeriod,</span><br><span class="line">)</span><br><span class="line">r.ShouldResync &#x3D; c.config.ShouldResync</span><br><span class="line">r.WatchListPageSize &#x3D; c.config.WatchListPageSize</span><br><span class="line">r.clock &#x3D; c.clock</span><br><span class="line">if c.config.WatchErrorHandler !&#x3D; nil &#123;</span><br><span class="line">r.watchErrorHandler &#x3D; c.config.WatchErrorHandler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.reflectorMutex.Lock()</span><br><span class="line">c.reflector &#x3D; r</span><br><span class="line">c.reflectorMutex.Unlock()</span><br><span class="line"></span><br><span class="line">var wg wait.Group</span><br><span class="line">&#x2F;&#x2F; 注意这边的 r.Run 运行@r.Run</span><br><span class="line">wg.StartWithChannel(stopCh, r.Run)</span><br><span class="line">&#x2F;&#x2F; 进行队列操作 @c.processLoop</span><br><span class="line">wait.Until(c.processLoop, time.Second, stopCh)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个的<code>Run</code>算是真正的启动了。</p></li><li><p>@r.Run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Run 方法将重复的使用ListAndWatch获取所有的对象。</span><br><span class="line">func (r *Reflector) Run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">klog.V(2).Infof(&quot;Starting reflector %s (%s) from %s&quot;, r.expectedTypeName, r.resyncPeriod, r.name)</span><br><span class="line">wait.BackoffUntil(func() &#123;</span><br><span class="line">if err :&#x3D; r.ListAndWatch(stopCh); err !&#x3D; nil &#123;</span><br><span class="line">r.watchErrorHandler(r, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, r.backoffManager, true, stopCh)</span><br><span class="line">klog.V(2).Infof(&quot;Stopping reflector %s (%s) from %s&quot;, r.expectedTypeName, r.resyncPeriod, r.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@c.processLoop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func (c *controller) processLoop() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">&#x2F;&#x2F; 队列POP操作，Pop 操作会原子性的将其中一个key获取出来，同时移除其在Store中的存储。</span><br><span class="line">obj, err :&#x3D; c.config.Queue.Pop(PopProcessFunc(c.config.Process))</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">if err &#x3D;&#x3D; ErrFIFOClosed &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">if c.config.RetryOnError &#123;</span><br><span class="line">&#x2F;&#x2F; This is the safe way to re-enqueue.</span><br><span class="line">c.config.Queue.AddIfNotPresent(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Shared-Informer共享机制"><a href="#Shared-Informer共享机制" class="headerlink" title="Shared Informer共享机制"></a><code>Shared Informer</code>共享机制</h2><p>通过<code>Informer</code> 内部的定义可以知道，实际上这边是<code>cache.SharedIndexInformer</code>，根据命名我们可以知道这是可共享的，即可以使用同一类资源<code>Informer</code>共享一个<code>Reflector</code>，来节省资源.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type sharedInformerFactory struct &#123;</span><br><span class="line">client           kubernetes.Interface</span><br><span class="line">namespace        string</span><br><span class="line">tweakListOptions internalinterfaces.TweakListOptionsFunc</span><br><span class="line">lock             sync.Mutex</span><br><span class="line">defaultResync    time.Duration</span><br><span class="line">customResync     map[reflect.Type]time.Duration</span><br><span class="line">&#x2F;&#x2F;通过 map 来建立共享 informer 缓存</span><br><span class="line">informers map[reflect.Type]cache.SharedIndexInformer</span><br><span class="line">&#x2F;&#x2F; startedInformers is used for tracking which informers have been started.</span><br><span class="line">&#x2F;&#x2F; This allows Start() to be called multiple times safely.</span><br><span class="line">startedInformers map[reflect.Type]bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type podInformer struct &#123;</span><br><span class="line">factory          internalinterfaces.SharedInformerFactory</span><br><span class="line">tweakListOptions internalinterfaces.TweakListOptionsFunc</span><br><span class="line">namespace        string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中的 <code>factory</code>的定义.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SharedInformerFactory a small interface to allow for adding an informer without an import cycle</span><br><span class="line">type SharedInformerFactory interface &#123;</span><br><span class="line">Start(stopCh &lt;-chan struct&#123;&#125;)</span><br><span class="line">InformerFor(obj runtime.Object, newFunc NewInformerFunc) cache.SharedIndexInformer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>InformerFor</code> 方法在 <code>factory</code> 中具体实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; InformerFor 函数添加了不同资源的Informer，在添加过程中如果已经存在同类型的资源Informer，则返回当前Informer，不在继续添加</span><br><span class="line">func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer &#123;</span><br><span class="line">f.lock.Lock()</span><br><span class="line">defer f.lock.Unlock()</span><br><span class="line"></span><br><span class="line">informerType :&#x3D; reflect.TypeOf(obj)</span><br><span class="line">informer, exists :&#x3D; f.informers[informerType]</span><br><span class="line">if exists &#123;</span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resyncPeriod, exists :&#x3D; f.customResync[informerType]</span><br><span class="line">if !exists &#123;</span><br><span class="line">resyncPeriod &#x3D; f.defaultResync</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">informer &#x3D; newFunc(f.client, resyncPeriod)</span><br><span class="line">f.informers[informerType] &#x3D; informer</span><br><span class="line"></span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reflector"><a href="#Reflector" class="headerlink" title="Reflector"></a><code>Reflector</code></h1><p>通过源码查看下<code>Reflector</code>具体的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Reflector 监控指定的资源，并将变化映射到给出的存储中</span><br><span class="line">type Reflector struct &#123;</span><br><span class="line">name string</span><br><span class="line">expectedTypeName string</span><br><span class="line">expectedType reflect.Type</span><br><span class="line">expectedGVK *schema.GroupVersionKind</span><br><span class="line">store Store</span><br><span class="line">listerWatcher ListerWatcher</span><br><span class="line">backoffManager wait.BackoffManager</span><br><span class="line">initConnBackoffManager wait.BackoffManager</span><br><span class="line"></span><br><span class="line">resyncPeriod time.Duration</span><br><span class="line">ShouldResync func() bool</span><br><span class="line">clock clock.Clock</span><br><span class="line">paginatedResult bool</span><br><span class="line">lastSyncResourceVersion string</span><br><span class="line">isLastSyncResourceVersionUnavailable bool</span><br><span class="line">lastSyncResourceVersionMutex sync.RWMutex</span><br><span class="line">WatchListPageSize int64</span><br><span class="line">watchErrorHandler WatchErrorHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h1><p>通过以上源码分析，从全局接口设计及调用关系整理如下架构图</p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之 Informer 机制初探</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="Informer" scheme="http://kiragoo.github.com/categories/kubernetes/Informer/"/>
    
    <category term="client-go" scheme="http://kiragoo.github.com/categories/kubernetes/Informer/client-go/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Informer" scheme="http://kiragoo.github.com/tags/Informer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode之最大数</title>
    <link href="http://kiragoo.github.com/archives/8e3236a4.html"/>
    <id>http://kiragoo.github.com/archives/8e3236a4.html</id>
    <published>2021-04-12T13:35:49.000Z</published>
    <updated>2021-04-16T04:47:07.197Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：<br>给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p><p>注意：输出结果可能非常大，所以你需要返回一个字符串而不是整数。<br><img src="http://tva3.sinaimg.cn/wap800/7a56748fgy1gphahet6udj210g0yon05.jpg" alt="描述"><br><a href="https://leetcode-cn.com/problems/largest-number/">链接</a></p><h1 id="leetcode每日一题"><a href="#leetcode每日一题" class="headerlink" title="leetcode每日一题"></a>leetcode每日一题</h1><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    private class  LargerNumberComparator implements Comparator&lt;String&gt; &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public int compare(String a, String b) &#123;</span><br><span class="line">            String order1 &#x3D; a + b;</span><br><span class="line">            String order2 &#x3D; b + a;</span><br><span class="line">           return order2.compareTo(order1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String largestNumber(int[] nums) &#123;</span><br><span class="line">        String[] tmpNums &#x3D; new String[nums.length];</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.length;i++) tmpNums[i] &#x3D;String.valueOf(nums[i]);</span><br><span class="line">        Arrays.sort(tmpNums, new LargerNumberComparator());</span><br><span class="line">        if(tmpNums[0].equals(&quot;0&quot;)) return &quot;0&quot;;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        for(String s:tmpNums)&#123;</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;golang</span><br><span class="line">func largestNumber(nums []int) string &#123;</span><br><span class="line">ss :&#x3D; make([]string, len(nums))</span><br><span class="line">for i, num :&#x3D; range nums &#123;</span><br><span class="line">ss[i] &#x3D; strconv.Itoa(num)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">sort.Slice(ss, func(i, j int) bool &#123;</span><br><span class="line">return ss[i]+ss[j] &gt;&#x3D; ss[j]+ss[i]</span><br><span class="line">&#125;)</span><br><span class="line">o :&#x3D; strings.Join(ss, &quot;&quot;)</span><br><span class="line">if o[0] &#x3D;&#x3D; &#39;0&#39; &#123;</span><br><span class="line">return &quot;0&quot;</span><br><span class="line">&#125;</span><br><span class="line">return o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">leetcode 每日一题</summary>
    
    
    
    <category term="编程" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
    <category term="golang" scheme="http://kiragoo.github.com/tags/golang/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/tags/leetcode/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码分析系列之kube-scheduler-2</title>
    <link href="http://kiragoo.github.com/archives/7bc98d2b.html"/>
    <id>http://kiragoo.github.com/archives/7bc98d2b.html</id>
    <published>2021-04-12T08:50:48.000Z</published>
    <updated>2021-04-16T04:47:07.201Z</updated>
    
    <content type="html"><![CDATA[<p>继上篇<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/">kubernetes源码分析系列之kube-scheduler-1</a> 了解了大概的入口流程之后，此篇文章重点分析下 <code>pkg/scheduler</code> 包中的内容，scheduler初始化及运行流程分析。</p><p>在<a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduler.md">sig-scheduling</a> 中可以了解到关于<code>scheduler</code>设计的目的。</p><p><em>首先我们面对的问题还是如何找到分析的入口</em>，鉴于<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/">kubernetes源码分析系列之kube-scheduler-1</a> 得知在 <code>cmd/kube-scheduler/scheduler.go</code> 中关于 <code>scheduler</code> 的创建在<code>setUp</code>函数中，其中有一段代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Create the scheduler.</span><br><span class="line">sched, err :&#x3D; scheduler.New(cc.Client,</span><br><span class="line">cc.InformerFactory,</span><br><span class="line">cc.PodInformer,</span><br><span class="line">recorderFactory,</span><br><span class="line">ctx.Done(),</span><br><span class="line">scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>那么话不多说，这里我们从 <code>pkg/scheduler/scheduler.go</code> 进行分析<br><strong>不过有一说一，<code>kubernetes</code>源码的注释已经做的很nice了，我们可以通过通读源码就理解了作者的意图了</strong></p><h1 id="pkg-scheduler-scheduler-go"><a href="#pkg-scheduler-scheduler-go" class="headerlink" title="pkg/scheduler/scheduler.go"></a><code>pkg/scheduler/scheduler.go</code></h1><p>以下只对关键性的内容做分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过监控未调度的 &#96;pods&#96;，通过与 &#96;api server&#96;交互实现发现合适的节点进行调度绑定</span><br><span class="line">type Scheduler struct &#123;</span><br><span class="line">&#x2F;&#x2F; 根据 &#96;SchedulerCache&#96; 缓存发生的变化可以被 NodeLister 监听到</span><br><span class="line">SchedulerCache internalcache.Cache</span><br><span class="line"></span><br><span class="line">Algorithm core.ScheduleAlgorithm</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NextPod 必须为方法，为了保证直到下一个&#96;pod&#96;为可调度状态实现阻塞功能</span><br><span class="line">    &#x2F;&#x2F; 这里并没有使用 &#96;channel&#96;是因为调度&#96;pod&#96;可能会花费一段时间，另外我们也不期望当</span><br><span class="line">&#x2F;&#x2F; &#96;pods&#96; 在 &#96;channel&#96; 中时变成‘陈旧’状态</span><br><span class="line">NextPod func() *framework.QueuedPodInfo</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Error is called if there is an error. It is passed the pod in</span><br><span class="line">&#x2F;&#x2F; question, and the error</span><br><span class="line">Error func(*framework.QueuedPodInfo, error)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Close this to shut down the scheduler.</span><br><span class="line">StopEverything &lt;-chan struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; SchedulingQueue 队列用于存放被调度的 &#96;pods&#96;</span><br><span class="line">SchedulingQueue internalqueue.SchedulingQueue</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Profiles are the scheduling profiles.</span><br><span class="line">Profiles profile.Map</span><br><span class="line"></span><br><span class="line">scheduledPodsHasSynced func() bool</span><br><span class="line"></span><br><span class="line">client clientset.Interface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们继续回到 <code>scheduler.New&#123;***&#125;</code> 的部分，继续了解在 <code>pkg/scheduler/scheduler.go</code> 中究竟做了哪些事情。</p><h2 id="New函数"><a href="#New函数" class="headerlink" title="New函数"></a><code>New函数</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; New returns a Scheduler</span><br><span class="line">func New(client clientset.Interface,</span><br><span class="line">informerFactory informers.SharedInformerFactory,</span><br><span class="line">podInformer coreinformers.PodInformer,</span><br><span class="line">recorderFactory profile.RecorderFactory,</span><br><span class="line">stopCh &lt;-chan struct&#123;&#125;,</span><br><span class="line">opts ...Option) (*Scheduler, error) &#123;</span><br><span class="line"></span><br><span class="line">stopEverything :&#x3D; stopCh</span><br><span class="line">if stopEverything &#x3D;&#x3D; nil &#123;</span><br><span class="line">stopEverything &#x3D; wait.NeverStop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">options :&#x3D; defaultSchedulerOptions</span><br><span class="line">for _, opt :&#x3D; range opts &#123;</span><br><span class="line">opt(&amp;options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">schedulerCache :&#x3D; internalcache.New(30*time.Second, stopEverything)</span><br><span class="line">    &#x2F;&#x2F; 这里需要注意下，此处的 &#96;plugins&#96; 注册是针对于 &#96;in-tree&#96; 中的插件，如果我们根据 &#96;schduler framework&#96; 进行的自定义插件，不是通过这边注册 而是通过 &#96;frameworkOutOfTreeRegistry&#96; 进行注册,此阶段将 &#96;in-tree&#96; 及 &#96;out-of-tree&#96; 中的 &#96;plugins&#96; 进行合并</span><br><span class="line">registry :&#x3D; frameworkplugins.NewInTreeRegistry()</span><br><span class="line">if err :&#x3D; registry.Merge(options.frameworkOutOfTreeRegistry); err !&#x3D; nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化 &#96;snapshot&#96;， &#96;snapshot&#96; 为 &#96;cache&#96; 中关于节点信息以及节点树书序。在调度生命周期初始阶段使用&#96;snapshot&#96;，并且在此周期内使用</span><br><span class="line">snapshot :&#x3D; internalcache.NewEmptySnapshot()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @2 初始化 &#96;Configurator&#96;，用于构造 &#96;scheduler&#96;</span><br><span class="line">configurator :&#x3D; &amp;Configurator&#123;</span><br><span class="line">client:                   client,</span><br><span class="line">recorderFactory:          recorderFactory,</span><br><span class="line">informerFactory:          informerFactory,</span><br><span class="line">podInformer:              podInformer,</span><br><span class="line">schedulerCache:           schedulerCache,</span><br><span class="line">StopEverything:           stopEverything,</span><br><span class="line">percentageOfNodesToScore: options.percentageOfNodesToScore,</span><br><span class="line">podInitialBackoffSeconds: options.podInitialBackoffSeconds,</span><br><span class="line">podMaxBackoffSeconds:     options.podMaxBackoffSeconds,</span><br><span class="line">profiles:                 append([]schedulerapi.KubeSchedulerProfile(nil), options.profiles...),</span><br><span class="line">registry:                 registry,</span><br><span class="line">nodeInfoSnapshot:         snapshot,</span><br><span class="line">extenders:                options.extenders,</span><br><span class="line">frameworkCapturer:        options.frameworkCapturer,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#96;metrics&#96; 注册</span><br><span class="line">metrics.Register()</span><br><span class="line"></span><br><span class="line">    var sched *Scheduler</span><br><span class="line">    &#x2F;&#x2F; 进行调度算法逻辑处理</span><br><span class="line">source :&#x3D; options.schedulerAlgorithmSource</span><br><span class="line">switch &#123;</span><br><span class="line">case source.Provider !&#x3D; nil:</span><br><span class="line">&#x2F;&#x2F; Create the config from a named algorithm provider.</span><br><span class="line">&#x2F;&#x2F;@3</span><br><span class="line">sc, err :&#x3D; configurator.createFromProvider(*source.Provider)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;couldn&#39;t create scheduler using provider %q: %v&quot;, *source.Provider, err)</span><br><span class="line">&#125;</span><br><span class="line">sched &#x3D; sc</span><br><span class="line">case source.Policy !&#x3D; nil:</span><br><span class="line">&#x2F;&#x2F; Create the config from a user specified policy source.</span><br><span class="line">policy :&#x3D; &amp;schedulerapi.Policy&#123;&#125;</span><br><span class="line">switch &#123;</span><br><span class="line">case source.Policy.File !&#x3D; nil:</span><br><span class="line">if err :&#x3D; initPolicyFromFile(source.Policy.File.Path, policy); err !&#x3D; nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">case source.Policy.ConfigMap !&#x3D; nil:</span><br><span class="line">if err :&#x3D; initPolicyFromConfigMap(client, source.Policy.ConfigMap, policy); err !&#x3D; nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Set extenders on the configurator now that we&#39;ve decoded the policy</span><br><span class="line">&#x2F;&#x2F; In this case, c.extenders should be nil since we&#39;re using a policy (and therefore not componentconfig,</span><br><span class="line">&#x2F;&#x2F; which would have set extenders in the above instantiation of Configurator from CC options)</span><br><span class="line">configurator.extenders &#x3D; policy.Extenders</span><br><span class="line">sc, err :&#x3D; configurator.createFromConfig(*policy)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;couldn&#39;t create scheduler from policy: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">sched &#x3D; sc</span><br><span class="line">default:</span><br><span class="line">return nil, fmt.Errorf(&quot;unsupported algorithm source: %v&quot;, source)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Additional tweaks to the config produced by the configurator.</span><br><span class="line">sched.StopEverything &#x3D; stopEverything</span><br><span class="line">sched.client &#x3D; client</span><br><span class="line">sched.scheduledPodsHasSynced &#x3D; podInformer.Informer().HasSynced</span><br><span class="line"></span><br><span class="line">addAllEventHandlers(sched, informerFactory, podInformer)</span><br><span class="line">return sched, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析到现在实际上关于<code>scheduler</code> 初始化做的具体工作结束了，那么下面就到了<code>cmd/kube-scheduler/server.go</code> 中的 <code>Run</code> 函数了，然后最终会调用 <code>pkg/scheduler/scheduler.go</code> 中的 <code>Run</code> 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func (sched *Scheduler) Run(ctx context.Context) &#123;</span><br><span class="line">if !cache.WaitForCacheSync(ctx.Done(), sched.scheduledPodsHasSynced) &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@1</span><br><span class="line">sched.SchedulingQueue.Run()</span><br><span class="line">wait.UntilWithContext(ctx, sched.scheduleOne, 0)</span><br><span class="line">sched.SchedulingQueue.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上我们发现 <code>Scheduler</code> 结构体中的 <code>SchedulingQueue</code> 出现的很频繁，这也是需要重点分析的部分，<em>题外话到了看到<code>Queue</code>，让我再一次加深了打牢基础的重要性，不还是数据结构的东西么</em></p><h2 id="SchedulingQueue"><a href="#SchedulingQueue" class="headerlink" title="SchedulingQueue"></a><code>SchedulingQueue</code></h2><p><code>ShcedulingQueue</code> 此接口主要用通过队列实现对等待调度状态的<code>Pods</code>进行存放，此接口有点类似于<code>cache.FIFO</code>,<code>cache.Heap</code>的模式，同时便于使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type SchedulingQueue interface &#123;</span><br><span class="line">framework.PodNominator</span><br><span class="line">Add(pod *v1.Pod) erro）</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将不可调度的&#96;pods&#96;放回调度队列中，</span><br><span class="line">AddUnschedulableIfNotPresent(pod *framework.QueuedPodInfo, podSchedulingCycle int64) error</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调度循环返回当前调度队列缓存中的数目，通常来讲，当&#96;pod&#96;被弹出进行数目的递增</span><br><span class="line">SchedulingCycle() int64</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法&#96;Pop&#96;移除队列的首部元素，当队列为空直到有新的元素添加到队列的时候一直处于阻塞状态</span><br><span class="line">Pop() (*framework.QueuedPodInfo, error)</span><br><span class="line"></span><br><span class="line">Update(oldPod, newPod *v1.Pod) error</span><br><span class="line">Delete(pod *v1.Pod) error</span><br><span class="line">MoveAllToActiveOrBackoffQueue(event string)</span><br><span class="line">AssignedPodAdded(pod *v1.Pod)</span><br><span class="line">AssignedPodUpdated(pod *v1.Pod)</span><br><span class="line">PendingPods() []*v1.Pod</span><br><span class="line">&#x2F;&#x2F; Close closes the SchedulingQueue so that the goroutine which is</span><br><span class="line">&#x2F;&#x2F; waiting to pop items can exit gracefully.</span><br><span class="line">Close()</span><br><span class="line">&#x2F;&#x2F; NumUnschedulablePods returns the number of unschedulable pods exist in the SchedulingQueue.</span><br><span class="line">NumUnschedulablePods() int</span><br><span class="line">&#x2F;&#x2F; Run starts the goroutines managing the queue.</span><br><span class="line">Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这边我们知道通过定义 <code>SchedulingQueue</code> 接口抽象了调度队列的框架，那么具体的实现是分析的重点。</p><p>还记得<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/">kubernetes源码分析系列之kube-scheduler-1</a>中我们讲到了<code>Run</code>服务运行，其中有段代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Leader election is disabled, so runCommand inline until done.</span><br><span class="line">sched.Run(ctx)</span><br></pre></td></tr></table></figure><p>这边还是调用了<code>sched</code>的<code>Run</code>方法，注意这边个人对<code>sched</code>这个的命名的理解是<code>scheduler daemon</code>，这边应该是一个<code>daemon</code>进程。<br>最终又回到了@1的调用逻辑，实际上就是<code>SchedulingQueue</code>的<code>Run</code>方法，此时我们还未看到真正执行调度队列<code>Run</code>方法的承载体，实际上在<code>pkg/scheduler/internal/quque/scheduling_queue.go</code>中在声明 <code>SchedulingQueue</code>接口之后，下文就进行了具体的实现，<br>即使我们能够确定就是这么个逻辑，但是对于程序来说是如何感知的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; @4</span><br><span class="line">func NewSchedulingQueue(lessFn framework.LessFunc, opts ...Option) SchedulingQueue &#123;</span><br><span class="line">return NewPriorityQueue(lessFn, opts...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意这边函数初始化得到一个优先队列，优先队列的返回即为<code>SchedulingQueue</code></p><p>我们继续分析函数<code>NewPriorityQueue(lessFn,opts...)</code>，根据如下函数签名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; NewPriorityQueue creates a PriorityQueue object.</span><br><span class="line">func NewPriorityQueue(</span><br><span class="line">lessFn framework.LessFunc,</span><br><span class="line">opts ...Option,</span><br><span class="line">) *PriorityQueue</span><br></pre></td></tr></table></figure><p>可以得知返回值就是一个<code>*PriorityQueue</code>指针，那么至此就说明了按照<code>SchedulingQueue</code>接口实现的结构体<code>PriorityQueue</code>就是最终的承载体。</p><p>到了这边我们实际上还有个问题没有理清，就是那是在什么时候进行<code>NewSchedulingQueue</code>初始化的操作的呢？</p><p>我们继续回顾以上内容，重点注意下@2部分初始化的<code>Configurator</code>以及<code>configurator.createFromProvider</code>方法。<br><code>Configurator</code>主要用于初始化构造<code>Scheduler</code>，具体的定义是在<code>pkg/scheduler/factory.go</code>中</p><h2 id="createFromProvider"><a href="#createFromProvider" class="headerlink" title="createFromProvider"></a><code>createFromProvider</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据注册的算法&#96;provider&#96; 创建&#96;scheduler&#96;</span><br><span class="line">func (c *Configurator) createFromProvider(providerName string) (*Scheduler, error) &#123;</span><br><span class="line">.....</span><br><span class="line">&#x2F;&#x2F; 通过调用 &#96;Configurator.create&#123;...&#125;&#96;方法得到 &#96;Scheduler&#96;</span><br><span class="line">return c.create()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下分析 <code>c.create()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据注册的插件创建 &#96;scheduler&#96;</span><br><span class="line">func (c *Configurator) create() (*Scheduler, error) &#123;</span><br><span class="line">&#x2F;&#x2F;其他细节业务逻辑</span><br><span class="line">.....</span><br><span class="line">&#x2F;&#x2F;这里构造得到的&#96;podQueue&#96; 不就是上文@4的&#96;NewSchedulingQueue&#96;函数么？</span><br><span class="line">podQueue :&#x3D; internalqueue.NewSchedulingQueue(</span><br><span class="line">lessFn,</span><br><span class="line">internalqueue.WithPodInitialBackoffDuration(time.Duration(c.podInitialBackoffSeconds)*time.Second),</span><br><span class="line">internalqueue.WithPodMaxBackoffDuration(time.Duration(c.podMaxBackoffSeconds)*time.Second),</span><br><span class="line">internalqueue.WithPodNominator(nominator),</span><br><span class="line">)</span><br><span class="line">.....</span><br><span class="line">return &amp;Scheduler&#123;</span><br><span class="line">SchedulerCache:  c.schedulerCache,</span><br><span class="line">Algorithm:       algo,</span><br><span class="line">Profiles:        profiles,</span><br><span class="line">NextPod:         internalqueue.MakeNextPodFunc(podQueue),</span><br><span class="line">Error:           MakeDefaultErrorFunc(c.client, c.informerFactory.Core().V1().Pods().Lister(), podQueue, c.schedulerCache),</span><br><span class="line">StopEverything:  c.StopEverything,</span><br><span class="line">SchedulingQueue: podQueue,</span><br><span class="line">&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此关于<code>SchedulingQueue</code>相关的流程梳理打通明白所以然了。</p><h2 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h2><p>老规矩以上基本上都是围绕着代码进行梳理，对于最后的总结归纳通过流程图是最直接了当的，下面上图。<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fgy1gphepm8lqoj21qe12swkh.jpg" alt="流程图"></p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之kube-scheduler scheduler初始化流程分析</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/kube-scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/tags/kube-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码分析系列之kube-scheduler-1</title>
    <link href="http://kiragoo.github.com/archives/e2c0dc91.html"/>
    <id>http://kiragoo.github.com/archives/e2c0dc91.html</id>
    <published>2021-04-12T06:12:00.000Z</published>
    <updated>2021-04-16T04:47:07.200Z</updated>
    
    <content type="html"><![CDATA[<p><code>kube-scheduler</code> 源码分析系列重点作为代码流程梳理，对于 <code>kube-scheduler</code> 的文档还请详见<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/kube-scheduler/">kube-scheduler</a>介绍。</p><p><em>如下代码分析对于细节的处理会跳过，只看主干</em></p><h1 id="代码入口分析"><a href="#代码入口分析" class="headerlink" title="代码入口分析"></a>代码入口分析</h1><p><code>kubernetes/cmd/kube-scheduler/app/scheduler.go</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @1</span><br><span class="line">command :&#x3D; app.NewSchedulerCommand()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; TODO: once we switch everything over to Cobra commands, we can go back to calling</span><br><span class="line">&#x2F;&#x2F; utilflag.InitFlags() (by removing its pflag.Parse() call). For now, we have to set the</span><br><span class="line">&#x2F;&#x2F; normalize func and add the go flag set by hand.</span><br><span class="line">pflag.CommandLine.SetNormalizeFunc(cliflag.WordSepNormalizeFunc)</span><br><span class="line">&#x2F;&#x2F; utilflag.InitFlags()</span><br><span class="line">logs.InitLogs()</span><br><span class="line">defer logs.FlushLogs()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;@2</span><br><span class="line">if err :&#x3D; command.Execute(); err !&#x3D; nil &#123;</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@1 <code>app.NewSchedulerCommand(）</code> 主要为命令行注册对应的 options， 借助<code>cobra </code> 库进行 <code>Command</code> 的对应 parse 和初始化工作。:</li><li>@2 <code>command.Execute()</code> 实际上是服务启动入口，继续 <code>step in</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ExecuteContext is the same as Execute(), but sets the ctx on the command.</span><br><span class="line">&#x2F;&#x2F; Retrieve ctx by calling cmd.Context() inside your *Run lifecycle functions.</span><br><span class="line">func (c *Command) ExecuteContext(ctx context.Context) error &#123;</span><br><span class="line">c.ctx &#x3D; ctx</span><br><span class="line">return c.Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Execute uses the args (os.Args[1:] by default)</span><br><span class="line">&#x2F;&#x2F; and run through the command tree finding appropriate matches</span><br><span class="line">&#x2F;&#x2F; for commands and then corresponding flags.</span><br><span class="line">func (c *Command) Execute() error &#123;</span><br><span class="line">_, err :&#x3D; c.ExecuteC()</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c *Command) ExecuteC() (cmd *Command, err error) &#123;</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F; initialize help as the last point possible to allow for user</span><br><span class="line">&#x2F;&#x2F; overriding</span><br><span class="line">c.InitDefaultHelpCmd()</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F; initialize the hidden command to be used for bash completion</span><br><span class="line">c.initCompleteCmd(args)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @3</span><br><span class="line">err &#x3D; cmd.execute(flags)</span><br><span class="line">    .....</span><br><span class="line">return cmd, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此时我们通过函数名发现 @3 部分是真正执行的部分，继续深入看看:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">func (c *Command) execute(a []string) (err error) &#123;</span><br><span class="line">.....</span><br><span class="line">    &#x2F;&#x2F; initialize help and version flag at the last point possible to allow for user</span><br><span class="line">&#x2F;&#x2F; overriding</span><br><span class="line">c.InitDefaultHelpFlag()</span><br><span class="line">c.InitDefaultVersionFlag()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">c.preRun()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">    if c.PreRunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.PreRunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if c.PreRun !&#x3D; nil &#123;</span><br><span class="line">c.PreRun(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if err :&#x3D; c.validateRequiredFlags(); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">if c.RunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.RunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">c.Run(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line">if c.PostRunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.PostRunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if c.PostRun !&#x3D; nil &#123;</span><br><span class="line">c.PostRun(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在此段库函数代码中我们会发现一堆与<code>Run</code>相关的函数，此部分库函数我也未做详细学习，但是根据名称我们可以理解实际上是做真正运行的一些前置工作，由于与 <code>kube-scheduler</code> 核心机制没有太大的干系，可以先大概了解下，不能忘了此次分析的主要矛盾。</li></ul><p>既然我们知道了最终是 <code>Command</code> 调用了，结合 <code>kube-scheduler</code> 我们是怎么和 上下文关联起来的呢？这里我们回头再继续看下 <code>app.NewSchedulerCommand()</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func NewSchedulerCommand(registryOptions ...Option) *cobra.Command &#123;</span><br><span class="line">    .....</span><br><span class="line">    Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line"></span><br><span class="line">if err :&#x3D; runCommand(cmd, opts, registryOptions...); err !&#x3D; nil &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, &quot;%v\n&quot;, err)</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; runCommand runs the scheduler.</span><br><span class="line">func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error &#123;</span><br><span class="line">    .....</span><br><span class="line">    return Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处才是kube-scheduler真正意义上执行的具体逻辑</span><br><span class="line">&#x2F;&#x2F; Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入口启动流程梳理"><a href="#入口启动流程梳理" class="headerlink" title="入口启动流程梳理"></a>入口启动流程梳理</h2><p><img src="http://tvax2.sinaimg.cn/wap800/7a56748fly1gpgzjgtrpuj214m0ri0wr.jpg" alt="流程梳理"><br>以上为主要的启动流程分析，主要还是围绕着 <code>Command</code> 运行的入口流程进行分析。下面我们重点关注<code>kube-scheduler</code> 初始化及真正运行具体做了哪些事情。</p><h1 id="kube-scheduler-创建及运行"><a href="#kube-scheduler-创建及运行" class="headerlink" title="kube-scheduler 创建及运行"></a><code>kube-scheduler</code> 创建及运行</h1><ul><li>入口<br>在 <code>runCommand</code> 这个函数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; runCommand runs the scheduler.</span><br><span class="line">func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error &#123;</span><br><span class="line">    .....</span><br><span class="line">cc, sched, err :&#x3D; Setup(ctx, opts, registryOptions...)</span><br><span class="line">    .....</span><br><span class="line">    return Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Setup</code> 创建工作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Setup creates a completed config and a scheduler based on the command args and options</span><br><span class="line">func Setup(ctx context.Context, opts *options.Options, outOfTreeRegistryOptions ...Option) (*schedulerserverconfig.CompletedConfig, *scheduler.Scheduler, error) &#123;</span><br><span class="line">if errs :&#x3D; opts.Validate(); len(errs) &gt; 0 &#123;</span><br><span class="line">return nil, nil, utilerrors.NewAggregate(errs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err :&#x3D; opts.Config()</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取 config 对象</span><br><span class="line">&#x2F;&#x2F; Get the completed config</span><br><span class="line">cc :&#x3D; c.Complete()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化 outOfTreeRegistry, 后续基于 Scheduler Framwork 自定义的 插件注册关联的地方，后续再介绍 Scheduler Framework</span><br><span class="line">outOfTreeRegistry :&#x3D; make(runtime.Registry)</span><br><span class="line">for _, option :&#x3D; range outOfTreeRegistryOptions &#123;</span><br><span class="line">if err :&#x3D; option(outOfTreeRegistry); err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F; 创建事件记录器</span><br><span class="line">recorderFactory :&#x3D; getRecorderFactory(&amp;cc)</span><br><span class="line">    &#x2F;&#x2F; 初始化 scheduler</span><br><span class="line">&#x2F;&#x2F; Create the scheduler.</span><br><span class="line">sched, err :&#x3D; scheduler.New(cc.Client,</span><br><span class="line">cc.InformerFactory,</span><br><span class="line">cc.PodInformer,</span><br><span class="line">recorderFactory,</span><br><span class="line">ctx.Done(),</span><br><span class="line">scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;cc, sched, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>scheduler</code> 初始化完成，初始化结束。</p><ul><li><code>Run</code> 服务运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据提供的名称创建Configz</span><br><span class="line">&#x2F;&#x2F; Configz registration.</span><br><span class="line">if cz, err :&#x3D; configz.New(&quot;componentconfig&quot;); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">cz.Set(cc.ComponentConfig)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return fmt.Errorf(&quot;unable to register configz: %s&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 事件广播准备</span><br><span class="line">&#x2F;&#x2F; Prepare the event broadcaster.</span><br><span class="line">cc.EventBroadcaster.StartRecordingToSink(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建健康检查数组</span><br><span class="line">&#x2F;&#x2F; Setup healthz checks.</span><br><span class="line">var checks []healthz.HealthChecker</span><br><span class="line">    &#x2F;&#x2F; 判断是否需要进行leader选举</span><br><span class="line">if cc.ComponentConfig.LeaderElection.LeaderElect &#123;</span><br><span class="line">checks &#x3D; append(checks, cc.LeaderElection.WatchDog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 进行健康检查</span><br><span class="line">&#x2F;&#x2F; Start up the healthz server.</span><br><span class="line">if cc.InsecureServing !&#x3D; nil &#123;</span><br><span class="line">separateMetrics :&#x3D; cc.InsecureMetricsServing !&#x3D; nil</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, separateMetrics, checks...), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start healthz server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.InsecureMetricsServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newMetricsHandler(&amp;cc.ComponentConfig), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureMetricsServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start metrics server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.SecureServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, false, checks...), cc.Authentication.Authenticator, cc.Authorization.Authorizer)</span><br><span class="line">&#x2F;&#x2F; TODO: handle stoppedCh returned by c.SecureServing.Serve</span><br><span class="line">if _, err :&#x3D; cc.SecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">&#x2F;&#x2F; fail early for secure handlers, removing the old error loop from above</span><br><span class="line">return fmt.Errorf(&quot;failed to start secure server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 运行所有informer</span><br><span class="line">&#x2F;&#x2F; Start all informers.</span><br><span class="line">go cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">cc.InformerFactory.Start(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在调度前等待缓存同步</span><br><span class="line">&#x2F;&#x2F; Wait for all caches to sync before scheduling.</span><br><span class="line">cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据是否开启选举开关进行选举逻辑</span><br><span class="line">&#x2F;&#x2F; If leader election is enabled, runCommand via LeaderElector until done and exit.</span><br><span class="line">if cc.LeaderElection !&#x3D; nil &#123;</span><br><span class="line">cc.LeaderElection.Callbacks &#x3D; leaderelection.LeaderCallbacks&#123;</span><br><span class="line">OnStartedLeading: sched.Run,</span><br><span class="line">OnStoppedLeading: func() &#123;</span><br><span class="line">klog.Fatalf(&quot;leaderelection lost&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">leaderElector, err :&#x3D; leaderelection.NewLeaderElector(*cc.LeaderElection)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;couldn&#39;t create leader elector: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leaderElector.Run(ctx)</span><br><span class="line"></span><br><span class="line">return fmt.Errorf(&quot;lost lease&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 运行服务</span><br><span class="line">&#x2F;&#x2F; Leader election is disabled, so runCommand inline until done.</span><br><span class="line">sched.Run(ctx)</span><br><span class="line">return fmt.Errorf(&quot;finished without leader elect&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>kube-scheduler</code> 算是真正意义上的运行了。</p><h2 id="scheduler-初始化及运行流程梳理"><a href="#scheduler-初始化及运行流程梳理" class="headerlink" title="scheduler 初始化及运行流程梳理"></a><code>scheduler</code> 初始化及运行流程梳理</h2><p><img src="http://tva2.sinaimg.cn/wap800/7a56748fly1gph1m7uzsgj21hy11279t.jpg" alt="初始化及运行流程"></p><p><strong>至此<code>kube-scheduler</code>入口启动过程算是结束了，个人理解，如若有不对地方还望多多指教。</strong></p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之kube-scheduler 启动入口分析</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/kube-scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/tags/kube-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>7天用go从零实现系列之web框架Day1</title>
    <link href="http://kiragoo.github.com/archives/e2742950.html"/>
    <id>http://kiragoo.github.com/archives/e2742950.html</id>
    <published>2021-04-11T14:27:26.000Z</published>
    <updated>2021-04-16T04:47:07.192Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一些不错的博客系列文章，包括为<a href="http://geektutu.com/">@极客兔兔</a>原创的7天从零系列的文章，此系列文章为个人阅读及个人描述记录。</p><p>其中序言部分主要描述的是一个web框架大概需要实现的内容，此处借鉴了<a href="https://gin-gonic.com/">Gin</a>的设计思想。</p><h1 id="启动Web服务"><a href="#启动Web服务" class="headerlink" title="启动Web服务"></a>启动Web服务</h1><p>使用 <code>net/http</code> 库，封装了http的网络编程的基础的接口。<br><code>d1-http-v1/main.go</code></p><h2 id="v1版本"><a href="#v1版本" class="headerlink" title="v1版本"></a>v1版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 映射路由</span><br><span class="line">http.HandleFunc(&quot;&#x2F;&quot;, indexHandler) </span><br><span class="line">http.HandleFunc(&quot;&#x2F;hello&quot;, helloHandler)</span><br><span class="line">    &#x2F;&#x2F; 启动 web 服务</span><br><span class="line">log.Fatal(http.ListenAndServe(&quot;:9999&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handler echoes r.URL.Path</span><br><span class="line">func indexHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handler echoes r.URL.Header</span><br><span class="line">func helloHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v :&#x3D; range req.Header &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;Header[%q] &#x3D; %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接通过 <code>http.HandleFunc</code> 函数将具体处理函数与路由做好映射关系。</p><p><strong>关键函数分析</strong></p><ul><li><code>http.ListenAndServe</code>:<br>通过传入 <code>addr</code>，<code>handler</code>, <code>addr</code> 为 <code>string</code> 类型，重点再看下 <code>Handler</code> 的定义 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ListenAndServe listens on the TCP network address addr and then calls</span><br><span class="line">&#x2F;&#x2F; Serve with handler to handle requests on incoming connections.</span><br><span class="line">&#x2F;&#x2F; Accepted connections are configured to enable TCP keep-alives.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ListenAndServe always returns a non-nil error.</span><br><span class="line">func ListenAndServe(addr string, handler Handler) error &#123;</span><br><span class="line">server :&#x3D; &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line">return server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Handler</code>:<br>即通过实现 <code>Handler</code> 接口中定义的 <code>    ServeHTTP(ResponseWriter, *Request)</code> 即实现了对 <code>http</code> 请求的处理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; A Handler responds to an HTTP request.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ServeHTTP should write reply headers and data to the ResponseWriter</span><br><span class="line">&#x2F;&#x2F; and then return. Returning signals that the request is finished; it</span><br><span class="line">&#x2F;&#x2F; is not valid to use the ResponseWriter or read from the</span><br><span class="line">&#x2F;&#x2F; Request.Body after or concurrently with the completion of the</span><br><span class="line">&#x2F;&#x2F; ServeHTTP call.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Depending on the HTTP client software, HTTP protocol version, and</span><br><span class="line">&#x2F;&#x2F; any intermediaries between the client and the Go server, it may not</span><br><span class="line">&#x2F;&#x2F; be possible to read from the Request.Body after writing to the</span><br><span class="line">&#x2F;&#x2F; ResponseWriter. Cautious handlers should read the Request.Body</span><br><span class="line">&#x2F;&#x2F; first, and then reply.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Except for reading the body, handlers should not modify the</span><br><span class="line">&#x2F;&#x2F; provided Request.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span><br><span class="line">&#x2F;&#x2F; that the effect of the panic was isolated to the active request.</span><br><span class="line">&#x2F;&#x2F; It recovers the panic, logs a stack trace to the server error log,</span><br><span class="line">&#x2F;&#x2F; and either closes the network connection or sends an HTTP&#x2F;2</span><br><span class="line">&#x2F;&#x2F; RST_STREAM, depending on the HTTP protocol. To abort a handler so</span><br><span class="line">&#x2F;&#x2F; the client sees an interrupted response but the server doesn&#39;t log</span><br><span class="line">&#x2F;&#x2F; an error, panic with the value ErrAbortHandler.</span><br><span class="line">type Handler interface &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以此引申 <code>v2</code> 版本</li></ul><h2 id="v2-版本"><a href="#v2-版本" class="headerlink" title="v2 版本"></a>v2 版本</h2><p>项目结构如下：<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fgy1gpg74zeh17j20qw0bqjs9.jpg" alt="项目结构"></p><p>在项目中引用了本地包的依赖，这里需要对项目中内部模块进行依赖配置:<br>在根目录中的 <code>go.mod</code> 文件进行如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module kgeedemo</span><br><span class="line"></span><br><span class="line">go 1.15</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">kgee v0.0.0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace (</span><br><span class="line">kgee &#x3D;&gt; .&#x2F;kgee</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p><code>main.go</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;kgee&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化-&gt; 路由映射缓存 -&gt; 启动服务</span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化 kgee，类似于门面模式，将需要处理的工作在函数内部处理了。</span><br><span class="line">r :&#x3D; kgee.New()</span><br><span class="line">    &#x2F;&#x2F; args[1] 参数为 函数</span><br><span class="line">r.GET(&quot;&#x2F;&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">_, _ &#x3D; fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(&quot;&#x2F;hello&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v :&#x3D; range req.Header &#123;</span><br><span class="line">_, _ &#x3D; fmt.Fprintf(w, &quot;Header[%q] &#x3D; %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#x2F;&#x2F; 服务器运行</span><br><span class="line">_ &#x3D; r.Run(&quot;:9999&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>kgee.go</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package kgee</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;HandlerFunc defines the reques handler used by kgee</span><br><span class="line">type HandlerFunc func(w http.ResponseWriter, req *http.Request)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Engin implement the interface of ServeHTTP</span><br><span class="line">type Engine struct &#123;</span><br><span class="line">router map[string]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;New is the constructor of kgee.Engine</span><br><span class="line">func New() *Engine &#123;</span><br><span class="line">return &amp;Engine&#123;router: make(map[string]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) &#123;</span><br><span class="line">key :&#x3D; method + &quot;-&quot; + pattern</span><br><span class="line">engine.router[key] &#x3D; handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engin *Engine) GET(pattern string, handler HandlerFunc) &#123;</span><br><span class="line">engin.addRoute(&quot;GET&quot;, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) POST(pattern string, hander HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(&quot;POST&quot;, pattern, hander)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 完成 ServeHttp 函数</span><br><span class="line">func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key :&#x3D; req.Method + &quot;-&quot; + req.URL.Path</span><br><span class="line">if handler, ok :&#x3D; engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(w, &quot;404 NOT FOUND:%s\n&quot;, req.URL)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) Run(addr string) (err error) &#123;</span><br><span class="line">return http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个简单示例即完成，如下我们可以验证下。</p></li></ul><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>这里我 <code>Goland</code> 中集成了 <code>RestConsole</code> 插件，直接用这个插件进行测试。测试结果如下：</p><ul><li>请求 <code>/</code> 对应的路由结果如下:<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpg7imm6xbj20nm0gewgk.jpg" alt="r1"></li><li>请求 <code>/hello</code> 对应的路由结果如下:<br><img src="http://tvax4.sinaimg.cn/wap800/7a56748fgy1gpg7jvm0fvj20o40igjtw.jpg" alt="r2"></li></ul><p><em>参考链接</em>:</p><p><a href="https://geektutu.com/post/gee-day1.html">https://geektutu.com/post/gee-day1.html</a></p><p><em>本文代码</em>:</p><p><a href="https://github.com/kiragoo/kgee/tree/day1">https://github.com/kiragoo/kgee/tree/day1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看到一些不错的博客系列文章，包括为&lt;a href=&quot;http://geektutu.com/&quot;&gt;@极客兔兔&lt;/a&gt;原创的7天从零系列的文章，此系列文章为个人阅读及个人描述记录。&lt;/p&gt;
&lt;p&gt;其中序言部分主要描述的是一个web框架大概需要实现的内容，此处借鉴了&lt;a hr</summary>
      
    
    
    
    <category term="golang" scheme="http://kiragoo.github.com/categories/golang/"/>
    
    
    <category term="golang" scheme="http://kiragoo.github.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Mac之搭建本地k8s开发环境</title>
    <link href="http://kiragoo.github.com/archives/5d61e17f.html"/>
    <id>http://kiragoo.github.com/archives/5d61e17f.html</id>
    <published>2021-04-11T01:50:53.000Z</published>
    <updated>2021-04-16T04:47:07.196Z</updated>
    
    <content type="html"><![CDATA[<p>Mac搭建本地k8s环境目前网上有N多的博客文章，无非就是minikube、docker-desktop、kubeadm去部署，对于我个人需求，由于后期需要对原生的 scheduler 进行自定义的扩展开发，我需要能够有机会改动静态POD的manifests文件进行改动与配置。</p><p>前期通过 minikube 及 docker-desktop 进行过本地k8s集群的部署，但是发现此种沙盒环境无法对静态POD进行配置改动，只能围着k8s做周边的应用测试，没法满足我的需求，最后决定通过kubeadm进行k8s本地环境部署。</p><p>所以最终选择： Virtualbox + Centos7 镜像进行单节点k8s部署【此环境只做组件部署及逻辑验证】</p><h1 id="VirutalBox安装及Centos-虚拟机安装"><a href="#VirutalBox安装及Centos-虚拟机安装" class="headerlink" title="VirutalBox安装及Centos 虚拟机安装"></a>VirutalBox安装及Centos 虚拟机安装</h1><p>具体的介绍就不多介绍了，我选用的为 6.1.4 没有选用最新的版本，主要是担心出了问题可能没有最新及时的资料可以参考。</p><p>如何创建虚机就不多介绍了，但是以下注意点需要注意：</p><ul><li>虚机CPU至少分配2核</li><li>虚机网络连接选择为bridge，之前选择的Nat模式无法获取本地ip，虽然能通外网。 此现象比较诡异</li></ul><h1 id="Kubeadm-安装及K8s集群初始化"><a href="#Kubeadm-安装及K8s集群初始化" class="headerlink" title="Kubeadm 安装及K8s集群初始化"></a>Kubeadm 安装及K8s集群初始化</h1><p>由于此次的工作只是作为本地开发测试环境，不作为生产环境的部署方案，所以在这里我只是通过yum 安装，不过对于无网的生产环境部署，实际上也可以通过制作本地yum源来部署，这里就不做扩展讨论了。</p><h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><p><code>yum upgrade -y</code></p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h2 id="更改Selinux配置"><a href="#更改Selinux配置" class="headerlink" title="更改Selinux配置"></a>更改Selinux配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 &#x2F;&#x2F;临时改动</span><br><span class="line">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config &#x2F;&#x2F;写入配置永久改动</span><br></pre></td></tr></table></figure><h2 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sysctl -w vm.swappiness&#x3D;0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 到 &#x2F;etc&#x2F;fstab 中将 涉及到 swap 的配置进行注释</span><br></pre></td></tr></table></figure><h2 id="网桥参数配置"><a href="#网桥参数配置" class="headerlink" title="网桥参数配置"></a>网桥参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h2 id="安装-socat"><a href="#安装-socat" class="headerlink" title="安装 socat"></a>安装 socat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install socat -y</span><br></pre></td></tr></table></figure><h2 id="安装-docker-并启动-docker-daemon-服务"><a href="#安装-docker-并启动-docker-daemon-服务" class="headerlink" title="安装 docker 并启动 docker daemon 服务"></a>安装 docker 并启动 docker daemon 服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="配置-kubernetes-的国内yum源"><a href="#配置-kubernetes-的国内yum源" class="headerlink" title="配置 kubernetes 的国内yum源"></a>配置 kubernetes 的国内yum源</h2><p>这里配置的是阿里 yum 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vcat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装-kubelet、kubectl、kubeadm"><a href="#安装-kubelet、kubectl、kubeadm" class="headerlink" title="安装 kubelet、kubectl、kubeadm"></a>安装 kubelet、kubectl、kubeadm</h2><p>由于后续工作是对k8s版本有指定要求的，所以在部署的时候我需要安装指定的k8s 版本组件，可以通过如下命令进行yum list 查看可安装版本<br>yum list kubelet kubeadm kubectl –showduplicates|sort -r<br>安装组件指定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet-1.19.8-0 kubeadm-1.19.8-0 kubectl-1.19.8-0</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p>这个时候我们查看 kubelet 的服务没有正常启动，这个是正常的，因为它会关联 kubeadm.conf 这个配置文件，此时我们还没有用kubeadm进行集群的初始化。所以这个反应是正常的。</p><h2 id="通过kubeadm初始化k8s集群"><a href="#通过kubeadm初始化k8s集群" class="headerlink" title="通过kubeadm初始化k8s集群"></a>通过kubeadm初始化k8s集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version&#x3D;1.19.8 --image-repository&#x3D;registry.aliyuncs.com&#x2F;google_containers --pod-network-cidr&#x3D;192.168.0.0&#x2F;16</span><br></pre></td></tr></table></figure><h2 id="根据OutPut生成对应的配置文件"><a href="#根据OutPut生成对应的配置文件" class="headerlink" title="根据OutPut生成对应的配置文件"></a>根据OutPut生成对应的配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h2 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h2><p>由于到了这边我们没有安装网络插件，此时集群的节点状态是NotReady，为了方便后续的维护，我是将 calico.yaml 下载下来放到指定目录方便后续维护的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSLO https:&#x2F;&#x2F;ms-source.oss-cn-shanghai.aliyuncs.com&#x2F;calico&#x2F;yaml&#x2F;calico-v3.17.0.yaml</span><br></pre></td></tr></table></figure><h2 id="部署Calico组件"><a href="#部署Calico组件" class="headerlink" title="部署Calico组件"></a>部署Calico组件</h2><p><code>kubectl create -f calico-v3.17.0.yaml</code><br>此步骤结束之后算是k8s集群部署工作算是完成了，但是由于我这边只是一个master节点，kubeadm默认是做了 Taint的污点策略，此时的节点是不可调度的，通过产看pod状态，会出现如下现象：<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpfktg2dmoj20p105f0u6.jpg" alt="pod-pending状态"></p><p>具体原因可以通过如下操作进行查明:<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpfkue7d78j20y50ldtdd.jpg" alt="reason"></p><p>解决使用的命令如下：<br><code>kubectl taint nodes --all node-role.kubernetes.io/master-</code><br>此时再继续查看pod的状态，可以发现是正常的了。<br><img src="http://tva1.sinaimg.cn/wap800/7a56748fgy1gpfkvfgpygj20tj05fmyn.jpg" alt="pods"></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>将在期望状态的虚机导一份镜像出来，方便后续使用</li><li>virtualbox 中的虚机个人喜欢无界面启动，此操作可以通过 控制台或者命令行形式进行操作。</li></ul>]]></content>
    
    
    <summary type="html">mac 搭建本地 k8s 开发环境</summary>
    
    
    
    <category term="k8s" scheme="http://kiragoo.github.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://kiragoo.github.com/tags/k8s/"/>
    
    <category term="kubeadm" scheme="http://kiragoo.github.com/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之丑数</title>
    <link href="http://kiragoo.github.com/archives/36986800.html"/>
    <id>http://kiragoo.github.com/archives/36986800.html</id>
    <published>2021-04-10T14:51:46.000Z</published>
    <updated>2021-04-16T04:47:07.202Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：<br>给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回 false 。</p><p>丑数 就是只包含质因数 2、3 和/或 5 的正整数。<br><img src="http://tvax3.sinaimg.cn/large/7a56748fgy1gpf33mppc3j210q124q6n.jpg" alt="描述"></p><p><a href="https://leetcode-cn.com/problems/ugly-number">链接</a></p><h1 id="leetcode每日一题之丑数"><a href="#leetcode每日一题之丑数" class="headerlink" title="leetcode每日一题之丑数"></a>leetcode每日一题之丑数</h1><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isUgly(int num) &#123;</span><br><span class="line">        if(num &#x3D;&#x3D; 0) return false;</span><br><span class="line">        while(num !&#x3D; 1)&#123;</span><br><span class="line">            if(num%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;2;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(num%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;3;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(num%5&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;5;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Go</span><br><span class="line">func isUgly(num int) bool&#123;</span><br><span class="line">if num &#x3D;&#x3D; 0 &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">for&#123;</span><br><span class="line">if num &#x3D;&#x3D; 1 &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">if num % 2 &#x3D;&#x3D; 0 &#123;</span><br><span class="line">num&#x2F;&#x3D;2</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if num % 3 &#x3D;&#x3D; 0&#123;</span><br><span class="line">num&#x2F;&#x3D;3</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if num % 5 &#x3D;&#x3D; 0 &#123;</span><br><span class="line">num&#x2F;&#x3D;5</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">leetcode 每日一题</summary>
    
    
    
    <category term="编程" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
    <category term="算法" scheme="http://kiragoo.github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/tags/leetcode/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kiragoo.github.com/archives/4a17b156.html"/>
    <id>http://kiragoo.github.com/archives/4a17b156.html</id>
    <published>2021-04-10T13:23:43.398Z</published>
    <updated>2021-04-16T04:47:07.199Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
