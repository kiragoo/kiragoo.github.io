<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kirago杂谈</title>
  
  
  <link href="http://kiragoo.github.com/atom.xml" rel="self"/>
  
  <link href="http://kiragoo.github.com/"/>
  <updated>2021-04-15T16:23:56.774Z</updated>
  <id>http://kiragoo.github.com/</id>
  
  <author>
    <name>kirago</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git无法添加空的文件夹</title>
    <link href="http://kiragoo.github.com/2021/04/15/git%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0%E7%A9%BA%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://kiragoo.github.com/2021/04/15/git%E6%97%A0%E6%B3%95%E6%B7%BB%E5%8A%A0%E7%A9%BA%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/</id>
    <published>2021-04-15T15:55:07.000Z</published>
    <updated>2021-04-15T16:23:56.774Z</updated>
    
    <content type="html"><![CDATA[<p>最近打算用<code>gitee</code>和<code>PigGO</code>结合起来做个私有的图床，因为之前一直用的微博的插件去上传图片到图床然后引用<code>URL</code>，但是始终感觉毕竟不是自己可控的那天说不定没用了，那么我的图片就都没了，本来考虑用<code>github</code>来托管我的图片的，但是考虑到“墙”的问题 ，国内访问会抽风，所以就打算用<code>gitee</code>和<code>PigGO</code>来构建自己私有的图床了，那么也就引发了此次的问题。</p><hr><p><strong>新克隆的<code>git</code>仓库无法添加空文件目录</strong>，这里出现空的文件目录是因为我想在图床仓库中建多个<code>path</code>，这个<code>path</code>中的内容专门给我的博客使用，其他的<code>path</code>后续再看情况使用。</p><h1 id="诡异的问题"><a href="#诡异的问题" class="headerlink" title="诡异的问题"></a>诡异的问题</h1><p><code>git add dir-xx</code> 之后缓存区没有任何内容 ，而且也没有任何异常报错，老实说这是最懵的状态，无从下手，最后还是借助强大的搜索解决.<br><img src="https://gitee.com/Tony_zhangl/kimg/raw/master/blogimgs/20210416002304.png" alt="描述"><br><a href="https://git.wiki.kernel.org/index.php/GitFaq#Can_I_add_empty_directories.3F">Can I add empty directories?</a></p><p>好吧，那我就在我的新建的文件夹中加个<code>.gitkeep</code>文件吧，至此问题解决。</p>]]></content>
    
    
    <summary type="html">克隆后的仓库中添加空目录无效</summary>
    
    
    
    <category term="工具" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="git" scheme="http://kiragoo.github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>本地配置多个git-ssh公钥</title>
    <link href="http://kiragoo.github.com/2021/04/15/%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit-ssh%E5%85%AC%E9%92%A5/"/>
    <id>http://kiragoo.github.com/2021/04/15/%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit-ssh%E5%85%AC%E9%92%A5/</id>
    <published>2021-04-15T15:02:11.000Z</published>
    <updated>2021-04-15T15:29:48.822Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说我们都会存在至少两个代码仓库，为了实现<code>ssh clone</code>的话，我们需要配置多个<code>ssh</code>公钥，但是默认情况下<code>git</code>只会从<code>.ssh/id_rsa</code>读取配置。</p><p>比如我自己，我一般会存在三个代码仓库，<code>gitee</code>，<code>github</code>，以及公司的私有仓库，那么就会触发我现在的这个问题。</p><hr><h1 id="生成多个ssh密钥"><a href="#生成多个ssh密钥" class="headerlink" title="生成多个ssh密钥"></a>生成多个<code>ssh</code>密钥</h1><p>一般情况下，<code>github</code>是我用的最多的，我会将默认的指定到<code>github</code>，默认不需要配置。那么对于<code>gitee</code>以及公司的代码仓库就需要配置了，这里我拿<code>gitee</code>举例。</p><h2 id="生成gitee密钥"><a href="#生成gitee密钥" class="headerlink" title="生成gitee密钥"></a>生成<code>gitee</code>密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 命名最好有辨识度，这里需要指定下文件，不然会以默认文件命名将已经生成的默认的.ssh&#x2F;id_rsa 进行覆盖了</span><br><span class="line">ssh-keygen -t rsa -f ~&#x2F;.ssh&#x2F;gitee_id_rsa -C &quot;xxxxx&quot;</span><br><span class="line"># 后续的操作就是疯狂的摁回车了</span><br></pre></td></tr></table></figure><h2 id="识别新的ssh-key密钥"><a href="#识别新的ssh-key密钥" class="headerlink" title="识别新的ssh key密钥"></a>识别新的<code>ssh key</code>密钥</h2><p>我们需要将新的密钥加入到<code>ssh agent</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~&#x2F;.ssh&#x2F;gitee_id_rsa</span><br></pre></td></tr></table></figure><h2 id="多账号配置config文件"><a href="#多账号配置config文件" class="headerlink" title="多账号配置config文件"></a>多账号配置<code>config</code>文件</h2><p>在<code>~/.ssh/config</code>文件中加入配置指定仓库的认证文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">    Port 22</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~&#x2F;.ssh&#x2F;gitee_id_rsa</span><br></pre></td></tr></table></figure><h2 id="仓库配置ssh-key"><a href="#仓库配置ssh-key" class="headerlink" title="仓库配置ssh key"></a>仓库配置<code>ssh key</code></h2><p>将<code>.ssh/gitee_id_rsa.pub</code>中的内容粘贴到仓库对应的<code>ssh key</code>配置中</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>我自己测试了下，具体结果如下，测试成功，剩下的就是愉快的通过<code>ssh</code>的方式克隆仓库代码了。<br><img src="http://tva4.sinaimg.cn/wap800/7a56748fgy1gpkuj7yv7rj219o05a0u6.jpg" alt="测试"> </p>]]></content>
    
    
    <summary type="html">本地生成多个ssh公钥并进行配置</summary>
    
    
    
    <category term="工具" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="http://kiragoo.github.com/categories/%E5%B7%A5%E5%85%B7/git/"/>
    
    
    <category term="git" scheme="http://kiragoo.github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码分析系列之Informer机制初探-1</title>
    <link href="http://kiragoo.github.com/2021/04/14/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8BInformer%E6%9C%BA%E5%88%B6%E5%88%9D%E6%8E%A2-1/"/>
    <id>http://kiragoo.github.com/2021/04/14/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8BInformer%E6%9C%BA%E5%88%B6%E5%88%9D%E6%8E%A2-1/</id>
    <published>2021-04-14T03:41:49.000Z</published>
    <updated>2021-04-15T11:51:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>此篇虽然为<code>Informer</code>机制，实际上还是和上篇<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-2/">kubernetes源码分析系列之kube-scheduler-2</a>有很大关系的，可以说也是<code>kube-scheduler</code>调度的<strong>驱动事件</strong>。</p><p>在整理的时候由于整个调用之间还是有很多细节的，首先还是先放上流程组织关系图，有个大概的认知。<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fly1gpkn4ym0g1j20t30q40vd.jpg" alt="Informer流程图"><br>对应的高清大图已经上传到本人仓库<a href="https://github.com/kiragoo/golang-coding/blob/master/k8s/img/inforer%E6%B5%81%E7%A8%8B%E5%9B%BE.jpeg">图片链接</a><br>类图关系如下：<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fly1gpknyybt09j216a0wcn0u.jpg" alt="Informer类图关系"><br><a href="https://github.com/kiragoo/golang-coding/blob/master/k8s/img/informer%E7%B1%BB%E5%9B%BE.jpeg">仓库地址</a></p><p>发生<code>Pod</code>调度分配资源，必然是存在一个事件触发调度，那么<code>Informer</code>就是充当这样的角色。<br>具体代码入口<code>cmd/kube-scheduler/app/server.go</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   &#x2F;&#x2F; 通过 &#96;goroutine&#96; 开始了所有的&#96;informers&#96;</span><br><span class="line">&#x2F;&#x2F; Start all informers.</span><br><span class="line">go cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">cc.InformerFactory.Start(ctx.Done())</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Wait for all caches to sync before scheduling.</span><br><span class="line">cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br></pre></td></tr></table></figure><p>下面进入正文，开始<code>Informer</code>分析之旅.<br><strong>以下分析默认包路径为<code>client-go</code></strong></p><hr><blockquote><p>先贴上官方<code>client-go</code>的架构图,其中黄色部分为<code>controller</code>部分，可以暂时忽略。<br><img src="http://tva1.sinaimg.cn/wap800/7a56748fly1gpjn86m8a0j20te0m2diu.jpg" alt="client-go架构图"></p></blockquote><h1 id="Demo入口"><a href="#Demo入口" class="headerlink" title="Demo入口"></a><code>Demo</code>入口</h1><p>借助<code>client-go</code>完成入口<code>demo</code>的编写<br><img src="http://tvax2.sinaimg.cn/wap800/7a56748fly1gpj69erya4j207l05gt8q.jpg" alt="目录结构"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">cfg, err :&#x3D; clientcmd.BuildConfigFromFlags(&quot;&quot;, &quot;&#x2F;xxx&#x2F;config&quot;)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F; 构建 &#96;clientset&#96; 对象，因为&#96;Informer&#96;需要通过&#96;ClientSet&#96;与&#96;Kubernertes API Server&#96;进行交互。</span><br><span class="line">clientset, err :&#x3D; kubernetes.NewForConfig(cfg)</span><br><span class="line"></span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F;创建&#96;stopCh&#96;对象用于在程序进程退出之前通知&#96;Informer&#96;提前退出，这是因为&#96;Informer&#96;是一个持久运行的&#96;goroutine&#96;。</span><br><span class="line">stopCh :&#x3D; make(chan struct&#123;&#125;)</span><br><span class="line"></span><br><span class="line">defer close(stopCh)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 实例化&#96;SharedInformer&#96;对象@NewSharedInformerFactory</span><br><span class="line">sharedInformers :&#x3D; informers.NewSharedInformerFactory(clientset, time.Minute)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 示例主要针对的是&#96;Pod&#96;资源的&#96;Informer&#96;对象。通过实现回调函数来实现具体的逻辑，这里主要是作为演示使用@Informer</span><br><span class="line">informer :&#x3D; sharedInformers.Core().V1().Pods().Informer()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加informer事件回调函数的逻辑，这里只做演示</span><br><span class="line">informer.AddEventHandler(cache.ResourceEventHandlerFuncs&#123;</span><br><span class="line">AddFunc: func(obj interface&#123;&#125;) &#123;</span><br><span class="line">mObj :&#x3D; obj.(v1.Object)</span><br><span class="line">log.Printf(&quot;New Pod Added to Store: %s&quot;, mObj.GetName())</span><br><span class="line">&#125;,</span><br><span class="line">UpdateFunc: func(oldObj, newObj interface&#123;&#125;) &#123;</span><br><span class="line">oObj :&#x3D; oldObj.(v1.Object)</span><br><span class="line">nObj :&#x3D; newObj.(v1.Object)</span><br><span class="line">log.Printf(&quot;%s Pod updated to %s&quot;, oObj.GetName(), nObj.GetName())</span><br><span class="line">&#125;,</span><br><span class="line">DeleteFunc: func(obj interface&#123;&#125;) &#123;</span><br><span class="line">mObj :&#x3D; obj.(v1.Object)</span><br><span class="line">log.Printf(&quot;Pod Deleted from Store; %s&quot;, mObj.GetName())</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; @Run</span><br><span class="line">informer.Run(stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功运行之后我们会看到如下日志输出：<br><img src="http://tvax4.sinaimg.cn/wap800/7a56748fly1gpj6ijmomxj20qa06habj.jpg" alt="日志"></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><hr><h2 id="NewSharedInformerFactory"><a href="#NewSharedInformerFactory" class="headerlink" title="NewSharedInformerFactory"></a><code>NewSharedInformerFactory</code></h2><blockquote><p><code>informers/factory.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 构建 sharedInformerFactory 实例</span><br><span class="line">func NewSharedInformerFactory(client kubernetes.Interface, defaultResync time.Duration) SharedInformerFactory &#123;</span><br><span class="line">return NewSharedInformerFactoryWithOptions(client, defaultResync)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据额外的 options 构造 SharedInformerFactory 实例</span><br><span class="line">func NewSharedInformerFactoryWithOptions(client kubernetes.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory &#123;</span><br><span class="line">&#x2F;&#x2F; 初始化sharedInformerFactory @sharedInformerFactory</span><br><span class="line">factory :&#x3D; &amp;sharedInformerFactory&#123;</span><br><span class="line">client:           client,</span><br><span class="line">namespace:        v1.NamespaceAll,</span><br><span class="line">defaultResync:    defaultResync,</span><br><span class="line">&#x2F;&#x2F;@informers 初始化informers</span><br><span class="line">informers:        make(map[reflect.Type]cache.SharedIndexInformer),</span><br><span class="line">startedInformers: make(map[reflect.Type]bool),</span><br><span class="line">customResync:     make(map[reflect.Type]time.Duration),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Apply all options</span><br><span class="line">for _, opt :&#x3D; range options &#123;</span><br><span class="line">factory &#x3D; opt(factory)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return factory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Informers</code><blockquote><p><code>tools/cache/shared_informers.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在原有的 SharedInder 基础上扩展了 Index 的能力</span><br><span class="line">type SharedIndexInformer interface &#123;</span><br><span class="line">&#x2F;&#x2F;@SharedInformer</span><br><span class="line">SharedInformer</span><br><span class="line">&#x2F;&#x2F; AddIndexers add indexers to the informer before it starts.</span><br><span class="line">AddIndexers(indexers Indexers) error</span><br><span class="line">GetIndexer() Indexer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@SharedInformer</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type SharedInformer interface &#123;</span><br><span class="line">&#x2F;&#x2F; 在 shared informer中添加时间处理器，虽然事件是顺序性的传递给处理器，但是在不同的事件处理中并没有依赖关系 @AddEventHandler</span><br><span class="line">AddEventHandler(handler ResourceEventHandler)</span><br><span class="line">&#x2F;&#x2F; 在 resync 期间添加事件处理器，在 resync为0阶段，意味着该事件处理器并不关心 resyncs。resync操作包含对 informer本地缓存中的每个对象的handler一个更新的通知。即使在非0阶段，一些informer压根不做resync，#TODO</span><br><span class="line">AddEventHandlerWithResyncPeriod(handler ResourceEventHandler, resyncPeriod time.Duration)</span><br><span class="line">&#x2F;&#x2F; GetStore 将 informer 的本地缓存作为存储返回</span><br><span class="line">GetStore() Store</span><br><span class="line">&#x2F;&#x2F; GetController 已经废除，不再使用</span><br><span class="line">GetController() Controller</span><br><span class="line">&#x2F;&#x2F; Run 启动并运行 shared informer</span><br><span class="line">&#x2F;&#x2F; The informer will be stopped when stopCh is closed.</span><br><span class="line">Run(stopCh &lt;-chan struct&#123;&#125;)</span><br><span class="line">&#x2F;&#x2F; 当 shared informer发生至少一次全量的通知之后将返回true</span><br><span class="line">HasSynced() bool</span><br><span class="line">&#x2F;&#x2F; LastSyncResourceVersion 对此操作非线程安全</span><br><span class="line">LastSyncResourceVersion() string</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当 ListAndWatch 发生异常则触发此handler处理</span><br><span class="line">SetWatchErrorHandler(handler WatchErrorHandler) error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@sharedInformerFactory</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type sharedInformerFactory struct &#123;</span><br><span class="line">client           kubernetes.Interface</span><br><span class="line">namespace        string</span><br><span class="line">tweakListOptions internalinterfaces.TweakListOptionsFunc</span><br><span class="line">lock             sync.Mutex</span><br><span class="line">defaultResync    time.Duration</span><br><span class="line">customResync     map[reflect.Type]time.Duration</span><br><span class="line">&#x2F;&#x2F; 存放于map中做初始化</span><br><span class="line">informers map[reflect.Type]cache.SharedIndexInformer</span><br><span class="line">&#x2F;&#x2F; startedInformers is used for tracking which informers have been started.</span><br><span class="line">&#x2F;&#x2F; This allows Start() to be called multiple times safely.</span><br><span class="line">startedInformers map[reflect.Type]bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Informer"><a href="#Informer" class="headerlink" title="@Informer"></a><code>@Informer</code></h2><blockquote><p><code>informers/core/v1/pod.go</code></p></blockquote><p>此示例代码为 <code>PodInformer</code><br>每个<code>kubernetes</code>资源上都实现了<code>Informer</code>机制，都实现了<code>Informer()</code>和<code>Lister()</code>方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; PodInformer provides access to a shared informer and lister for</span><br><span class="line">&#x2F;&#x2F; Pods.</span><br><span class="line">type PodInformer interface &#123;</span><br><span class="line">&#x2F;&#x2F; 具体还是为 SharedIndexInformer</span><br><span class="line">Informer() cache.SharedIndexInformer</span><br><span class="line">Lister() v1.PodLister</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看下其他资源实际上都实现了此两种方法：<br><img src="http://tva3.sinaimg.cn/wap800/7a56748fly1gpj8joxk2hj20wn0epgpf.jpg" alt="informer-defition"><br>调用不同的资源<code>informer</code>就如示例中代码一样<code>informer := sharedInformers.Core().V1().Pods().Informer()</code>定义不同资源的<code>Informer</code>允许监控不同资源的资源事件，然后通过实现回调函数执行对应的具体逻辑。</p><p><code>PodInformer.Informer()</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func (f *podInformer) Informer() cache.SharedIndexInformer &#123;</span><br><span class="line">&#x2F;&#x2F;@InformerFor</span><br><span class="line">return f.factory.InformerFor(&amp;corev1.Pod&#123;&#125;, f.defaultInformer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@InformerFor</code><blockquote><p><code>informers/factory.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; InternalInformerFor returns the SharedIndexInformer for obj using an internal</span><br><span class="line">&#x2F;&#x2F; client.</span><br><span class="line">func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer &#123;</span><br><span class="line">f.lock.Lock()</span><br><span class="line">defer f.lock.Unlock()</span><br><span class="line"></span><br><span class="line">informerType :&#x3D; reflect.TypeOf(obj)</span><br><span class="line">informer, exists :&#x3D; f.informers[informerType]</span><br><span class="line">if exists &#123;</span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resyncPeriod, exists :&#x3D; f.customResync[informerType]</span><br><span class="line">if !exists &#123;</span><br><span class="line">resyncPeriod &#x3D; f.defaultResync</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">informer &#x3D; newFunc(f.client, resyncPeriod)</span><br><span class="line">f.informers[informerType] &#x3D; informer</span><br><span class="line"></span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里可以看到最终完成了对于<code>informer</code>的创建，并且注册到了<code>Struct object</code>中，完成了对自己的<code>Informer</code>的注册。</li></ul><hr><h2 id="Run"><a href="#Run" class="headerlink" title="@Run"></a><code>@Run</code></h2><blockquote><p><code>client-go/tools/cache/shared_informer.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">func (s *sharedIndexInformer) Run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">&#x2F;&#x2F;只是捕获 crash 及 记录 error 日志</span><br><span class="line">defer utilruntime.HandleCrash()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;构造 DeltaFIFOOptions,然后它根据得到的 key 拆分函数和Store index 创建一个FIFO队列，这个队列是一个先进先出的队列，主要用来保存对象的各种事件。@NeDletaFIFOWithOptions</span><br><span class="line">fifo :&#x3D; NewDeltaFIFOWithOptions(DeltaFIFOOptions&#123;</span><br><span class="line">KnownObjects:          s.indexer,</span><br><span class="line">EmitDeltaTypeReplaced: true,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 构造Config,下面根据这个 config 来初始化 controller,这个 controller 是 client-go 中的 Cache controller，主要用来控制从APIServer 获得对象的 cache以及更新对象</span><br><span class="line">cfg :&#x3D; &amp;Config&#123;</span><br><span class="line">Queue:            fifo,</span><br><span class="line">ListerWatcher:    s.listerWatcher,</span><br><span class="line">ObjectType:       s.objectType,</span><br><span class="line">FullResyncPeriod: s.resyncCheckPeriod,</span><br><span class="line">RetryOnError:     false,</span><br><span class="line">ShouldResync:     s.processor.shouldResync,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; @HandleDeltas,通过 Process 处理Deltas 记录的事件</span><br><span class="line">Process:           s.HandleDeltas,</span><br><span class="line">WatchErrorHandler: s.watchErrorHandler,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">s.startedLock.Lock()</span><br><span class="line">defer s.startedLock.Unlock()</span><br><span class="line">&#x2F;&#x2F; 通过 cfg 来创建 controller</span><br><span class="line">&#x2F;&#x2F; @controller</span><br><span class="line">s.controller &#x3D; New(cfg)</span><br><span class="line">s.controller.(*controller).clock &#x3D; s.clock</span><br><span class="line">s.started &#x3D; true</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Separate stop channel because Processor should be stopped strictly after controller</span><br><span class="line">processorStopCh :&#x3D; make(chan struct&#123;&#125;)</span><br><span class="line">var wg wait.Group</span><br><span class="line">defer wg.Wait()              &#x2F;&#x2F; Wait for Processor to stop</span><br><span class="line">&#x2F;&#x2F; @s.cacheMutationDetector.Run</span><br><span class="line">defer close(processorStopCh) &#x2F;&#x2F; Tell Processor to stop</span><br><span class="line">wg.StartWithChannel(processorStopCh, s.cacheMutationDetector.Run)</span><br><span class="line">&#x2F;&#x2F;@s.processor.run 这边才是真正的Listering调用</span><br><span class="line">wg.StartWithChannel(processorStopCh, s.processor.run)</span><br><span class="line"></span><br><span class="line">defer func() &#123;</span><br><span class="line">s.startedLock.Lock()</span><br><span class="line">defer s.startedLock.Unlock()</span><br><span class="line">s.stopped &#x3D; true &#x2F;&#x2F; Don&#39;t want any new listeners</span><br><span class="line">&#125;()</span><br><span class="line">&#x2F;&#x2F; controller Run</span><br><span class="line">s.controller.Run(stopCh)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><code>@NewDletaFIFOWithOptions</code>实际的调用我们需要重点关注下，因为这边是存储各种资源对象的关键地方，根据得到的 <code>key</code>拆分函数和<code>Store index</code>构建<code>DeltaFIFO</code>，主要用来保存对象的各种事件。<blockquote><p><code>tools/cache/delta_fifo.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 返回一个处理其中元素的队列</span><br><span class="line">func NewDeltaFIFOWithOptions(opts DeltaFIFOOptions) *DeltaFIFO &#123;</span><br><span class="line">if opts.KeyFunction &#x3D;&#x3D; nil &#123;</span><br><span class="line">opts.KeyFunction &#x3D; MetaNamespaceKeyFunc</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@DeltaFIFO</span><br><span class="line">f :&#x3D; &amp;DeltaFIFO&#123;</span><br><span class="line">&#x2F;&#x2F; @Deltas 就是用 map 来存放数据</span><br><span class="line">items:        map[string]Deltas&#123;&#125;,</span><br><span class="line">queue:        []string&#123;&#125;,</span><br><span class="line">keyFunc:      opts.KeyFunction,</span><br><span class="line">knownObjects: opts.KnownObjects,</span><br><span class="line"></span><br><span class="line">emitDeltaTypeReplaced: opts.EmitDeltaTypeReplaced,</span><br><span class="line">&#125;</span><br><span class="line">f.cond.L &#x3D; &amp;f.lock</span><br><span class="line">return f</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>@DeltaFIFO</code><br>对于DeltaFIFO的描述在文档上描述很是详细，关键点翻译如下：<blockquote><p>DeltaFIFO 类似 FIFO，但是在两方面存在不同。第一点是其中的<code>key</code>不是对象而是<code>Deltas</code>，实际上该对象的<code>Delta</code>组成的切片，第二点是<code>DeltaFIFO</code>增加了额外的两个方法：<code>Replaced</code>和<code>Sync</code><br><code>DeltaFIFO</code> 是个生产消费者模式的队列，其中<code>Reflector</code>作为生产者，而消费者是那些调用了<code>Pop()</code>方法的使用者。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type DeltaFIFO struct &#123;</span><br><span class="line">lock sync.RWMutex</span><br><span class="line">cond sync.Cond</span><br><span class="line">items map[string]Deltas</span><br><span class="line">queue []string</span><br><span class="line">populated bool</span><br><span class="line">initialPopulationCount int</span><br><span class="line">keyFunc KeyFunc</span><br><span class="line">knownObjects KeyListerGetter</span><br><span class="line">closed bool</span><br><span class="line">emitDeltaTypeReplaced bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Deltas</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Deltas []Delta</span><br><span class="line"></span><br><span class="line">type Delta struct&#123;</span><br><span class="line">TypeDletaType</span><br><span class="line">Object interface&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type DletaType string</span><br><span class="line"></span><br><span class="line">const &#123;</span><br><span class="line">Added   DeltaType &#x3D; &quot;Added&quot;</span><br><span class="line">Updated DeltaType &#x3D; &quot;Updated&quot;</span><br><span class="line">Deleted DeltaType &#x3D; &quot;Deleted&quot;</span><br><span class="line">Replaced DeltaType &#x3D; &quot;Replaced&quot;</span><br><span class="line">Sync DeltaType &#x3D; &quot;Sync&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><code>@HandleDeltas</code></p><blockquote><p><code>tools/cache/shared_informer.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">func (s *sharedIndexInformer) HandleDeltas(obj interface&#123;&#125;) error &#123;</span><br><span class="line">s.blockDeltas.Lock()</span><br><span class="line">defer s.blockDeltas.Unlock()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 遍历处理</span><br><span class="line">for _, d :&#x3D; range obj.(Deltas) &#123;</span><br><span class="line">&#x2F;&#x2F; 根据事件类型进行相关处理</span><br><span class="line">switch d.Type &#123;</span><br><span class="line">case Sync, Replaced, Added, Updated:</span><br><span class="line">s.cacheMutationDetector.AddObject(d.Object)</span><br><span class="line">if old, exists, err :&#x3D; s.indexer.Get(d.Object); err &#x3D;&#x3D; nil &amp;&amp; exists &#123;</span><br><span class="line">if err :&#x3D; s.indexer.Update(d.Object); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isSync :&#x3D; false</span><br><span class="line">switch &#123;</span><br><span class="line">case d.Type &#x3D;&#x3D; Sync:</span><br><span class="line">&#x2F;&#x2F; Sync events are only propagated to listeners that requested resync</span><br><span class="line">isSync &#x3D; true</span><br><span class="line">case d.Type &#x3D;&#x3D; Replaced:</span><br><span class="line">if accessor, err :&#x3D; meta.Accessor(d.Object); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">if oldAccessor, err :&#x3D; meta.Accessor(old); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">&#x2F;&#x2F; Replaced events that didn&#39;t change resourceVersion are treated as resync events</span><br><span class="line">&#x2F;&#x2F; and only propagated to listeners that requested resync</span><br><span class="line">isSync &#x3D; accessor.GetResourceVersion() &#x3D;&#x3D; oldAccessor.GetResourceVersion()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@distribute</span><br><span class="line">s.processor.distribute(updateNotification&#123;oldObj: old, newObj: d.Object&#125;, isSync)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if err :&#x3D; s.indexer.Add(d.Object); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">s.processor.distribute(addNotification&#123;newObj: d.Object&#125;, false)</span><br><span class="line">&#125;</span><br><span class="line">case Deleted:</span><br><span class="line">if err :&#x3D; s.indexer.Delete(d.Object); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">s.processor.distribute(deleteNotification&#123;oldObj: d.Object&#125;, false)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@distribute</code></p><blockquote><p><code>tools/cache/shared_informers.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func (p *sharedProcessor) distribute(obj interface&#123;&#125;, sync bool) &#123;</span><br><span class="line">p.listenersLock.RLock()</span><br><span class="line">defer p.listenersLock.RUnlock()</span><br><span class="line"></span><br><span class="line">if sync &#123;</span><br><span class="line">for _, listener :&#x3D; range p.syncingListeners &#123;</span><br><span class="line">listener.add(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; 这里我们挑选一个简单的追踪跟进@p.listeners</span><br><span class="line">for _, listener :&#x3D; range p.listeners &#123;</span><br><span class="line">listener.add(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@listeners</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; sharedProcessor 属性包含 processorListener 的集合，另外能够发布消息通知对象到对应的listeners</span><br><span class="line">type sharedProcessor struct &#123;</span><br><span class="line">listenersStarted bool</span><br><span class="line">listenersLock    sync.RWMutex</span><br><span class="line">&#x2F;&#x2F; @processorListener</span><br><span class="line">listeners        []*processorListener</span><br><span class="line">syncingListeners []*processorListener</span><br><span class="line">clock            clock.Clock</span><br><span class="line">wg               wait.Group</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@processorListener</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; processorListener 将 sharedProcessor转发到 ResourceEventHandler。实现方式是使用两个 goroutines，两个不带缓冲的 channel 以及 ring buffer</span><br><span class="line">type processorListener struct &#123;</span><br><span class="line">nextCh chan interface&#123;&#125;</span><br><span class="line">addCh  chan interface&#123;&#125;</span><br><span class="line">handler ResourceEventHandler</span><br><span class="line">pendingNotifications buffer.RingGrowing</span><br><span class="line">requestedResyncPeriod time.Duration</span><br><span class="line">resyncPeriod time.Duration</span><br><span class="line">nextResync time.Time</span><br><span class="line">resyncLock sync.Mutex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@controller</code> 这个 <code>controller</code> 就是 <code>client-go</code> 中的 <code>Cache controller</code>，主要用来控制从<code>APIServer</code> 获取的对象的<code>cache</code>以及更新对象</p><blockquote><p><code>tools/cache/controller.go</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type Controller interface &#123;</span><br><span class="line">&#x2F;&#x2F; Run 主要处理两件事情，第一个作用主要用来构造并将Config对象中ListerWatcher获取的对象&#x2F;通知传递到Config对象的Queue中，另一个作用则为重复的从Queue中Pop对象让Config中的ProcessFunc处理</span><br><span class="line">Run(stopCh &lt;-chan struct&#123;&#125;)</span><br><span class="line"></span><br><span class="line">HasSynced() bool</span><br><span class="line"></span><br><span class="line">LastSyncResourceVersion() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@s.cacheMutationDetector.Run</code></p></li><li><p>@s.processor.run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">func (p *sharedProcessor) run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">func() &#123;</span><br><span class="line">p.listenersLock.RLock()</span><br><span class="line">defer p.listenersLock.RUnlock()</span><br><span class="line">&#x2F;&#x2F; 注意前面@Informer的使用 </span><br><span class="line">for _, listener :&#x3D; range p.listeners &#123;</span><br><span class="line">p.wg.Start(listener.run)</span><br><span class="line">p.wg.Start(listener.pop)</span><br><span class="line">&#125;</span><br><span class="line">p.listenersStarted &#x3D; true</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-stopCh</span><br><span class="line">p.listenersLock.RLock()</span><br><span class="line">defer p.listenersLock.RUnlock()</span><br><span class="line">for _, listener :&#x3D; range p.listeners &#123;</span><br><span class="line">close(listener.addCh) &#x2F;&#x2F; Tell .pop() to stop. .pop() will tell .run() to stop</span><br><span class="line">&#125;</span><br><span class="line">p.wg.Wait() &#x2F;&#x2F; Wait for all .pop() and .run() to stop</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终是 <code>controller.Run(stopCh)</code>的执行。继续往下看 <code>client-go/tools/cache/controller.go</code> 中 <code>Run</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; controller 就是比较底层的具体实现了</span><br><span class="line">func (c *controller) Run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">defer utilruntime.HandleCrash()</span><br><span class="line">go func() &#123;</span><br><span class="line">&lt;-stopCh</span><br><span class="line">c.config.Queue.Close()</span><br><span class="line">&#125;()</span><br><span class="line">r :&#x3D; NewReflector(</span><br><span class="line">c.config.ListerWatcher,</span><br><span class="line">c.config.ObjectType,</span><br><span class="line">c.config.Queue,</span><br><span class="line">c.config.FullResyncPeriod,</span><br><span class="line">)</span><br><span class="line">r.ShouldResync &#x3D; c.config.ShouldResync</span><br><span class="line">r.WatchListPageSize &#x3D; c.config.WatchListPageSize</span><br><span class="line">r.clock &#x3D; c.clock</span><br><span class="line">if c.config.WatchErrorHandler !&#x3D; nil &#123;</span><br><span class="line">r.watchErrorHandler &#x3D; c.config.WatchErrorHandler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.reflectorMutex.Lock()</span><br><span class="line">c.reflector &#x3D; r</span><br><span class="line">c.reflectorMutex.Unlock()</span><br><span class="line"></span><br><span class="line">var wg wait.Group</span><br><span class="line">&#x2F;&#x2F; 注意这边的 r.Run 运行@r.Run</span><br><span class="line">wg.StartWithChannel(stopCh, r.Run)</span><br><span class="line">&#x2F;&#x2F; 进行队列操作 @c.processLoop</span><br><span class="line">wait.Until(c.processLoop, time.Second, stopCh)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此整个的<code>Run</code>算是真正的启动了。</p></li><li><p>@r.Run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Run 方法将重复的使用ListAndWatch获取所有的对象。</span><br><span class="line">func (r *Reflector) Run(stopCh &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">klog.V(2).Infof(&quot;Starting reflector %s (%s) from %s&quot;, r.expectedTypeName, r.resyncPeriod, r.name)</span><br><span class="line">wait.BackoffUntil(func() &#123;</span><br><span class="line">if err :&#x3D; r.ListAndWatch(stopCh); err !&#x3D; nil &#123;</span><br><span class="line">r.watchErrorHandler(r, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, r.backoffManager, true, stopCh)</span><br><span class="line">klog.V(2).Infof(&quot;Stopping reflector %s (%s) from %s&quot;, r.expectedTypeName, r.resyncPeriod, r.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@c.processLoop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">func (c *controller) processLoop() &#123;</span><br><span class="line">for &#123;</span><br><span class="line">&#x2F;&#x2F; 队列POP操作，Pop 操作会原子性的将其中一个key获取出来，同时移除其在Store中的存储。</span><br><span class="line">obj, err :&#x3D; c.config.Queue.Pop(PopProcessFunc(c.config.Process))</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">if err &#x3D;&#x3D; ErrFIFOClosed &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">if c.config.RetryOnError &#123;</span><br><span class="line">&#x2F;&#x2F; This is the safe way to re-enqueue.</span><br><span class="line">c.config.Queue.AddIfNotPresent(obj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Shared-Informer共享机制"><a href="#Shared-Informer共享机制" class="headerlink" title="Shared Informer共享机制"></a><code>Shared Informer</code>共享机制</h2><p>通过<code>Informer</code> 内部的定义可以知道，实际上这边是<code>cache.SharedIndexInformer</code>，根据命名我们可以知道这是可共享的，即可以使用同一类资源<code>Informer</code>共享一个<code>Reflector</code>，来节省资源.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type sharedInformerFactory struct &#123;</span><br><span class="line">client           kubernetes.Interface</span><br><span class="line">namespace        string</span><br><span class="line">tweakListOptions internalinterfaces.TweakListOptionsFunc</span><br><span class="line">lock             sync.Mutex</span><br><span class="line">defaultResync    time.Duration</span><br><span class="line">customResync     map[reflect.Type]time.Duration</span><br><span class="line">&#x2F;&#x2F;通过 map 来建立共享 informer 缓存</span><br><span class="line">informers map[reflect.Type]cache.SharedIndexInformer</span><br><span class="line">&#x2F;&#x2F; startedInformers is used for tracking which informers have been started.</span><br><span class="line">&#x2F;&#x2F; This allows Start() to be called multiple times safely.</span><br><span class="line">startedInformers map[reflect.Type]bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type podInformer struct &#123;</span><br><span class="line">factory          internalinterfaces.SharedInformerFactory</span><br><span class="line">tweakListOptions internalinterfaces.TweakListOptionsFunc</span><br><span class="line">namespace        string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中的 <code>factory</code>的定义.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; SharedInformerFactory a small interface to allow for adding an informer without an import cycle</span><br><span class="line">type SharedInformerFactory interface &#123;</span><br><span class="line">Start(stopCh &lt;-chan struct&#123;&#125;)</span><br><span class="line">InformerFor(obj runtime.Object, newFunc NewInformerFunc) cache.SharedIndexInformer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>InformerFor</code> 方法在 <code>factory</code> 中具体实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; InformerFor 函数添加了不同资源的Informer，在添加过程中如果已经存在同类型的资源Informer，则返回当前Informer，不在继续添加</span><br><span class="line">func (f *sharedInformerFactory) InformerFor(obj runtime.Object, newFunc internalinterfaces.NewInformerFunc) cache.SharedIndexInformer &#123;</span><br><span class="line">f.lock.Lock()</span><br><span class="line">defer f.lock.Unlock()</span><br><span class="line"></span><br><span class="line">informerType :&#x3D; reflect.TypeOf(obj)</span><br><span class="line">informer, exists :&#x3D; f.informers[informerType]</span><br><span class="line">if exists &#123;</span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resyncPeriod, exists :&#x3D; f.customResync[informerType]</span><br><span class="line">if !exists &#123;</span><br><span class="line">resyncPeriod &#x3D; f.defaultResync</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">informer &#x3D; newFunc(f.client, resyncPeriod)</span><br><span class="line">f.informers[informerType] &#x3D; informer</span><br><span class="line"></span><br><span class="line">return informer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reflector"><a href="#Reflector" class="headerlink" title="Reflector"></a><code>Reflector</code></h1><p>通过源码查看下<code>Reflector</code>具体的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Reflector 监控指定的资源，并将变化映射到给出的存储中</span><br><span class="line">type Reflector struct &#123;</span><br><span class="line">name string</span><br><span class="line">expectedTypeName string</span><br><span class="line">expectedType reflect.Type</span><br><span class="line">expectedGVK *schema.GroupVersionKind</span><br><span class="line">store Store</span><br><span class="line">listerWatcher ListerWatcher</span><br><span class="line">backoffManager wait.BackoffManager</span><br><span class="line">initConnBackoffManager wait.BackoffManager</span><br><span class="line"></span><br><span class="line">resyncPeriod time.Duration</span><br><span class="line">ShouldResync func() bool</span><br><span class="line">clock clock.Clock</span><br><span class="line">paginatedResult bool</span><br><span class="line">lastSyncResourceVersion string</span><br><span class="line">isLastSyncResourceVersionUnavailable bool</span><br><span class="line">lastSyncResourceVersionMutex sync.RWMutex</span><br><span class="line">WatchListPageSize int64</span><br><span class="line">watchErrorHandler WatchErrorHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h1><p>通过以上源码分析，从全局接口设计及调用关系整理如下架构图</p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之 Informer 机制初探</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="Informer" scheme="http://kiragoo.github.com/categories/kubernetes/Informer/"/>
    
    <category term="client-go" scheme="http://kiragoo.github.com/categories/kubernetes/Informer/client-go/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Informer" scheme="http://kiragoo.github.com/tags/Informer/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode之最大数</title>
    <link href="http://kiragoo.github.com/2021/04/12/LeetCode%E4%B9%8B%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>http://kiragoo.github.com/2021/04/12/LeetCode%E4%B9%8B%E6%9C%80%E5%A4%A7%E6%95%B0/</id>
    <published>2021-04-12T13:35:49.000Z</published>
    <updated>2021-04-12T13:43:04.087Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：<br>给定一组非负整数 nums，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p><p>注意：输出结果可能非常大，所以你需要返回一个字符串而不是整数。<br><img src="http://tva3.sinaimg.cn/wap800/7a56748fgy1gphahet6udj210g0yon05.jpg" alt="描述"><br><a href="https://leetcode-cn.com/problems/largest-number/">链接</a></p><h1 id="leetcode每日一题"><a href="#leetcode每日一题" class="headerlink" title="leetcode每日一题"></a>leetcode每日一题</h1><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    private class  LargerNumberComparator implements Comparator&lt;String&gt; &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public int compare(String a, String b) &#123;</span><br><span class="line">            String order1 &#x3D; a + b;</span><br><span class="line">            String order2 &#x3D; b + a;</span><br><span class="line">           return order2.compareTo(order1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String largestNumber(int[] nums) &#123;</span><br><span class="line">        String[] tmpNums &#x3D; new String[nums.length];</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.length;i++) tmpNums[i] &#x3D;String.valueOf(nums[i]);</span><br><span class="line">        Arrays.sort(tmpNums, new LargerNumberComparator());</span><br><span class="line">        if(tmpNums[0].equals(&quot;0&quot;)) return &quot;0&quot;;</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        for(String s:tmpNums)&#123;</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;golang</span><br><span class="line">func largestNumber(nums []int) string &#123;</span><br><span class="line">ss :&#x3D; make([]string, len(nums))</span><br><span class="line">for i, num :&#x3D; range nums &#123;</span><br><span class="line">ss[i] &#x3D; strconv.Itoa(num)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">sort.Slice(ss, func(i, j int) bool &#123;</span><br><span class="line">return ss[i]+ss[j] &gt;&#x3D; ss[j]+ss[i]</span><br><span class="line">&#125;)</span><br><span class="line">o :&#x3D; strings.Join(ss, &quot;&quot;)</span><br><span class="line">if o[0] &#x3D;&#x3D; &#39;0&#39; &#123;</span><br><span class="line">return &quot;0&quot;</span><br><span class="line">&#125;</span><br><span class="line">return o</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">leetcode 每日一题</summary>
    
    
    
    <category term="编程" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
    <category term="golang" scheme="http://kiragoo.github.com/tags/golang/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/tags/leetcode/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码分析系列之kube-scheduler-2</title>
    <link href="http://kiragoo.github.com/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-2/"/>
    <id>http://kiragoo.github.com/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-2/</id>
    <published>2021-04-12T08:50:48.000Z</published>
    <updated>2021-04-12T16:05:29.380Z</updated>
    
    <content type="html"><![CDATA[<p>继上篇<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/">kubernetes源码分析系列之kube-scheduler-1</a> 了解了大概的入口流程之后，此篇文章重点分析下 <code>pkg/scheduler</code> 包中的内容，scheduler初始化及运行流程分析。</p><p>在<a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduler.md">sig-scheduling</a> 中可以了解到关于<code>scheduler</code>设计的目的。</p><p><em>首先我们面对的问题还是如何找到分析的入口</em>，鉴于<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/">kubernetes源码分析系列之kube-scheduler-1</a> 得知在 <code>cmd/kube-scheduler/scheduler.go</code> 中关于 <code>scheduler</code> 的创建在<code>setUp</code>函数中，其中有一段代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Create the scheduler.</span><br><span class="line">sched, err :&#x3D; scheduler.New(cc.Client,</span><br><span class="line">cc.InformerFactory,</span><br><span class="line">cc.PodInformer,</span><br><span class="line">recorderFactory,</span><br><span class="line">ctx.Done(),</span><br><span class="line">scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>那么话不多说，这里我们从 <code>pkg/scheduler/scheduler.go</code> 进行分析<br><strong>不过有一说一，<code>kubernetes</code>源码的注释已经做的很nice了，我们可以通过通读源码就理解了作者的意图了</strong></p><h1 id="pkg-scheduler-scheduler-go"><a href="#pkg-scheduler-scheduler-go" class="headerlink" title="pkg/scheduler/scheduler.go"></a><code>pkg/scheduler/scheduler.go</code></h1><p>以下只对关键性的内容做分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过监控未调度的 &#96;pods&#96;，通过与 &#96;api server&#96;交互实现发现合适的节点进行调度绑定</span><br><span class="line">type Scheduler struct &#123;</span><br><span class="line">&#x2F;&#x2F; 根据 &#96;SchedulerCache&#96; 缓存发生的变化可以被 NodeLister 监听到</span><br><span class="line">SchedulerCache internalcache.Cache</span><br><span class="line"></span><br><span class="line">Algorithm core.ScheduleAlgorithm</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NextPod 必须为方法，为了保证直到下一个&#96;pod&#96;为可调度状态实现阻塞功能</span><br><span class="line">    &#x2F;&#x2F; 这里并没有使用 &#96;channel&#96;是因为调度&#96;pod&#96;可能会花费一段时间，另外我们也不期望当</span><br><span class="line">&#x2F;&#x2F; &#96;pods&#96; 在 &#96;channel&#96; 中时变成‘陈旧’状态</span><br><span class="line">NextPod func() *framework.QueuedPodInfo</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Error is called if there is an error. It is passed the pod in</span><br><span class="line">&#x2F;&#x2F; question, and the error</span><br><span class="line">Error func(*framework.QueuedPodInfo, error)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Close this to shut down the scheduler.</span><br><span class="line">StopEverything &lt;-chan struct&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; SchedulingQueue 队列用于存放被调度的 &#96;pods&#96;</span><br><span class="line">SchedulingQueue internalqueue.SchedulingQueue</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Profiles are the scheduling profiles.</span><br><span class="line">Profiles profile.Map</span><br><span class="line"></span><br><span class="line">scheduledPodsHasSynced func() bool</span><br><span class="line"></span><br><span class="line">client clientset.Interface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此我们继续回到 <code>scheduler.New&#123;***&#125;</code> 的部分，继续了解在 <code>pkg/scheduler/scheduler.go</code> 中究竟做了哪些事情。</p><h2 id="New函数"><a href="#New函数" class="headerlink" title="New函数"></a><code>New函数</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; New returns a Scheduler</span><br><span class="line">func New(client clientset.Interface,</span><br><span class="line">informerFactory informers.SharedInformerFactory,</span><br><span class="line">podInformer coreinformers.PodInformer,</span><br><span class="line">recorderFactory profile.RecorderFactory,</span><br><span class="line">stopCh &lt;-chan struct&#123;&#125;,</span><br><span class="line">opts ...Option) (*Scheduler, error) &#123;</span><br><span class="line"></span><br><span class="line">stopEverything :&#x3D; stopCh</span><br><span class="line">if stopEverything &#x3D;&#x3D; nil &#123;</span><br><span class="line">stopEverything &#x3D; wait.NeverStop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">options :&#x3D; defaultSchedulerOptions</span><br><span class="line">for _, opt :&#x3D; range opts &#123;</span><br><span class="line">opt(&amp;options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">schedulerCache :&#x3D; internalcache.New(30*time.Second, stopEverything)</span><br><span class="line">    &#x2F;&#x2F; 这里需要注意下，此处的 &#96;plugins&#96; 注册是针对于 &#96;in-tree&#96; 中的插件，如果我们根据 &#96;schduler framework&#96; 进行的自定义插件，不是通过这边注册 而是通过 &#96;frameworkOutOfTreeRegistry&#96; 进行注册,此阶段将 &#96;in-tree&#96; 及 &#96;out-of-tree&#96; 中的 &#96;plugins&#96; 进行合并</span><br><span class="line">registry :&#x3D; frameworkplugins.NewInTreeRegistry()</span><br><span class="line">if err :&#x3D; registry.Merge(options.frameworkOutOfTreeRegistry); err !&#x3D; nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化 &#96;snapshot&#96;， &#96;snapshot&#96; 为 &#96;cache&#96; 中关于节点信息以及节点树书序。在调度生命周期初始阶段使用&#96;snapshot&#96;，并且在此周期内使用</span><br><span class="line">snapshot :&#x3D; internalcache.NewEmptySnapshot()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @2 初始化 &#96;Configurator&#96;，用于构造 &#96;scheduler&#96;</span><br><span class="line">configurator :&#x3D; &amp;Configurator&#123;</span><br><span class="line">client:                   client,</span><br><span class="line">recorderFactory:          recorderFactory,</span><br><span class="line">informerFactory:          informerFactory,</span><br><span class="line">podInformer:              podInformer,</span><br><span class="line">schedulerCache:           schedulerCache,</span><br><span class="line">StopEverything:           stopEverything,</span><br><span class="line">percentageOfNodesToScore: options.percentageOfNodesToScore,</span><br><span class="line">podInitialBackoffSeconds: options.podInitialBackoffSeconds,</span><br><span class="line">podMaxBackoffSeconds:     options.podMaxBackoffSeconds,</span><br><span class="line">profiles:                 append([]schedulerapi.KubeSchedulerProfile(nil), options.profiles...),</span><br><span class="line">registry:                 registry,</span><br><span class="line">nodeInfoSnapshot:         snapshot,</span><br><span class="line">extenders:                options.extenders,</span><br><span class="line">frameworkCapturer:        options.frameworkCapturer,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#96;metrics&#96; 注册</span><br><span class="line">metrics.Register()</span><br><span class="line"></span><br><span class="line">    var sched *Scheduler</span><br><span class="line">    &#x2F;&#x2F; 进行调度算法逻辑处理</span><br><span class="line">source :&#x3D; options.schedulerAlgorithmSource</span><br><span class="line">switch &#123;</span><br><span class="line">case source.Provider !&#x3D; nil:</span><br><span class="line">&#x2F;&#x2F; Create the config from a named algorithm provider.</span><br><span class="line">&#x2F;&#x2F;@3</span><br><span class="line">sc, err :&#x3D; configurator.createFromProvider(*source.Provider)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;couldn&#39;t create scheduler using provider %q: %v&quot;, *source.Provider, err)</span><br><span class="line">&#125;</span><br><span class="line">sched &#x3D; sc</span><br><span class="line">case source.Policy !&#x3D; nil:</span><br><span class="line">&#x2F;&#x2F; Create the config from a user specified policy source.</span><br><span class="line">policy :&#x3D; &amp;schedulerapi.Policy&#123;&#125;</span><br><span class="line">switch &#123;</span><br><span class="line">case source.Policy.File !&#x3D; nil:</span><br><span class="line">if err :&#x3D; initPolicyFromFile(source.Policy.File.Path, policy); err !&#x3D; nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">case source.Policy.ConfigMap !&#x3D; nil:</span><br><span class="line">if err :&#x3D; initPolicyFromConfigMap(client, source.Policy.ConfigMap, policy); err !&#x3D; nil &#123;</span><br><span class="line">return nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Set extenders on the configurator now that we&#39;ve decoded the policy</span><br><span class="line">&#x2F;&#x2F; In this case, c.extenders should be nil since we&#39;re using a policy (and therefore not componentconfig,</span><br><span class="line">&#x2F;&#x2F; which would have set extenders in the above instantiation of Configurator from CC options)</span><br><span class="line">configurator.extenders &#x3D; policy.Extenders</span><br><span class="line">sc, err :&#x3D; configurator.createFromConfig(*policy)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, fmt.Errorf(&quot;couldn&#39;t create scheduler from policy: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">sched &#x3D; sc</span><br><span class="line">default:</span><br><span class="line">return nil, fmt.Errorf(&quot;unsupported algorithm source: %v&quot;, source)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; Additional tweaks to the config produced by the configurator.</span><br><span class="line">sched.StopEverything &#x3D; stopEverything</span><br><span class="line">sched.client &#x3D; client</span><br><span class="line">sched.scheduledPodsHasSynced &#x3D; podInformer.Informer().HasSynced</span><br><span class="line"></span><br><span class="line">addAllEventHandlers(sched, informerFactory, podInformer)</span><br><span class="line">return sched, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析到现在实际上关于<code>scheduler</code> 初始化做的具体工作结束了，那么下面就到了<code>cmd/kube-scheduler/server.go</code> 中的 <code>Run</code> 函数了，然后最终会调用 <code>pkg/scheduler/scheduler.go</code> 中的 <code>Run</code> 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func (sched *Scheduler) Run(ctx context.Context) &#123;</span><br><span class="line">if !cache.WaitForCacheSync(ctx.Done(), sched.scheduledPodsHasSynced) &#123;</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;@1</span><br><span class="line">sched.SchedulingQueue.Run()</span><br><span class="line">wait.UntilWithContext(ctx, sched.scheduleOne, 0)</span><br><span class="line">sched.SchedulingQueue.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上我们发现 <code>Scheduler</code> 结构体中的 <code>SchedulingQueue</code> 出现的很频繁，这也是需要重点分析的部分，<em>题外话到了看到<code>Queue</code>，让我再一次加深了打牢基础的重要性，不还是数据结构的东西么</em></p><h2 id="SchedulingQueue"><a href="#SchedulingQueue" class="headerlink" title="SchedulingQueue"></a><code>SchedulingQueue</code></h2><p><code>ShcedulingQueue</code> 此接口主要用通过队列实现对等待调度状态的<code>Pods</code>进行存放，此接口有点类似于<code>cache.FIFO</code>,<code>cache.Heap</code>的模式，同时便于使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">type SchedulingQueue interface &#123;</span><br><span class="line">framework.PodNominator</span><br><span class="line">Add(pod *v1.Pod) erro）</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将不可调度的&#96;pods&#96;放回调度队列中，</span><br><span class="line">AddUnschedulableIfNotPresent(pod *framework.QueuedPodInfo, podSchedulingCycle int64) error</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 调度循环返回当前调度队列缓存中的数目，通常来讲，当&#96;pod&#96;被弹出进行数目的递增</span><br><span class="line">SchedulingCycle() int64</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法&#96;Pop&#96;移除队列的首部元素，当队列为空直到有新的元素添加到队列的时候一直处于阻塞状态</span><br><span class="line">Pop() (*framework.QueuedPodInfo, error)</span><br><span class="line"></span><br><span class="line">Update(oldPod, newPod *v1.Pod) error</span><br><span class="line">Delete(pod *v1.Pod) error</span><br><span class="line">MoveAllToActiveOrBackoffQueue(event string)</span><br><span class="line">AssignedPodAdded(pod *v1.Pod)</span><br><span class="line">AssignedPodUpdated(pod *v1.Pod)</span><br><span class="line">PendingPods() []*v1.Pod</span><br><span class="line">&#x2F;&#x2F; Close closes the SchedulingQueue so that the goroutine which is</span><br><span class="line">&#x2F;&#x2F; waiting to pop items can exit gracefully.</span><br><span class="line">Close()</span><br><span class="line">&#x2F;&#x2F; NumUnschedulablePods returns the number of unschedulable pods exist in the SchedulingQueue.</span><br><span class="line">NumUnschedulablePods() int</span><br><span class="line">&#x2F;&#x2F; Run starts the goroutines managing the queue.</span><br><span class="line">Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这边我们知道通过定义 <code>SchedulingQueue</code> 接口抽象了调度队列的框架，那么具体的实现是分析的重点。</p><p>还记得<a href="https://kiragoo.github.io/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/">kubernetes源码分析系列之kube-scheduler-1</a>中我们讲到了<code>Run</code>服务运行，其中有段代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Leader election is disabled, so runCommand inline until done.</span><br><span class="line">sched.Run(ctx)</span><br></pre></td></tr></table></figure><p>这边还是调用了<code>sched</code>的<code>Run</code>方法，注意这边个人对<code>sched</code>这个的命名的理解是<code>scheduler daemon</code>，这边应该是一个<code>daemon</code>进程。<br>最终又回到了@1的调用逻辑，实际上就是<code>SchedulingQueue</code>的<code>Run</code>方法，此时我们还未看到真正执行调度队列<code>Run</code>方法的承载体，实际上在<code>pkg/scheduler/internal/quque/scheduling_queue.go</code>中在声明 <code>SchedulingQueue</code>接口之后，下文就进行了具体的实现，<br>即使我们能够确定就是这么个逻辑，但是对于程序来说是如何感知的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; @4</span><br><span class="line">func NewSchedulingQueue(lessFn framework.LessFunc, opts ...Option) SchedulingQueue &#123;</span><br><span class="line">return NewPriorityQueue(lessFn, opts...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意这边函数初始化得到一个优先队列，优先队列的返回即为<code>SchedulingQueue</code></p><p>我们继续分析函数<code>NewPriorityQueue(lessFn,opts...)</code>，根据如下函数签名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; NewPriorityQueue creates a PriorityQueue object.</span><br><span class="line">func NewPriorityQueue(</span><br><span class="line">lessFn framework.LessFunc,</span><br><span class="line">opts ...Option,</span><br><span class="line">) *PriorityQueue</span><br></pre></td></tr></table></figure><p>可以得知返回值就是一个<code>*PriorityQueue</code>指针，那么至此就说明了按照<code>SchedulingQueue</code>接口实现的结构体<code>PriorityQueue</code>就是最终的承载体。</p><p>到了这边我们实际上还有个问题没有理清，就是那是在什么时候进行<code>NewSchedulingQueue</code>初始化的操作的呢？</p><p>我们继续回顾以上内容，重点注意下@2部分初始化的<code>Configurator</code>以及<code>configurator.createFromProvider</code>方法。<br><code>Configurator</code>主要用于初始化构造<code>Scheduler</code>，具体的定义是在<code>pkg/scheduler/factory.go</code>中</p><h2 id="createFromProvider"><a href="#createFromProvider" class="headerlink" title="createFromProvider"></a><code>createFromProvider</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据注册的算法&#96;provider&#96; 创建&#96;scheduler&#96;</span><br><span class="line">func (c *Configurator) createFromProvider(providerName string) (*Scheduler, error) &#123;</span><br><span class="line">.....</span><br><span class="line">&#x2F;&#x2F; 通过调用 &#96;Configurator.create&#123;...&#125;&#96;方法得到 &#96;Scheduler&#96;</span><br><span class="line">return c.create()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下分析 <code>c.create()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 根据注册的插件创建 &#96;scheduler&#96;</span><br><span class="line">func (c *Configurator) create() (*Scheduler, error) &#123;</span><br><span class="line">&#x2F;&#x2F;其他细节业务逻辑</span><br><span class="line">.....</span><br><span class="line">&#x2F;&#x2F;这里构造得到的&#96;podQueue&#96; 不就是上文@4的&#96;NewSchedulingQueue&#96;函数么？</span><br><span class="line">podQueue :&#x3D; internalqueue.NewSchedulingQueue(</span><br><span class="line">lessFn,</span><br><span class="line">internalqueue.WithPodInitialBackoffDuration(time.Duration(c.podInitialBackoffSeconds)*time.Second),</span><br><span class="line">internalqueue.WithPodMaxBackoffDuration(time.Duration(c.podMaxBackoffSeconds)*time.Second),</span><br><span class="line">internalqueue.WithPodNominator(nominator),</span><br><span class="line">)</span><br><span class="line">.....</span><br><span class="line">return &amp;Scheduler&#123;</span><br><span class="line">SchedulerCache:  c.schedulerCache,</span><br><span class="line">Algorithm:       algo,</span><br><span class="line">Profiles:        profiles,</span><br><span class="line">NextPod:         internalqueue.MakeNextPodFunc(podQueue),</span><br><span class="line">Error:           MakeDefaultErrorFunc(c.client, c.informerFactory.Core().V1().Pods().Lister(), podQueue, c.schedulerCache),</span><br><span class="line">StopEverything:  c.StopEverything,</span><br><span class="line">SchedulingQueue: podQueue,</span><br><span class="line">&#125;, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此关于<code>SchedulingQueue</code>相关的流程梳理打通明白所以然了。</p><h2 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h2><p>老规矩以上基本上都是围绕着代码进行梳理，对于最后的总结归纳通过流程图是最直接了当的，下面上图。<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fgy1gphepm8lqoj21qe12swkh.jpg" alt="流程图"></p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之kube-scheduler scheduler初始化流程分析</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/kube-scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/tags/kube-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码分析系列之kube-scheduler-1</title>
    <link href="http://kiragoo.github.com/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/"/>
    <id>http://kiragoo.github.com/2021/04/12/kubernetes%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E4%B9%8Bkube-scheduler-1/</id>
    <published>2021-04-12T06:12:00.000Z</published>
    <updated>2021-04-12T08:40:55.572Z</updated>
    
    <content type="html"><![CDATA[<p><code>kube-scheduler</code> 源码分析系列重点作为代码流程梳理，对于 <code>kube-scheduler</code> 的文档还请详见<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/kube-scheduler/">kube-scheduler</a>介绍。</p><p><em>如下代码分析对于细节的处理会跳过，只看主干</em></p><h1 id="代码入口分析"><a href="#代码入口分析" class="headerlink" title="代码入口分析"></a>代码入口分析</h1><p><code>kubernetes/cmd/kube-scheduler/app/scheduler.go</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @1</span><br><span class="line">command :&#x3D; app.NewSchedulerCommand()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; TODO: once we switch everything over to Cobra commands, we can go back to calling</span><br><span class="line">&#x2F;&#x2F; utilflag.InitFlags() (by removing its pflag.Parse() call). For now, we have to set the</span><br><span class="line">&#x2F;&#x2F; normalize func and add the go flag set by hand.</span><br><span class="line">pflag.CommandLine.SetNormalizeFunc(cliflag.WordSepNormalizeFunc)</span><br><span class="line">&#x2F;&#x2F; utilflag.InitFlags()</span><br><span class="line">logs.InitLogs()</span><br><span class="line">defer logs.FlushLogs()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;@2</span><br><span class="line">if err :&#x3D; command.Execute(); err !&#x3D; nil &#123;</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@1 <code>app.NewSchedulerCommand(）</code> 主要为命令行注册对应的 options， 借助<code>cobra </code> 库进行 <code>Command</code> 的对应 parse 和初始化工作。:</li><li>@2 <code>command.Execute()</code> 实际上是服务启动入口，继续 <code>step in</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ExecuteContext is the same as Execute(), but sets the ctx on the command.</span><br><span class="line">&#x2F;&#x2F; Retrieve ctx by calling cmd.Context() inside your *Run lifecycle functions.</span><br><span class="line">func (c *Command) ExecuteContext(ctx context.Context) error &#123;</span><br><span class="line">c.ctx &#x3D; ctx</span><br><span class="line">return c.Execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Execute uses the args (os.Args[1:] by default)</span><br><span class="line">&#x2F;&#x2F; and run through the command tree finding appropriate matches</span><br><span class="line">&#x2F;&#x2F; for commands and then corresponding flags.</span><br><span class="line">func (c *Command) Execute() error &#123;</span><br><span class="line">_, err :&#x3D; c.ExecuteC()</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c *Command) ExecuteC() (cmd *Command, err error) &#123;</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F; initialize help as the last point possible to allow for user</span><br><span class="line">&#x2F;&#x2F; overriding</span><br><span class="line">c.InitDefaultHelpCmd()</span><br><span class="line">    .....</span><br><span class="line">    &#x2F;&#x2F; initialize the hidden command to be used for bash completion</span><br><span class="line">c.initCompleteCmd(args)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; @3</span><br><span class="line">err &#x3D; cmd.execute(flags)</span><br><span class="line">    .....</span><br><span class="line">return cmd, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此时我们通过函数名发现 @3 部分是真正执行的部分，继续深入看看:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">func (c *Command) execute(a []string) (err error) &#123;</span><br><span class="line">.....</span><br><span class="line">    &#x2F;&#x2F; initialize help and version flag at the last point possible to allow for user</span><br><span class="line">&#x2F;&#x2F; overriding</span><br><span class="line">c.InitDefaultHelpFlag()</span><br><span class="line">c.InitDefaultVersionFlag()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">c.preRun()</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line">    if c.PreRunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.PreRunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if c.PreRun !&#x3D; nil &#123;</span><br><span class="line">c.PreRun(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if err :&#x3D; c.validateRequiredFlags(); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">if c.RunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.RunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">c.Run(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line">if c.PostRunE !&#x3D; nil &#123;</span><br><span class="line">if err :&#x3D; c.PostRunE(c, argWoFlags); err !&#x3D; nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if c.PostRun !&#x3D; nil &#123;</span><br><span class="line">c.PostRun(c, argWoFlags)</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在此段库函数代码中我们会发现一堆与<code>Run</code>相关的函数，此部分库函数我也未做详细学习，但是根据名称我们可以理解实际上是做真正运行的一些前置工作，由于与 <code>kube-scheduler</code> 核心机制没有太大的干系，可以先大概了解下，不能忘了此次分析的主要矛盾。</li></ul><p>既然我们知道了最终是 <code>Command</code> 调用了，结合 <code>kube-scheduler</code> 我们是怎么和 上下文关联起来的呢？这里我们回头再继续看下 <code>app.NewSchedulerCommand()</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">func NewSchedulerCommand(registryOptions ...Option) *cobra.Command &#123;</span><br><span class="line">    .....</span><br><span class="line">    Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line"></span><br><span class="line">if err :&#x3D; runCommand(cmd, opts, registryOptions...); err !&#x3D; nil &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, &quot;%v\n&quot;, err)</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; runCommand runs the scheduler.</span><br><span class="line">func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error &#123;</span><br><span class="line">    .....</span><br><span class="line">    return Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处才是kube-scheduler真正意义上执行的具体逻辑</span><br><span class="line">&#x2F;&#x2F; Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="入口启动流程梳理"><a href="#入口启动流程梳理" class="headerlink" title="入口启动流程梳理"></a>入口启动流程梳理</h2><p><img src="http://tvax2.sinaimg.cn/wap800/7a56748fly1gpgzjgtrpuj214m0ri0wr.jpg" alt="流程梳理"><br>以上为主要的启动流程分析，主要还是围绕着 <code>Command</code> 运行的入口流程进行分析。下面我们重点关注<code>kube-scheduler</code> 初始化及真正运行具体做了哪些事情。</p><h1 id="kube-scheduler-创建及运行"><a href="#kube-scheduler-创建及运行" class="headerlink" title="kube-scheduler 创建及运行"></a><code>kube-scheduler</code> 创建及运行</h1><ul><li>入口<br>在 <code>runCommand</code> 这个函数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; runCommand runs the scheduler.</span><br><span class="line">func runCommand(cmd *cobra.Command, opts *options.Options, registryOptions ...Option) error &#123;</span><br><span class="line">    .....</span><br><span class="line">cc, sched, err :&#x3D; Setup(ctx, opts, registryOptions...)</span><br><span class="line">    .....</span><br><span class="line">    return Run(ctx, cc, sched)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Setup</code> 创建工作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Setup creates a completed config and a scheduler based on the command args and options</span><br><span class="line">func Setup(ctx context.Context, opts *options.Options, outOfTreeRegistryOptions ...Option) (*schedulerserverconfig.CompletedConfig, *scheduler.Scheduler, error) &#123;</span><br><span class="line">if errs :&#x3D; opts.Validate(); len(errs) &gt; 0 &#123;</span><br><span class="line">return nil, nil, utilerrors.NewAggregate(errs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err :&#x3D; opts.Config()</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取 config 对象</span><br><span class="line">&#x2F;&#x2F; Get the completed config</span><br><span class="line">cc :&#x3D; c.Complete()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 初始化 outOfTreeRegistry, 后续基于 Scheduler Framwork 自定义的 插件注册关联的地方，后续再介绍 Scheduler Framework</span><br><span class="line">outOfTreeRegistry :&#x3D; make(runtime.Registry)</span><br><span class="line">for _, option :&#x3D; range outOfTreeRegistryOptions &#123;</span><br><span class="line">if err :&#x3D; option(outOfTreeRegistry); err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F; 创建事件记录器</span><br><span class="line">recorderFactory :&#x3D; getRecorderFactory(&amp;cc)</span><br><span class="line">    &#x2F;&#x2F; 初始化 scheduler</span><br><span class="line">&#x2F;&#x2F; Create the scheduler.</span><br><span class="line">sched, err :&#x3D; scheduler.New(cc.Client,</span><br><span class="line">cc.InformerFactory,</span><br><span class="line">cc.PodInformer,</span><br><span class="line">recorderFactory,</span><br><span class="line">ctx.Done(),</span><br><span class="line">scheduler.WithProfiles(cc.ComponentConfig.Profiles...),</span><br><span class="line">scheduler.WithAlgorithmSource(cc.ComponentConfig.AlgorithmSource),</span><br><span class="line">scheduler.WithPercentageOfNodesToScore(cc.ComponentConfig.PercentageOfNodesToScore),</span><br><span class="line">scheduler.WithFrameworkOutOfTreeRegistry(outOfTreeRegistry),</span><br><span class="line">scheduler.WithPodMaxBackoffSeconds(cc.ComponentConfig.PodMaxBackoffSeconds),</span><br><span class="line">scheduler.WithPodInitialBackoffSeconds(cc.ComponentConfig.PodInitialBackoffSeconds),</span><br><span class="line">scheduler.WithExtenders(cc.ComponentConfig.Extenders...),</span><br><span class="line">)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return nil, nil, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return &amp;cc, sched, nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>scheduler</code> 初始化完成，初始化结束。</p><ul><li><code>Run</code> 服务运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Run executes the scheduler based on the given configuration. It only returns on error or when context is done.</span><br><span class="line">func Run(ctx context.Context, cc *schedulerserverconfig.CompletedConfig, sched *scheduler.Scheduler) error &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据提供的名称创建Configz</span><br><span class="line">&#x2F;&#x2F; Configz registration.</span><br><span class="line">if cz, err :&#x3D; configz.New(&quot;componentconfig&quot;); err &#x3D;&#x3D; nil &#123;</span><br><span class="line">cz.Set(cc.ComponentConfig)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return fmt.Errorf(&quot;unable to register configz: %s&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 事件广播准备</span><br><span class="line">&#x2F;&#x2F; Prepare the event broadcaster.</span><br><span class="line">cc.EventBroadcaster.StartRecordingToSink(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建健康检查数组</span><br><span class="line">&#x2F;&#x2F; Setup healthz checks.</span><br><span class="line">var checks []healthz.HealthChecker</span><br><span class="line">    &#x2F;&#x2F; 判断是否需要进行leader选举</span><br><span class="line">if cc.ComponentConfig.LeaderElection.LeaderElect &#123;</span><br><span class="line">checks &#x3D; append(checks, cc.LeaderElection.WatchDog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 进行健康检查</span><br><span class="line">&#x2F;&#x2F; Start up the healthz server.</span><br><span class="line">if cc.InsecureServing !&#x3D; nil &#123;</span><br><span class="line">separateMetrics :&#x3D; cc.InsecureMetricsServing !&#x3D; nil</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, separateMetrics, checks...), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start healthz server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.InsecureMetricsServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newMetricsHandler(&amp;cc.ComponentConfig), nil, nil)</span><br><span class="line">if err :&#x3D; cc.InsecureMetricsServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;failed to start metrics server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if cc.SecureServing !&#x3D; nil &#123;</span><br><span class="line">handler :&#x3D; buildHandlerChain(newHealthzHandler(&amp;cc.ComponentConfig, false, checks...), cc.Authentication.Authenticator, cc.Authorization.Authorizer)</span><br><span class="line">&#x2F;&#x2F; TODO: handle stoppedCh returned by c.SecureServing.Serve</span><br><span class="line">if _, err :&#x3D; cc.SecureServing.Serve(handler, 0, ctx.Done()); err !&#x3D; nil &#123;</span><br><span class="line">&#x2F;&#x2F; fail early for secure handlers, removing the old error loop from above</span><br><span class="line">return fmt.Errorf(&quot;failed to start secure server: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 运行所有informer</span><br><span class="line">&#x2F;&#x2F; Start all informers.</span><br><span class="line">go cc.PodInformer.Informer().Run(ctx.Done())</span><br><span class="line">cc.InformerFactory.Start(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 在调度前等待缓存同步</span><br><span class="line">&#x2F;&#x2F; Wait for all caches to sync before scheduling.</span><br><span class="line">cc.InformerFactory.WaitForCacheSync(ctx.Done())</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 根据是否开启选举开关进行选举逻辑</span><br><span class="line">&#x2F;&#x2F; If leader election is enabled, runCommand via LeaderElector until done and exit.</span><br><span class="line">if cc.LeaderElection !&#x3D; nil &#123;</span><br><span class="line">cc.LeaderElection.Callbacks &#x3D; leaderelection.LeaderCallbacks&#123;</span><br><span class="line">OnStartedLeading: sched.Run,</span><br><span class="line">OnStoppedLeading: func() &#123;</span><br><span class="line">klog.Fatalf(&quot;leaderelection lost&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">leaderElector, err :&#x3D; leaderelection.NewLeaderElector(*cc.LeaderElection)</span><br><span class="line">if err !&#x3D; nil &#123;</span><br><span class="line">return fmt.Errorf(&quot;couldn&#39;t create leader elector: %v&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leaderElector.Run(ctx)</span><br><span class="line"></span><br><span class="line">return fmt.Errorf(&quot;lost lease&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 运行服务</span><br><span class="line">&#x2F;&#x2F; Leader election is disabled, so runCommand inline until done.</span><br><span class="line">sched.Run(ctx)</span><br><span class="line">return fmt.Errorf(&quot;finished without leader elect&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>kube-scheduler</code> 算是真正意义上的运行了。</p><h2 id="scheduler-初始化及运行流程梳理"><a href="#scheduler-初始化及运行流程梳理" class="headerlink" title="scheduler 初始化及运行流程梳理"></a><code>scheduler</code> 初始化及运行流程梳理</h2><p><img src="http://tva2.sinaimg.cn/wap800/7a56748fly1gph1m7uzsgj21hy11279t.jpg" alt="初始化及运行流程"></p><p><strong>至此<code>kube-scheduler</code>入口启动过程算是结束了，个人理解，如若有不对地方还望多多指教。</strong></p>]]></content>
    
    
    <summary type="html">kubernetes v1.19.8 源码分析系列之kube-scheduler 启动入口分析</summary>
    
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/categories/kubernetes/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/categories/kubernetes/kube-scheduler/"/>
    
    
    <category term="kubernetes" scheme="http://kiragoo.github.com/tags/kubernetes/"/>
    
    <category term="源码分析" scheme="http://kiragoo.github.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="kube-scheduler" scheme="http://kiragoo.github.com/tags/kube-scheduler/"/>
    
  </entry>
  
  <entry>
    <title>7天用go从零实现系列之web框架Day1</title>
    <link href="http://kiragoo.github.com/2021/04/11/7%E5%A4%A9%E7%94%A8go%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E7%B3%BB%E5%88%97%E4%B9%8Bweb%E6%A1%86%E6%9E%B6Day1/"/>
    <id>http://kiragoo.github.com/2021/04/11/7%E5%A4%A9%E7%94%A8go%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0%E7%B3%BB%E5%88%97%E4%B9%8Bweb%E6%A1%86%E6%9E%B6Day1/</id>
    <published>2021-04-11T14:27:26.000Z</published>
    <updated>2021-04-11T15:17:30.657Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一些不错的博客系列文章，包括为<a href="http://geektutu.com/">@极客兔兔</a>原创的7天从零系列的文章，此系列文章为个人阅读及个人描述记录。</p><p>其中序言部分主要描述的是一个web框架大概需要实现的内容，此处借鉴了<a href="https://gin-gonic.com/">Gin</a>的设计思想。</p><h1 id="启动Web服务"><a href="#启动Web服务" class="headerlink" title="启动Web服务"></a>启动Web服务</h1><p>使用 <code>net/http</code> 库，封装了http的网络编程的基础的接口。<br><code>d1-http-v1/main.go</code></p><h2 id="v1版本"><a href="#v1版本" class="headerlink" title="v1版本"></a>v1版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;log&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 映射路由</span><br><span class="line">http.HandleFunc(&quot;&#x2F;&quot;, indexHandler) </span><br><span class="line">http.HandleFunc(&quot;&#x2F;hello&quot;, helloHandler)</span><br><span class="line">    &#x2F;&#x2F; 启动 web 服务</span><br><span class="line">log.Fatal(http.ListenAndServe(&quot;:9999&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handler echoes r.URL.Path</span><br><span class="line">func indexHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; handler echoes r.URL.Header</span><br><span class="line">func helloHandler(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v :&#x3D; range req.Header &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;Header[%q] &#x3D; %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接通过 <code>http.HandleFunc</code> 函数将具体处理函数与路由做好映射关系。</p><p><strong>关键函数分析</strong></p><ul><li><code>http.ListenAndServe</code>:<br>通过传入 <code>addr</code>，<code>handler</code>, <code>addr</code> 为 <code>string</code> 类型，重点再看下 <code>Handler</code> 的定义 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ListenAndServe listens on the TCP network address addr and then calls</span><br><span class="line">&#x2F;&#x2F; Serve with handler to handle requests on incoming connections.</span><br><span class="line">&#x2F;&#x2F; Accepted connections are configured to enable TCP keep-alives.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; The handler is typically nil, in which case the DefaultServeMux is used.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ListenAndServe always returns a non-nil error.</span><br><span class="line">func ListenAndServe(addr string, handler Handler) error &#123;</span><br><span class="line">server :&#x3D; &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line">return server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Handler</code>:<br>即通过实现 <code>Handler</code> 接口中定义的 <code>    ServeHTTP(ResponseWriter, *Request)</code> 即实现了对 <code>http</code> 请求的处理。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; A Handler responds to an HTTP request.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; ServeHTTP should write reply headers and data to the ResponseWriter</span><br><span class="line">&#x2F;&#x2F; and then return. Returning signals that the request is finished; it</span><br><span class="line">&#x2F;&#x2F; is not valid to use the ResponseWriter or read from the</span><br><span class="line">&#x2F;&#x2F; Request.Body after or concurrently with the completion of the</span><br><span class="line">&#x2F;&#x2F; ServeHTTP call.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Depending on the HTTP client software, HTTP protocol version, and</span><br><span class="line">&#x2F;&#x2F; any intermediaries between the client and the Go server, it may not</span><br><span class="line">&#x2F;&#x2F; be possible to read from the Request.Body after writing to the</span><br><span class="line">&#x2F;&#x2F; ResponseWriter. Cautious handlers should read the Request.Body</span><br><span class="line">&#x2F;&#x2F; first, and then reply.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; Except for reading the body, handlers should not modify the</span><br><span class="line">&#x2F;&#x2F; provided Request.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span><br><span class="line">&#x2F;&#x2F; that the effect of the panic was isolated to the active request.</span><br><span class="line">&#x2F;&#x2F; It recovers the panic, logs a stack trace to the server error log,</span><br><span class="line">&#x2F;&#x2F; and either closes the network connection or sends an HTTP&#x2F;2</span><br><span class="line">&#x2F;&#x2F; RST_STREAM, depending on the HTTP protocol. To abort a handler so</span><br><span class="line">&#x2F;&#x2F; the client sees an interrupted response but the server doesn&#39;t log</span><br><span class="line">&#x2F;&#x2F; an error, panic with the value ErrAbortHandler.</span><br><span class="line">type Handler interface &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以此引申 <code>v2</code> 版本</li></ul><h2 id="v2-版本"><a href="#v2-版本" class="headerlink" title="v2 版本"></a>v2 版本</h2><p>项目结构如下：<br><img src="http://tvax1.sinaimg.cn/wap800/7a56748fgy1gpg74zeh17j20qw0bqjs9.jpg" alt="项目结构"></p><p>在项目中引用了本地包的依赖，这里需要对项目中内部模块进行依赖配置:<br>在根目录中的 <code>go.mod</code> 文件进行如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module kgeedemo</span><br><span class="line"></span><br><span class="line">go 1.15</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">kgee v0.0.0</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replace (</span><br><span class="line">kgee &#x3D;&gt; .&#x2F;kgee</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p><code>main.go</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;kgee&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化-&gt; 路由映射缓存 -&gt; 启动服务</span><br><span class="line">func main() &#123;</span><br><span class="line">    &#x2F;&#x2F; 初始化 kgee，类似于门面模式，将需要处理的工作在函数内部处理了。</span><br><span class="line">r :&#x3D; kgee.New()</span><br><span class="line">    &#x2F;&#x2F; args[1] 参数为 函数</span><br><span class="line">r.GET(&quot;&#x2F;&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">_, _ &#x3D; fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(&quot;&#x2F;hello&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v :&#x3D; range req.Header &#123;</span><br><span class="line">_, _ &#x3D; fmt.Fprintf(w, &quot;Header[%q] &#x3D; %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#x2F;&#x2F; 服务器运行</span><br><span class="line">_ &#x3D; r.Run(&quot;:9999&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>kgee.go</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package kgee</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&#x2F;http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;HandlerFunc defines the reques handler used by kgee</span><br><span class="line">type HandlerFunc func(w http.ResponseWriter, req *http.Request)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Engin implement the interface of ServeHTTP</span><br><span class="line">type Engine struct &#123;</span><br><span class="line">router map[string]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;New is the constructor of kgee.Engine</span><br><span class="line">func New() *Engine &#123;</span><br><span class="line">return &amp;Engine&#123;router: make(map[string]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) &#123;</span><br><span class="line">key :&#x3D; method + &quot;-&quot; + pattern</span><br><span class="line">engine.router[key] &#x3D; handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engin *Engine) GET(pattern string, handler HandlerFunc) &#123;</span><br><span class="line">engin.addRoute(&quot;GET&quot;, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) POST(pattern string, hander HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(&quot;POST&quot;, pattern, hander)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 完成 ServeHttp 函数</span><br><span class="line">func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key :&#x3D; req.Method + &quot;-&quot; + req.URL.Path</span><br><span class="line">if handler, ok :&#x3D; engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">fmt.Println(w, &quot;404 NOT FOUND:%s\n&quot;, req.URL)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (engine *Engine) Run(addr string) (err error) &#123;</span><br><span class="line">return http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个简单示例即完成，如下我们可以验证下。</p></li></ul><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>这里我 <code>Goland</code> 中集成了 <code>RestConsole</code> 插件，直接用这个插件进行测试。测试结果如下：</p><ul><li>请求 <code>/</code> 对应的路由结果如下:<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpg7imm6xbj20nm0gewgk.jpg" alt="r1"></li><li>请求 <code>/hello</code> 对应的路由结果如下:<br><img src="http://tvax4.sinaimg.cn/wap800/7a56748fgy1gpg7jvm0fvj20o40igjtw.jpg" alt="r2"></li></ul><p><em>参考链接</em>:</p><p><a href="https://geektutu.com/post/gee-day1.html">https://geektutu.com/post/gee-day1.html</a></p><p><em>本文代码</em>:</p><p><a href="https://github.com/kiragoo/kgee/tree/day1">https://github.com/kiragoo/kgee/tree/day1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看到一些不错的博客系列文章，包括为&lt;a href=&quot;http://geektutu.com/&quot;&gt;@极客兔兔&lt;/a&gt;原创的7天从零系列的文章，此系列文章为个人阅读及个人描述记录。&lt;/p&gt;
&lt;p&gt;其中序言部分主要描述的是一个web框架大概需要实现的内容，此处借鉴了&lt;a hr</summary>
      
    
    
    
    <category term="golang" scheme="http://kiragoo.github.com/categories/golang/"/>
    
    
    <category term="golang" scheme="http://kiragoo.github.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Mac之搭建本地k8s开发环境</title>
    <link href="http://kiragoo.github.com/2021/04/11/Mac%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0k8s%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://kiragoo.github.com/2021/04/11/Mac%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0k8s%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2021-04-11T01:50:53.000Z</published>
    <updated>2021-04-11T02:07:47.521Z</updated>
    
    <content type="html"><![CDATA[<p>Mac搭建本地k8s环境目前网上有N多的博客文章，无非就是minikube、docker-desktop、kubeadm去部署，对于我个人需求，由于后期需要对原生的 scheduler 进行自定义的扩展开发，我需要能够有机会改动静态POD的manifests文件进行改动与配置。</p><p>前期通过 minikube 及 docker-desktop 进行过本地k8s集群的部署，但是发现此种沙盒环境无法对静态POD进行配置改动，只能围着k8s做周边的应用测试，没法满足我的需求，最后决定通过kubeadm进行k8s本地环境部署。</p><p>所以最终选择： Virtualbox + Centos7 镜像进行单节点k8s部署【此环境只做组件部署及逻辑验证】</p><h1 id="VirutalBox安装及Centos-虚拟机安装"><a href="#VirutalBox安装及Centos-虚拟机安装" class="headerlink" title="VirutalBox安装及Centos 虚拟机安装"></a>VirutalBox安装及Centos 虚拟机安装</h1><p>具体的介绍就不多介绍了，我选用的为 6.1.4 没有选用最新的版本，主要是担心出了问题可能没有最新及时的资料可以参考。</p><p>如何创建虚机就不多介绍了，但是以下注意点需要注意：</p><ul><li>虚机CPU至少分配2核</li><li>虚机网络连接选择为bridge，之前选择的Nat模式无法获取本地ip，虽然能通外网。 此现象比较诡异</li></ul><h1 id="Kubeadm-安装及K8s集群初始化"><a href="#Kubeadm-安装及K8s集群初始化" class="headerlink" title="Kubeadm 安装及K8s集群初始化"></a>Kubeadm 安装及K8s集群初始化</h1><p>由于此次的工作只是作为本地开发测试环境，不作为生产环境的部署方案，所以在这里我只是通过yum 安装，不过对于无网的生产环境部署，实际上也可以通过制作本地yum源来部署，这里就不做扩展讨论了。</p><h2 id="更新yum"><a href="#更新yum" class="headerlink" title="更新yum"></a>更新yum</h2><p><code>yum upgrade -y</code></p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h2 id="更改Selinux配置"><a href="#更改Selinux配置" class="headerlink" title="更改Selinux配置"></a>更改Selinux配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 &#x2F;&#x2F;临时改动</span><br><span class="line">sed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config &#x2F;&#x2F;写入配置永久改动</span><br></pre></td></tr></table></figure><h2 id="关闭-swap"><a href="#关闭-swap" class="headerlink" title="关闭 swap"></a>关闭 swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sysctl -w vm.swappiness&#x3D;0</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 到 &#x2F;etc&#x2F;fstab 中将 涉及到 swap 的配置进行注释</span><br></pre></td></tr></table></figure><h2 id="网桥参数配置"><a href="#网桥参数配置" class="headerlink" title="网桥参数配置"></a>网桥参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h2 id="安装-socat"><a href="#安装-socat" class="headerlink" title="安装 socat"></a>安装 socat</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install socat -y</span><br></pre></td></tr></table></figure><h2 id="安装-docker-并启动-docker-daemon-服务"><a href="#安装-docker-并启动-docker-daemon-服务" class="headerlink" title="安装 docker 并启动 docker daemon 服务"></a>安装 docker 并启动 docker daemon 服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">   &quot;exec-opts&quot;: [&quot;native.cgroupdriver&#x3D;systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="配置-kubernetes-的国内yum源"><a href="#配置-kubernetes-的国内yum源" class="headerlink" title="配置 kubernetes 的国内yum源"></a>配置 kubernetes 的国内yum源</h2><p>这里配置的是阿里 yum 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vcat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">repo_gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装-kubelet、kubectl、kubeadm"><a href="#安装-kubelet、kubectl、kubeadm" class="headerlink" title="安装 kubelet、kubectl、kubeadm"></a>安装 kubelet、kubectl、kubeadm</h2><p>由于后续工作是对k8s版本有指定要求的，所以在部署的时候我需要安装指定的k8s 版本组件，可以通过如下命令进行yum list 查看可安装版本<br>yum list kubelet kubeadm kubectl –showduplicates|sort -r<br>安装组件指定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubelet-1.19.8-0 kubeadm-1.19.8-0 kubectl-1.19.8-0</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p>这个时候我们查看 kubelet 的服务没有正常启动，这个是正常的，因为它会关联 kubeadm.conf 这个配置文件，此时我们还没有用kubeadm进行集群的初始化。所以这个反应是正常的。</p><h2 id="通过kubeadm初始化k8s集群"><a href="#通过kubeadm初始化k8s集群" class="headerlink" title="通过kubeadm初始化k8s集群"></a>通过kubeadm初始化k8s集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version&#x3D;1.19.8 --image-repository&#x3D;registry.aliyuncs.com&#x2F;google_containers --pod-network-cidr&#x3D;192.168.0.0&#x2F;16</span><br></pre></td></tr></table></figure><h2 id="根据OutPut生成对应的配置文件"><a href="#根据OutPut生成对应的配置文件" class="headerlink" title="根据OutPut生成对应的配置文件"></a>根据OutPut生成对应的配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure><h2 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h2><p>由于到了这边我们没有安装网络插件，此时集群的节点状态是NotReady，为了方便后续的维护，我是将 calico.yaml 下载下来放到指定目录方便后续维护的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSLO https:&#x2F;&#x2F;ms-source.oss-cn-shanghai.aliyuncs.com&#x2F;calico&#x2F;yaml&#x2F;calico-v3.17.0.yaml</span><br></pre></td></tr></table></figure><h2 id="部署Calico组件"><a href="#部署Calico组件" class="headerlink" title="部署Calico组件"></a>部署Calico组件</h2><p><code>kubectl create -f calico-v3.17.0.yaml</code><br>此步骤结束之后算是k8s集群部署工作算是完成了，但是由于我这边只是一个master节点，kubeadm默认是做了 Taint的污点策略，此时的节点是不可调度的，通过产看pod状态，会出现如下现象：<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpfktg2dmoj20p105f0u6.jpg" alt="pod-pending状态"></p><p>具体原因可以通过如下操作进行查明:<br><img src="http://tvax3.sinaimg.cn/wap800/7a56748fgy1gpfkue7d78j20y50ldtdd.jpg" alt="reason"></p><p>解决使用的命令如下：<br><code>kubectl taint nodes --all node-role.kubernetes.io/master-</code><br>此时再继续查看pod的状态，可以发现是正常的了。<br><img src="http://tva1.sinaimg.cn/wap800/7a56748fgy1gpfkvfgpygj20tj05fmyn.jpg" alt="pods"></p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>将在期望状态的虚机导一份镜像出来，方便后续使用</li><li>virtualbox 中的虚机个人喜欢无界面启动，此操作可以通过 控制台或者命令行形式进行操作。</li></ul>]]></content>
    
    
    <summary type="html">mac 搭建本地 k8s 开发环境</summary>
    
    
    
    <category term="k8s" scheme="http://kiragoo.github.com/categories/k8s/"/>
    
    
    <category term="k8s" scheme="http://kiragoo.github.com/tags/k8s/"/>
    
    <category term="kubeadm" scheme="http://kiragoo.github.com/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之丑数</title>
    <link href="http://kiragoo.github.com/2021/04/10/leetcode%E4%B9%8B%E4%B8%91%E6%95%B0/"/>
    <id>http://kiragoo.github.com/2021/04/10/leetcode%E4%B9%8B%E4%B8%91%E6%95%B0/</id>
    <published>2021-04-10T14:51:46.000Z</published>
    <updated>2021-04-11T01:44:39.241Z</updated>
    
    <content type="html"><![CDATA[<p>题目描述：<br>给你一个整数 n ，请你判断 n 是否为 丑数 。如果是，返回 true ；否则，返回 false 。</p><p>丑数 就是只包含质因数 2、3 和/或 5 的正整数。<br><img src="http://tvax3.sinaimg.cn/large/7a56748fgy1gpf33mppc3j210q124q6n.jpg" alt="描述"></p><p><a href="https://leetcode-cn.com/problems/ugly-number">链接</a></p><h1 id="leetcode每日一题之丑数"><a href="#leetcode每日一题之丑数" class="headerlink" title="leetcode每日一题之丑数"></a>leetcode每日一题之丑数</h1><p>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public boolean isUgly(int num) &#123;</span><br><span class="line">        if(num &#x3D;&#x3D; 0) return false;</span><br><span class="line">        while(num !&#x3D; 1)&#123;</span><br><span class="line">            if(num%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;2;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(num%3&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;3;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(num%5&#x3D;&#x3D;0)&#123;</span><br><span class="line">                num&#x2F;&#x3D;5;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Go</span><br><span class="line">func isUgly(num int) bool&#123;</span><br><span class="line">if num &#x3D;&#x3D; 0 &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">for&#123;</span><br><span class="line">if num &#x3D;&#x3D; 1 &#123;</span><br><span class="line">break</span><br><span class="line">&#125;</span><br><span class="line">if num % 2 &#x3D;&#x3D; 0 &#123;</span><br><span class="line">num&#x2F;&#x3D;2</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if num % 3 &#x3D;&#x3D; 0&#123;</span><br><span class="line">num&#x2F;&#x3D;3</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if num % 5 &#x3D;&#x3D; 0 &#123;</span><br><span class="line">num&#x2F;&#x3D;5</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">leetcode 每日一题</summary>
    
    
    
    <category term="编程" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="算法" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/categories/%E7%BC%96%E7%A8%8B/%E7%AE%97%E6%B3%95/leetcode/"/>
    
    
    <category term="算法" scheme="http://kiragoo.github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://kiragoo.github.com/tags/leetcode/"/>
    
    <category term="java" scheme="http://kiragoo.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kiragoo.github.com/2021/04/10/hello-world/"/>
    <id>http://kiragoo.github.com/2021/04/10/hello-world/</id>
    <published>2021-04-10T13:23:43.398Z</published>
    <updated>2021-04-10T13:23:43.398Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
